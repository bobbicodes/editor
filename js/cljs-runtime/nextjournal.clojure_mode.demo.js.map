{"version":3,"sources":["nextjournal/clojure_mode/demo.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.demo/theme","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","js/nextjournal","js/nextjournal.clojure-mode","js/nextjournal.clojure-mode.demo","js/nextjournal.clojure-mode.demo.extensions","nextjournal.clojure-mode.demo/extensions","js/module$node_modules$$codemirror$commands$dist$index_cjs.history","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxHighlighting","js/module$node_modules$$codemirror$language$dist$index_cjs.defaultHighlightStyle","js/module$node_modules$$codemirror$view$dist$index_cjs.drawSelection","js/module$node_modules$$codemirror$language$dist$index_cjs.foldGutter","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","nextjournal.clojure-mode/default-extensions","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","nextjournal.clojure-mode/complete-keymap","js/module$node_modules$$codemirror$commands$dist$index_cjs.historyKeymap","p__58107","map__58108","cljs.core/--destructure-map","cljs.core.get","nextjournal.clojure-mode.demo/editor","source","eval?","with-let58109","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__47102__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init58110","cljs.core/not","res58111","destroy__47101__auto__","reagent.ratom/reactive?","!view","reagent.core.atom","last-result","nextjournal.clojure_mode.demo.sci.eval_string","mount!","el","cljs.core/reset!","nextjournal.clojure-mode.test-utils/make-state","G__58112","nextjournal.clojure-mode.demo.sci/extension","cljs.core.partial","cljs.core/deref","obj__46651__auto__","f__46652__auto__","nextjournal.clojure-mode.demo/samples","cljs.core.into","iter__4622__auto__","s__58114","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__58116","cljs.core/chunk-buffer","i__58115","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58113","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","nextjournal.clojure-mode.demo/linux?","cljs.core/re-find","js/navigator.userAgent","nextjournal.clojure-mode.demo/mac?","js/navigator.platform","nextjournal.clojure-mode.demo/key-mapping","G__58117","cljs.core.merge","nextjournal.clojure-mode.demo/render","reagent.dom.render","js/document.getElementById","p1__58118#","js/document.querySelectorAll","clojure.string/trim","mapping","p1__58119#","k","obj58120","obj58121","js/twemoji.parse","js/document","cljs.core/chunk-first"],"sourcesContent":["(ns nextjournal.clojure-mode.demo\r\n  (:require [\"@codemirror/language\" :refer [foldGutter syntaxHighlighting defaultHighlightStyle]]\r\n            [\"@codemirror/commands\" :refer [history historyKeymap]]\r\n            [\"@codemirror/state\" :refer [EditorState]]\r\n            [\"@codemirror/view\" :as view :refer [EditorView]]\r\n            [nextjournal.clerk.sci-viewer :as sv]\r\n            [nextjournal.clerk.viewer :as v]\r\n            [applied-science.js-interop :as j]\r\n            [shadow.resource :as rc]\r\n            [clojure.string :as str]\r\n            [nextjournal.clojure-mode :as cm-clj]\r\n            [nextjournal.livedoc :as livedoc]\r\n            [nextjournal.clojure-mode.demo.sci :as demo.sci]\r\n            [nextjournal.clojure-mode.keymap :as keymap]\r\n            [nextjournal.clojure-mode.live-grammar :as live-grammar]\r\n            [nextjournal.clojure-mode.test-utils :as test-utils]\r\n            [\"react\" :as react] \r\n            [reagent.core :as r]\r\n            [reagent.dom :as rdom]))\r\n\r\n(def theme\r\n  (.theme EditorView\r\n          (j/lit {\".cm-content\" {:white-space \"pre-wrap\"\r\n                                 :padding \"10px 0\"\r\n                                 :flex \"1 1 0\"}\r\n\r\n                  \"&.cm-focused\" {:outline \"0 !important\"}\r\n                  \".cm-line\" {:padding \"0 9px\"\r\n                              :line-height \"1.6\"\r\n                              :font-size \"16px\"\r\n                              :font-family \"var(--code-font)\"}\r\n                  \".cm-matchingBracket\" {:border-bottom \"1px solid var(--teal-color)\"\r\n                                         :color \"inherit\"}\r\n                  \".cm-gutters\" {:background \"transparent\"\r\n                                 :border \"none\"}\r\n                  \".cm-gutterElement\" {:margin-left \"5px\"}\r\n                  ;; only show cursor when focused\r\n                  \".cm-cursor\" {:visibility \"hidden\"}\r\n                  \"&.cm-focused .cm-cursor\" {:visibility \"visible\"}})))\r\n\r\n(defonce extensions #js[theme\r\n                        (history)\r\n                        (syntaxHighlighting defaultHighlightStyle)\r\n                        (view/drawSelection)\r\n                        (foldGutter)\r\n                        (.. EditorState -allowMultipleSelections (of true))\r\n                        (if false\r\n                          ;; use live-reloading grammar\r\n                          #js[(cm-clj/syntax live-grammar/parser)\r\n                              (.slice cm-clj/default-extensions 1)]\r\n                          cm-clj/default-extensions)\r\n                        (.of view/keymap cm-clj/complete-keymap)\r\n                        (.of view/keymap historyKeymap)])\r\n\r\n\r\n(defn editor [source {:keys [eval?]}]\r\n  (r/with-let [!view (r/atom nil)\r\n               last-result (when eval? (r/atom (demo.sci/eval-string source)))\r\n               mount! (fn [el]\r\n                        (when el\r\n                          (reset! !view (new EditorView\r\n                                             (j/obj :state\r\n                                                    (test-utils/make-state\r\n                                                     (cond-> #js [extensions]\r\n                                                       eval? (.concat #js [(demo.sci/extension {:modifier \"Alt\"\r\n                                                                                                :on-result (partial reset! last-result)})]))\r\n                                                     source)\r\n                                                    :parent el)))))]\r\n    [:div\r\n     [:div {:class \"rounded-md mb-0 text-sm monospace overflow-auto relative border shadow-lg bg-white\"\r\n            :ref mount!\r\n            :style {:max-height 410}}]\r\n     (:result @last-result)]\r\n    (finally\r\n     (j/call @!view :destroy))))\r\n\r\n(defn samples []\r\n  (into [:<>]\r\n        (for [source [\"(comment\r\n  (fizz-buzz 1)\r\n  (fizz-buzz 3)\r\n  (fizz-buzz 5)\r\n  (fizz-buzz 15)\r\n  (fizz-buzz 17)\r\n  (fizz-buzz 42))\r\n\r\n(defn fizz-buzz [n]\r\n  (condp (fn [a b] (zero? (mod b a))) n\r\n    15 \\\"fizzbuzz\\\"\r\n    3  \\\"fizz\\\"\r\n    5  \\\"buzz\\\"\r\n    n))\"]]\r\n          [editor source {:eval? true}])))\r\n\r\n(defn linux? []\r\n  (some? (re-find #\"(Linux)|(X11)\" js/navigator.userAgent)))\r\n\r\n(defn mac? []\r\n  (and (not (linux?))\r\n       (some? (re-find #\"(Mac)|(iPhone)|(iPad)|(iPod)\" js/navigator.platform))))\r\n\r\n(defn key-mapping []\r\n  (cond-> {\"ArrowUp\" \"\u2191\"\r\n           \"ArrowDown\" \"\u2193\"\r\n           \"ArrowRight\" \"\u2192\"\r\n           \"ArrowLeft\" \"\u2190\"\r\n           \"Mod\" \"Ctrl\"}\r\n    (mac?)\r\n    (merge {\"Alt\" \"\u2325\"\r\n            \"Shift\" \"\u21e7\"\r\n            \"Enter\" \"\u23ce\"\r\n            \"Ctrl\" \"\u2303\"\r\n            \"Mod\" \"\u2318\"})))\r\n\r\n(defn ^:dev/after-load render []\r\n  (rdom/render [samples] (js/document.getElementById \"editor\"))\r\n  (.. (js/document.querySelectorAll \"[clojure-mode]\")\r\n      (forEach #(when-not (.-firstElementChild %)\r\n                  (rdom/render [editor (str/trim (.-innerHTML %))] %))))\r\n  (let [mapping (key-mapping)]\r\n    (.. (js/document.querySelectorAll \".mod,.alt,.ctrl\")\r\n        (forEach #(when-let [k (get mapping (.-innerHTML %))]\r\n                    (set! (.-innerHTML %) k)))))\r\n\r\n  ;; set viewer tailwind stylesheet\r\n  (j/assoc! (js/document.getElementById \"viewer-stylesheet\")\r\n            :innerHTML (rc/inline \"stylesheets/viewer.css\"))\r\n\r\n  (when (linux?)\r\n    (js/twemoji.parse (.-body js/document))))\r\n\r\n(comment\r\n  (let [ctx' (sci.core/fork @sv/!sci-ctx)\r\n        ctx'' (sci.core/merge-opts ctx' {:namespaces {'foo {'bar \"ahoi\"}}})]\r\n\r\n    (demo.sci/eval-string ctx'' \"(def o (j/assoc! #js {:a 1} :b 2))\")\r\n    (demo.sci/eval-string ctx'' \"(j/lookup (j/assoc! #js {:a 1} :b 2))\")\r\n    (demo.sci/eval-string ctx'' \"(j/get o :b)\")\r\n    (demo.sci/eval-string ctx'' \"(into-array [1 2 3])\")\r\n\r\n    ;; this is not evaluable as-is in sci\r\n    (demo.sci/eval-string ctx'' \"(j/let [^:js {:keys [a b]} o] (map inc [a b]))\")))\r\n"]}