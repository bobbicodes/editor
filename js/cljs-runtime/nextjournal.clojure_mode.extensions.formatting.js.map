{"version":3,"sources":["nextjournal/clojure_mode/extensions/formatting.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.formatting/spaces","state","n","js/module$node_modules$$codemirror$language$dist$index_cjs","p__60290","map__60293","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj60307","js/undefined","nextjournal.clojure-mode.extensions.formatting/indent-node-props","type-name","type","p__60309","map__60311","obj60314","obj60316","obj60317","obj60319","context","pos","unit","node","cljs.core._EQ_","nextjournal.clojure-mode.node/coll-type?","G__60322","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/end","and__4221__auto__","G__60327","fexpr__60326","G__60328","nextjournal.clojure-mode.node/right","nextjournal.clojure-mode.node/name","nextjournal.clojure-mode.extensions.formatting/props","js/module$node_modules$$codemirror$language$dist$index_cjs.indentNodeProp","nextjournal.clojure-mode.extensions.formatting/get-indentation","js/module$node_modules$$codemirror$language$dist$index_cjs.getIndentation","nextjournal.clojure-mode.extensions.formatting/make-indent-context","js/module$node_modules$$codemirror$language$dist$index_cjs.IndentContext","nextjournal.clojure-mode.extensions.formatting/indent-all","nextjournal.clojure-mode.util/update-lines","from","content","line-num","current-indent","indent","nextjournal.clojure-mode.util/guard","cljs.core/complement","cljs.core/neg?","G__60331","js/Error","cljs.core/compare","nextjournal.clojure-mode.extensions.formatting/expected-space","n1","n2","nextjournal.clojure-mode.node/start-edge-type?","nextjournal.clojure-mode.node/prefix-edge-type?","nextjournal.clojure-mode.node/end-edge-type?","nextjournal.clojure-mode.node/same-edge-type?","nextjournal.clojure-mode.extensions.formatting/space-changes","to","nodes","nextjournal.clojure-mode.node/terminal-nodes","p1__60355#","cljs.core.filter","nextjournal.clojure-mode.node/start","cljs.core/reverse","trim?","G__60356","cljs.core/first","cljs.core.partition","cljs.core.reduce","p__60358","vec__60360","map__60366","cljs.core.nth","obj60370","obj60373","obj60374","map__60367","obj60411","obj60412","obj60414","out","start2","end2","start1","end1","expected","actual","G__60416","Array60417","Array60420","nextjournal.clojure-mode.extensions.formatting/into-arr","arr","items","seq__60424","cljs.core/seq","chunk__60425","count__60426","i__60427","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","i","nextjournal.clojure-mode.extensions.formatting/format-line","indent-context","text","changes","format-spaces?","indentation-change","G__60439","space-changes","or__4223__auto__","nextjournal.clojure_mode.node.embedded_QMARK_","nextjournal.clojure_mode.node.within_program_QMARK_","G__60446","Array60448","nextjournal.clojure-mode.extensions.formatting/format-selection","nextjournal.clojure-mode.util/update-selected-lines","p__60451","map__60453","obj60456","obj60458","obj60460","line","number","range","nextjournal.clojure-mode.extensions.formatting/format-all","nextjournal.clojure-mode.extensions.formatting/format-transaction","tr","origin","nextjournal.clojure-mode.util/get-user-event-annotation","temp__5755__auto__","G__60467","nextjournal.clojure-mode.util/iter-changed-lines","obj60473","obj60474","nextjournal.clojure-mode.extensions.formatting/format","nextjournal.clojure-mode.util/something-selected?","nextjournal.clojure-mode.extensions.formatting/prefix-all","prefix","_","nextjournal.clojure-mode.extensions.formatting/ext-format-changed-lines","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.formatting\r\n  (:require [\"@codemirror/language\" :as language :refer [IndentContext]]\r\n            [\"@codemirror/state\" :refer [EditorState Transaction]]\r\n            [applied-science.js-interop :as j]\r\n            [nextjournal.clojure-mode.util :as u]\r\n            [nextjournal.clojure-mode.node :as n]))\r\n\r\n;; CodeMirror references\r\n;; IndentContext https://codemirror.net/6/docs/ref/#state.IndentContext\r\n;; indentation facet: https://codemirror.net/6/docs/ref/#state.EditorState%5Eindentation\r\n;; indentation commands: https://codemirror.net/6/docs/ref/#commands.indentSelection\r\n\r\n;; Clojure formatting reference\r\n;; https://tonsky.me/blog/clojurefmt/\r\n\r\n(defn spaces [^js state n]\r\n  (.indentString language state n))\r\n\r\n(j/defn indent-node-props [^:js {type-name :name :as type}]\r\n  (j/fn [^:js {:as ^js context :keys [pos unit node ^js state]}]\r\n    (cond (= \"Program\" type-name)\r\n          0\r\n\r\n          (n/coll-type? type)\r\n          (cond-> (.column context\r\n                           (-> node n/down n/end))\r\n            ;; start at the inner-left edge of the coll.\r\n            ;; if it's a list beginning with a symbol, add 1 space.\r\n            (and (= \"List\" type-name)\r\n                 (#{\"Operator\"\r\n                    \"DefLike\"\r\n                    \"NS\"} (some-> node n/down n/right n/name)))\r\n            (+ 1))\r\n          :else -1)))\r\n\r\n(def props (.add language/indentNodeProp\r\n                 indent-node-props))\r\n\r\n(defn get-indentation [^js context pos]\r\n  (language/getIndentation (.-state context) pos))\r\n\r\n(defn make-indent-context [state]\r\n  (new IndentContext state))\r\n\r\n;; TODO: check if this is used at all\r\n(defn indent-all [^js state]\r\n  (let [context (make-indent-context state)]\r\n    (u/update-lines state\r\n                    (fn [from content line-num]\r\n                      (let [current-indent (-> (.exec #\"^\\s*\" content)\r\n                                               ^js (aget 0)\r\n                                               .-length)\r\n                            ^number indent (-> (get-indentation context from)\r\n                                               (u/guard (complement neg?)))]\r\n                        (when indent\r\n                          (case (compare indent current-indent)\r\n                            0 nil\r\n                            1 #js{:from (+ from current-indent)\r\n                                  :insert (spaces state (- indent ^number current-indent))}\r\n                            -1 #js{:from (+ from indent)\r\n                                   :to (+ from current-indent)})))))))\r\n\r\n(defn expected-space [n1 n2]\r\n  ;;  (prn :expected (map n/name [n1 n2]))\r\n  (if\r\n   (or\r\n    (n/start-edge-type? n1)\r\n    (n/prefix-edge-type? n1)\r\n    (n/end-edge-type? n2)\r\n    (n/same-edge-type? n2))\r\n    0\r\n    1))\r\n\r\n(defn space-changes [state from to]\r\n  (let [nodes (->> (n/terminal-nodes state from to)\r\n                   (filter #(or (<= from (n/start %) to)\r\n                                (<= from (n/end %) to)))\r\n                   (reverse))\r\n        trim? (some-> (first nodes) n/end (< to))]\r\n    (->> nodes\r\n         (partition 2 1)\r\n         (reduce (j/fn [out [^:js {n2 :type start2 :from end2 :to}\r\n                             ^:js {n1 :type start1 :from end1 :to}]]\r\n                   (let [expected (expected-space n1 n2)\r\n                         actual (- start2 end1)]\r\n                     (case (compare actual expected)\r\n                       0 out\r\n                       1 (j/push! out #js{:from (if (zero? expected)\r\n                                                  end1\r\n                                                  (inc end1))\r\n                                          :to start2})\r\n                       -1 (j/push! out #js{:from end1\r\n                                           :insert \" \"})\r\n                       out)))\r\n\r\n                 (if trim?\r\n                   (j/lit [{:from (-> nodes first n/end)\r\n                            :to to}])\r\n                   #js[])))))\r\n\r\n(defn into-arr [^js arr items]\r\n  (doseq [i items] (.push arr i))\r\n  arr)\r\n\r\n(defn format-line\r\n  \"Returns mutated `changes` array\"\r\n  [^js state\r\n   indent-context\r\n   from\r\n   text\r\n   line-num\r\n   changes\r\n   format-spaces?]\r\n  {:pre [(some? text)]}\r\n  (let [current-indent (-> ^js (aget (.exec #\"^\\s*\" text) 0)\r\n                           .-length)\r\n        ^number indent (-> (get-indentation indent-context from)\r\n                           (u/guard (complement neg?)))\r\n        indentation-change\r\n        (when indent\r\n          (case (compare indent current-indent)\r\n            0 nil\r\n            1 #js{:from (+ from current-indent)\r\n                  :insert (spaces state (- indent current-indent))}\r\n            -1 #js{:from (+ from indent)\r\n                   :to (+ from current-indent)}))\r\n        space-changes (when (and format-spaces?\r\n                                 (or (n/embedded? state from)\r\n                                     (n/within-program? state from)))\r\n                        (space-changes state\r\n                                       (+ from current-indent)\r\n                                       (+ from (count text))))]\r\n    (cond-> changes\r\n      space-changes (into-arr space-changes)\r\n      indentation-change (j/push! indentation-change))))\r\n\r\n(defn format-selection\r\n  [^js state]\r\n  (let [context (make-indent-context state)]\r\n    (u/update-selected-lines state\r\n                             (j/fn [^:js {:as line :keys [from text number]} ^js changes ^js range]\r\n                               (format-line state context from text number changes true)))))\r\n\r\n(defn format-all [state]\r\n  (let [context (make-indent-context state)]\r\n    (u/update-lines state\r\n                    (fn [^number from ^string text line-num]\r\n                      (format-line state context from text line-num #js[] true)))))\r\n\r\n(defn format-transaction [^js tr]\r\n  (let [origin (u/get-user-event-annotation tr)]\r\n    (if-some [changes\r\n              (when (n/within-program? (.-startState tr))\r\n                (case origin\r\n                  (\"input\" \"input.type\"\r\n                   \"delete\"\r\n                   \"keyboardselection\"\r\n                   \"pointerselection\" \"select.pointer\"\r\n                   \"cut\"\r\n                   \"noformat\"\r\n                   \"evalregion\") nil\r\n                  \"format-selections\" (format-selection (.-state tr))\r\n                  (when-not (.. tr -changes -empty)\r\n                    (let [state (.-state tr)\r\n                          context (make-indent-context state)]\r\n                      (u/iter-changed-lines tr\r\n                                            (fn [^js line ^js changes]\r\n                                              (format-line state context (.-from line) (.-text line) (.-number line) changes true)))))))]\r\n      (.. tr -startState (update (j/assoc! changes :filter false)))\r\n      tr)))\r\n\r\n(defn format [state]\r\n  (if (u/something-selected? state)\r\n    (.update state (format-selection state))\r\n    (format-all state)))\r\n\r\n(defn prefix-all [prefix state]\r\n  (u/update-lines state\r\n    (fn [from _ _] #js{:from from :insert prefix})))\r\n\r\n(defn ext-format-changed-lines [] (.. EditorState -transactionFilter (of format-transaction)))\r\n"]}