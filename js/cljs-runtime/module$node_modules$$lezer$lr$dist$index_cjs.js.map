{
"version":3,
"file":"module$node_modules$$lezer$lr$dist$index_cjs.js",
"lineCount":63,
"mappings":"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",
"sources":["node_modules/@lezer/lr/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$lezer$lr$dist$index_cjs\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar common = require('@lezer/common');\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case\u2014they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing\u2014when looking forward\u2014or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        // Do a binary search on the state's edges\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(common.IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof common.Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(common.NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // \u2654, \u2655, \u2656, \u2657, \u2658, \u2659, \u2660, \u2661, \u2662, \u2663, \u2664, \u2665, \u2666, \u2667\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(common.NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof common.Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof common.Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return common.Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends common.Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = common.NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new common.NodeSet(nodeNames.map((name, i) => common.NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = common.DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexports.ContextTracker = ContextTracker;\nexports.ExternalTokenizer = ExternalTokenizer;\nexports.InputStream = InputStream;\nexports.LRParser = LRParser;\nexports.Stack = Stack;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeArray","input","Type","Uint16Array","array","pos","out","length","value","next","charCodeAt","stop","digit","cutAt","tree","side","cursor","common","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","to","from","type","isError","Math","max","min","prevSibling","nextSibling","parent","pushStackDedup","stack","newStacks","i","other","sameState","score","push","pair","data","off","findOffset","start","term","findFinished","stacks","best","stopped","p","stoppedAt","stream","end","parser","stateFlag","state","process","Object","defineProperty","Stack","constructor","reducePos","buffer","bufferBase","curContext","lookAhead","toString","filter","_","concat","cx","context","StackContext","pushState","reduce","action","depth","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","count","baseStateID","pop","size","isReduce","cur","top","index","shift","nextEnd","maxNode","shiftContext","apply","useNode","reused","updateContext","tracker","reuse","reset","split","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","s","some","v","result","forceReduce","validAction","target","forceAll","restart","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","fork","CachedToken","extended","mask","nullToken","InputStream","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","readNext","resolveOffset","offset","assoc","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","TokenGroup","id","groupMask","accEnd","allows","overrides","low","high","mid","prototype","contextual","fallback","extend","ExternalTokenizer","options","verbose","env","test","LOG","stackIDs","Safety","FragmentCursor","fragments","nodeSet","fragment","safeTo","safeFrom","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","Rec","Parse","recovering","nextStackID","minStackPos","topTerm","bufferLength","advanceStack","stoppedTokens","tok","finished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","types","contextHash","inner","defaultReduce","localStack","advanceFully","restarted","tokenEnd","deadEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","get","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","Parser","setProp","nodeID","nodeProps","deserialize","wrappers","version","nodeNames","repeatNodeCount","topTerms","keys","topRules","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","configure","config","copy","assign","info","t","found","find","contextTracker","wrap","hasWrappers","prec","values","part","Uint8Array"]
}
