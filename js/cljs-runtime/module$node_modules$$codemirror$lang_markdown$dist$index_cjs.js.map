{
"version":3,
"file":"module$node_modules$$codemirror$lang_markdown$dist$index_cjs.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/@codemirror/lang-markdown/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$lang_markdown$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar state = require('@codemirror/state');\nvar view = require('@codemirror/view');\nvar language = require('@codemirror/language');\nvar markdown$1 = require('@lezer/markdown');\nvar langHtml = require('@codemirror/lang-html');\n\nconst data = language.defineLanguageFacet({ block: { open: \"\u003c!--\", close: \"--\u003e\" } });\nconst commonmark = markdown$1.parser.configure({\n    props: [\n        language.foldNodeProp.add(type => {\n            if (!type.is(\"Block\") || type.is(\"Document\"))\n                return undefined;\n            return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        language.indentNodeProp.add({\n            Document: () => null\n        }),\n        language.languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction mkLang(parser) {\n    return new language.Language(data, parser);\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = mkLang(commonmark);\nconst extended = commonmark.configure([markdown$1.GFM, markdown$1.Subscript, markdown$1.Superscript, markdown$1.Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = language.LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof language.LanguageDescription)\n                return found.support ? found.support.language.parser : language.ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nfunction nodeStart(node, doc) {\n    return doc.sliceString(node.from, node.from + 50);\n}\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(trailing = true) {\n        let result = this.spaceBefore;\n        if (this.node.name == \"Blockquote\")\n            result += \">\";\n        else\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n        return result + (trailing ? this.spaceAfter : \"\");\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, line, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\")\n            nodes.push(cur);\n    }\n    let context = [], pos = 0;\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match, start = pos;\n        if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.slice(pos)))) {\n            pos += match[0].length;\n            context.push(new Context(node, start, pos, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(nodeStart(node, doc)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            pos += len;\n            context.push(new Context(node.parent, start, pos, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(nodeStart(node, doc)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            pos += len;\n            context.push(new Context(node.parent, start, pos, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state: state$1, dispatch }) => {\n    let tree = language.syntaxTree(state$1), { doc } = state$1;\n    let dont = null, changes = state$1.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state$1, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), line.text, doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: state.EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++)\n                    insert += context[i].blank(i < e);\n                insert += state$1.lineBreak;\n                return { range: state.EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state$1.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let insert = state$1.lineBreak;\n        let continued = inner.item && inner.item.from < line.from;\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++)\n                insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank();\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        changes.push({ from, to: pos, insert });\n        return { range: state.EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state: state$1, dispatch }) => {\n    let tree = language.syntaxTree(state$1);\n    let dont = null, changes = state$1.changeByRange(range => {\n        let pos = range.from, { doc } = state$1;\n        if (range.empty && markdownLanguage.isActiveAt(state$1, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), line.text, doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: state.EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank() } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: state.EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = langHtml.html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;\n    if (!(parser instanceof markdown$1.MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof language.LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(markdown$1.parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(state.Prec.high(view.keymap.of(markdownKeymap)));\n    return new language.LanguageSupport(mkLang(parser.configure(extensions)), support);\n}\n\nexports.commonmarkLanguage = commonmarkLanguage;\nexports.deleteMarkupBackward = deleteMarkupBackward;\nexports.insertNewlineContinueMarkup = insertNewlineContinueMarkup;\nexports.markdown = markdown;\nexports.markdownKeymap = markdownKeymap;\nexports.markdownLanguage = markdownLanguage;\n\n};"],
"names":["shadow$provide","global","require","module","exports","getCodeParser","languages","defaultLanguage","info","found","language","LanguageDescription","matchLanguageName","support","parser","ParseContext","getSkippingParser","load","getContext","node","line","doc","nodes","cur","name","parent","push","context","pos","i","length","match","start","exec","slice","Context","sliceString","from","after","len","type","replace","itemNumber","item","renumberList","changes","offset","prev","m","number","to","insert","String","next","nextSibling","isMark","Object","defineProperty","value","state","view","markdown$1","langHtml","data","defineLanguageFacet","block","open","close","commonmark","configure","props","foldNodeProp","add","is","tree","lineAt","indentNodeProp","Document","languageDataProp","commonmarkLanguage","Language","extended","GFM","Subscript","Superscript","Emoji","markdownLanguage","constructor","spaceBefore","spaceAfter","blank","trailing","result","marker","insertNewlineContinueMarkup","state$1","dispatch","syntaxTree","dont","changeByRange","range","empty","isActiveAt","resolveInner","text","pop","inner","emptyLine","test","firstChild","delTo","EditorSelection","cursor","e","lineBreak","prevLine","quoted","index","map","continued","charAt","update","scrollIntoView","userEvent","deleteMarkupBackward","scan","childBefore","lastChild","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","config","codeLanguages","defaultCodeLanguage","addKeymap","MarkdownParser","RangeError","extensions","LanguageSupport","defaultCode","codeParser","undefined","parseCode","htmlParser","Prec","high","keymap","of"]
}
