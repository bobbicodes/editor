{"version":3,"sources":["sci/impl/resolve.cljc"],"mappings":"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","names":["sci.impl.resolve/throw-error-with-location","msg","node","sci.impl.utils.throw_error_with_location","sci.impl.resolve/mark-resolve-sym","sym","idx","cljs.core.vary_meta","m","cljs.core.assoc","p__62926","vec__62927","cljs.core.nth","sci.impl.resolve/check-permission!","ctx","check-sym","v","or__4223__auto__","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/strip-core-ns","allow","sci.impl.vars/var?","cljs.core/not","cljs.core/meta","cljs.core/contains?","deny","var_args","G__62932","sci.impl.resolve/lookup*","js/Error","call?","sci.impl.resolve.lookup_STAR_","only-var?","cljs.core/deref","sym-ns","G__62943","cljs.core/namespace","cljs.core.symbol","sym-name","cljs.core/name","env","cnn","sci.impl.vars/current-ns-name","the-current-ns","G__62946","cljs.core.get_in","cljs.core._EQ_","G__62948","cljs.core.get","cljs.core/find","temp__5753__auto__","sci.impl.utils/ana-macros","G__62949","clazz","sci.impl.interop/resolve-class","cljs.core/with-meta","stack","sci.impl.vars/current-file","sci.impl.vars/current-ns","sci.impl.types/->NodeR","this","bindings","sci.impl.interop/get-static-field","refers","kv","G__62953","G__62955","c","x","sci.impl.records.resolve_record_or_protocol_class","sci.impl.resolve/update-parents","closure-bindings","ob","parents","new-cb","cljs.core/-vreset!","cljs.core/-deref","cb","cljs.core/first","cljs.core.reduce","p__62957","vec__62958","acc","path","_idx","new-acc","cljs.core.update_in","entry","iden->invoke-idx","added-before?","cljs.core/count","new-res","cljs.core/pop","cljs.core/reduced","cljs.core.range","closure-idx","cljs.core.conj","G__62963","sci.impl.resolve/lookup","sci.impl.resolve.lookup","_tag","vec__62964","k","oi","G__62967","cljs.core/vreset!","sci.impl.utils/lookup","sci.impl.resolve/resolve-dotted-access","tag","prefix-idx","clojure.string.index_of","prefix","cljs.core.subs","new-sym","resolved","sci.impl.resolve/resolve-symbol","G__62987","sci.impl.resolve.resolve_symbol","res","cljs.core/second","n","and__4221__auto__","clojure.string/starts-with?","clojure.string/ends-with?"],"sourcesContent":["(ns sci.impl.resolve\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.faster :as faster]\n            [sci.impl.interop :as interop]\n            [sci.impl.records :as records]\n            [sci.impl.types :refer [->Node]]\n            [sci.impl.utils :as utils :refer [strip-core-ns\n                                              ana-macros]]\n            [sci.impl.vars :as vars]))\n\n(defn throw-error-with-location [msg node]\n  (utils/throw-error-with-location msg node {:phase \"analysis\"}))\n\n(defn mark-resolve-sym\n  [sym idx]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m\n            :sci.impl/op :resolve-sym\n            :sci.impl/idx idx))))\n\n(defn check-permission! [ctx sym [check-sym  v]]\n  (or (identical? utils/allowed-loop sym)\n      (identical? utils/allowed-recur sym)\n      (let [check-sym (strip-core-ns check-sym)\n            allow (:allow ctx)]\n        (when-not (if allow (or (and (vars/var? v) (not (:sci/built-in (meta v))))\n                                (contains? allow check-sym))\n                      true)\n          (throw-error-with-location (str sym \" is not allowed!\") sym))\n        (let [deny (:deny ctx)]\n          (when (if deny (contains? deny check-sym)\n                    false)\n            (throw-error-with-location (str sym \" is not allowed!\") sym))))))\n\n(defn lookup*\n  ([ctx sym call?] (lookup* ctx sym call? false))\n  ([ctx sym call? only-var?]\n   (let [sym-ns (some-> (namespace sym) symbol)\n         sym-name (symbol (name sym))\n         env (faster/get-2 ctx :env)\n         env @env\n         cnn (vars/current-ns-name)\n         the-current-ns (-> env :namespaces cnn)\n         ;; resolve alias\n         sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                 sym-ns))]\n     (if sym-ns\n       (or\n        (when (or (= sym-ns 'clojure.core) (= sym-ns 'cljs.core))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get ana-macros sym-name))]\n                [sym v])))\n        (or (some-> env :namespaces (get sym-ns) (find sym-name))\n            (when-not only-var?\n              (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                [sym (if call?\n                       (with-meta\n                         [clazz sym-name]\n                         {:sci.impl.analyzer/static-access true})\n                       (let [stack (assoc (meta sym)\n                                          :file @vars/current-file\n                                          :ns @vars/current-ns)]\n                         (->Node\n                          (interop/get-static-field [clazz sym-name])\n                          stack)))]))))\n       ;; no sym-ns\n       (or\n        ;; prioritize refers over vars in the current namespace, see 527\n        (when-let [refers (:refers the-current-ns)]\n          (find refers sym-name))\n        (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (let [kv (some-> env :namespaces (get 'clojure.core) (find sym-name))]\n          ;; only valid when the symbol isn't excluded\n          (when-not (some-> the-current-ns\n                            :refer\n                            (get 'clojure.core)\n                            :exclude\n                            (contains? sym-name))\n            kv))\n        (when (when call? (get ana-macros sym))\n          [sym sym])\n        (when-not only-var?\n          (or\n           (when-let [c (interop/resolve-class ctx sym)]\n             [sym c])\n           ;; resolves record or protocol referenced as class\n           ;; e.g. clojure.lang.IDeref which is really a var in clojure.lang/IDeref\n           (when-let [x (records/resolve-record-or-protocol-class ctx sym)]\n             [sym x]))))))))\n\n(defn update-parents\n  \":syms = closed over -> idx\"\n  [ctx closure-bindings ob]\n  (let [parents (:parents ctx)\n        new-cb (vswap! closure-bindings\n                       (fn [cb]\n                         (first\n                          (reduce\n                           (fn [[acc path] _idx]\n                             (let [new-acc\n                                   (update-in\n                                    acc path\n                                    (fn [entry]\n                                      (let [iden->invoke-idx (or (:syms entry)\n                                                                 {})\n                                            added-before? (contains? iden->invoke-idx ob)]\n                                        (if added-before?\n                                          entry\n                                          (assoc entry :syms\n                                                 (assoc iden->invoke-idx\n                                                        ob (count iden->invoke-idx)))))))\n                                   new-res [new-acc\n                                            (-> path pop pop)]]\n                               (if (= acc new-acc)\n                                 (reduced new-res)\n                                 new-res)))\n                           [cb\n                            parents]\n                           (range (/ (count parents) 2))))))\n        closure-idx (get-in new-cb (conj parents :syms ob))]\n    closure-idx))\n\n(defn lookup\n  ([ctx sym call?] (lookup ctx sym call? nil))\n  ([ctx sym call? #?(:clj tag :cljs _tag)]\n   (let [bindings (faster/get-2 ctx :bindings)]\n     (or\n      (when-let [[k v]\n                 (find bindings sym)]\n        (let [idx (or (get (:iden->invoke-idx ctx) v)\n                      (let [oi (:outer-idens ctx)\n                            ob (oi v)]\n                        (update-parents ctx (:closure-bindings ctx) ob)))\n              #?@(:clj [tag (or tag\n                                (some-> k meta :tag))])\n              v (if call? ;; resolve-symbol is already handled in the call case\n                  (mark-resolve-sym k idx)\n                  (let [v (cond-> (->Node\n                                   (aget ^objects bindings idx)\n                                   nil)\n                            #?@(:clj [tag (with-meta\n                                            {:tag tag})]))]\n                    v))]\n          [k v]))\n      (when-let [kv (lookup* ctx sym call?)]\n        (when (:check-permissions ctx)\n          (check-permission! ctx sym kv))\n        kv)))))\n\n;; workaround for evaluator also needing this function\n(vreset! utils/lookup lookup)\n\n(declare resolve-symbol)\n\n#?(:cljs (defn resolve-dotted-access [ctx sym call? tag]\n           #?(:cljs\n              (let [sym-ns (namespace sym)\n                    sym-name (name sym)]\n                (when-let [prefix-idx (str/index-of sym-name \".\")]\n                  (when (pos? prefix-idx)\n                    (let [prefix (subs sym-name 0 prefix-idx)\n                          new-sym (symbol sym-ns prefix)\n                          resolved (resolve-symbol ctx new-sym call? tag)\n                          clazz (if (vars/var? resolved) (deref resolved) resolved)]\n                      (when clazz\n                        (let [path (subs sym-name (inc prefix-idx))]\n                          [sym (if call?\n                                 (with-meta\n                                   [clazz path]\n                                   {:sci.impl.analyzer/static-access true})\n                                 (let [stack (assoc (meta sym)\n                                                    :file @vars/current-file\n                                                    :ns @vars/current-ns)]\n                                   (->Node\n                                    (interop/get-static-field [clazz path])\n                                    stack)))])))))))))\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false nil))\n  ([ctx sym call?] (resolve-symbol ctx sym call? nil))\n  ([ctx sym call? tag]\n   (let [res (second\n              (or\n               (lookup ctx sym call? tag)\n               (let [n (name sym)]\n                 (cond\n                   (and call?\n                        (str/starts-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-dot*] ;; method invocation\n                   (and call?\n                        (str/ends-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-constructor]\n                   ))\n               #?(:cljs (resolve-dotted-access ctx sym call? tag))\n               (throw-error-with-location\n                (str \"Could not resolve symbol: \" (str sym))\n                sym)))]\n     ;; (prn 'resolve sym '-> res (meta res))\n     res)))\n"]}