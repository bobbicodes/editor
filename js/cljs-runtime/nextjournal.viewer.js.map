{"version":3,"sources":["nextjournal/viewer.cljs"],"mappings":"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","names":["nextjournal.viewer/edn-type","tag","value","G__61855","cljs.core._EQ_","cljs.core/first","nextjournal$viewer$ITypeKey$_type_key$dyn","x__4521__auto__","m__4522__auto__","nextjournal.viewer/-type-key","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","nextjournal.viewer/ITypeKey","x","nextjournal.viewer/value-type","js/Element","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/var?","cljs.core/map?","cljs.core/array?","cljs.core/set?","cljs.core/vector?","cljs.core/list?","cljs.core/seq?","cljs.core/fn?","cljs.core/uuid?","cljs.core/Keyword","cljs.core/Symbol","cljs.core/boolean?","cljs.core/inst?","and__4221__auto__","cognitect.transit/tagged-value?","cljs.core/coll?","goog/isObject","nextjournal.viewer/obj->clj","obj","result","key","v","cljs.core.assoc","cljs.core.reduce","goog.object/getKeys","nextjournal.viewer/coll-decoration","type","G__61858","js/Error","nextjournal.viewer/increase-items","nextjournal.viewer/color-classes","selected?","nextjournal.viewer/count-badge","coll","map__61859","cljs.core/--destructure-map","cljs.core.get","badge-background-color","label-color","cljs.core/count","p__61860","map__61861","nextjournal.viewer/more-button","visible-nb-items-ratom","expanded?","count","_opts","cljs.core.swap_BANG_","cljs.core/+","cljs.core/deref","p__61862","map__61863","nextjournal.viewer/browsify-button","path","dispatch","view","G__61864","nextjournal.viewer/navigable-key?","item","nextjournal.viewer/navigable-item?","options","cljs.core/empty?","nextjournal.viewer/inspect-coll","_type","_options","_coll","visible-nb-items","reagent.core.atom","p__61870","map__61871","expanded","vec__61872","cljs.core.nth","truncated?","cljs.core/meta","parent","cljs.core/vec","cljs.core.drop_last","short?","cljs.core/seq","cljs.core/not","items","G__61877","cljs.core/object?","cljs.core.js__GT_clj","visible-items","cljs.core.take","map-like?","G__61878","open","close","cljs.core/update","temp__5753__auto__","on-expand","js/requestAnimationFrame","G__61904","or__4223__auto__","cljs.core.doall","cljs.core.map_indexed","i","G__61916","nextjournal.viewer/inspect","cljs.core.update","cljs.core/conj","cljs.core.conj","goog.object/get","cljs.core/keys","nextjournal.viewer/value-of","k","e61918","obj61919","applied-science.js-interop.impl/wrap-key","js/undefined","_","nextjournal.viewer/inspect-object","_inspect","_obj","p__61920","map__61921","inspect","empty?","goog.object/isEmpty","counter","cljs.core.atom","t","cljs.core/type","cljs.core/js-keys","iter__4622__auto__","s__61923","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__61925","cljs.core/chunk-buffer","i__61924","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61922","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core/inc","nextjournal.viewer/meta?","cljs.core/contains?","nextjournal.viewer/meta","data","G__61946","cljs.core/IWithMeta","cljs.core/with-meta","nextjournal.viewer/with-meta","m","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","nextjournal.viewer/vary-meta","seq61953","G__61954","cljs.core/next","G__61955","self__4816__auto__","f","args","cljs.core.apply","nextjournal.viewer/with-viewer","viewer","nextjournal.viewer.vary_meta","cljs.core/assoc","nextjournal.viewer/with-viewers","viewers","nextjournal.viewer/view-as","nextjournal.viewer/html","nextjournal.viewer/!viewers","p1__61962#","p1__61964#","reagent.core.as_element","obj61965","p1__61963#","childElement","xs","cljs.core.into","cljs.core.map","G__61966","cljs.core/PersistentVector","html-str","s","nextjournal.viewer.katex.to_html_string","nextjournal.viewer.mathjax/viewer","nextjournal.viewer.plotly/viewer","nextjournal.viewer.vega-lite/viewer","nextjournal.viewer.markdown/viewer","nextjournal.viewer.code/viewer","nextjournal.viewer/register-viewer!","name","nextjournal.viewer/register-viewers!","cljs.core/merge","nextjournal.viewer/*eval-form*","nextjournal.viewer/render-with-viewer","fexpr__61972","cljs.core.get_in","fexpr__61973","cljs.core.prn","G__61975","nextjournal.viewer.inspect","map__61976","map__61977","G__61978","cljs.core.merge","reagent.core/state-atom","reagent.core/current-component","value-meta","type-key","viewer-key","fexpr__61979","js/module$node_modules$react$index.isValidElement","G__61980","cljs.core/second","cljs.core/select-keys","G__61986","cljs.core.pr_str","js/Number.isNaN","nextjournal.devcards/register-devcard*","state","p1__62001#","p1__62002#","clojure.string.join","cljs.core.repeat","nextjournal.viewer/inspect-xf","G__62015","cljs.core.partial","nextjournal.viewer/rule-30-state","p1__62017#","rule30","n","g1","evolve","cljs.core.mapv","cljs.core.partition","cljs.core/iterate","p1__62020#","p1__62023#","p1__62024#","p1__62025#","board","p1__62044#","p1__62045#","cell","row","s__62054","b__62056","i__62055","iter__62053","js/Date","cljs.core/random-uuid","foo","*print-meta*-orig-val__62064","*print-meta*-temp-val__62065","*print-meta*-orig-val__62068","*print-meta*-temp-val__62071","cljs.core/*print-meta*","s__62075","b__62077","i__62076","iter__62074","*print-meta*-orig-val__62084","*print-meta*-temp-val__62085","*print-meta*-orig-val__62086","*print-meta*-temp-val__62087","map__62091","clj","clj-map","js","example","gen-keyword","cljs.core.keyword","cljs.core.gensym","generate-ds","val-fun","res","value-1","cljs.core/clj->js","cljs.core.range","cljs.core/zipmap","js/window","cljs.core/shuffle","with-let62116","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__57349__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init62117","res62118","c","cljs.core/dec","p1__62121#","x__4306__auto__","y__4307__auto__","x__4309__auto__","y__4310__auto__","cljs.core/chunk-first"],"sourcesContent":["(ns nextjournal.viewer\r\n  (:refer-clojure :exclude [meta with-meta vary-meta])\r\n  (:require [applied-science.js-interop :as j]\r\n            [cljs.reader]\r\n            [clojure.core :as core]\r\n            [clojure.string :as str]\r\n            [cognitect.transit :as transit]\r\n            [goog.object]\r\n            [nextjournal.devcards :as dc]\r\n            [nextjournal.viewer.code :as code]\r\n            [nextjournal.viewer.katex :as katex]\r\n            [nextjournal.viewer.markdown :as markdown]\r\n            [nextjournal.viewer.mathjax :as mathjax]\r\n            [nextjournal.viewer.plotly :as plotly]\r\n            [nextjournal.viewer.vega-lite :as vega-lite]\r\n            [react :as react]\r\n            [reagent.core :as reagent]\r\n            [reagent.dom]))\r\n\r\n(defn edn-type [tag value]\r\n  (case tag\r\n    var :edn-var\r\n    object (if (= (first value) 'clojure.lang.Atom)\r\n             :edn-atom\r\n             :edn-object)\r\n    nextjournal/empty :edn-empty\r\n    :edn-unknown-tag))\r\n\r\n(defprotocol ITypeKey\r\n  (-type-key [x] \"Returns type name as keyword\"))\r\n\r\n(defn value-type [value]\r\n  (cond (and (exists? js/Element)\r\n             (instance? js/Element value)) :element\r\n        (satisfies? ITypeKey value) (-type-key value)\r\n        (var? value) :var\r\n        (implements? IDeref value) :derefable\r\n        (map? value) :map\r\n        (array? value) :array\r\n        (set? value) :set\r\n        (vector? value) :vector\r\n        (list? value) :list\r\n        (seq? value) :list\r\n        (fn? value) :fn\r\n        (uuid? value) :uuid\r\n        (string? value) :string\r\n        (or (number? value) (= \"bigint\" (goog/typeOf value))) :number\r\n        (keyword? value) :keyword\r\n        (symbol? value) :symbol\r\n        (nil? value) :nil\r\n        (boolean? value) :boolean\r\n        (inst? value) :inst\r\n        (and (transit/tagged-value? value)\r\n             (not (coll? value))) :transit-tagged-value\r\n        (goog/isObject value) :object\r\n        :else :untyped))\r\n\r\n(defn obj->clj\r\n  [obj]\r\n  (-> (fn [result key]\r\n        (let [v (aget obj key)]\r\n          (if (= \"function\" (goog/typeOf v))\r\n            result\r\n            (assoc result key v))))\r\n      (reduce {} (goog.object/getKeys obj))))\r\n\r\n(defn coll-decoration [type]\r\n  (case type\r\n    (:vector :array) [\"[\" \"]\"]\r\n    :set [\"#{\" \"}\"]\r\n    :list [\"(\" \")\"]\r\n    (:map :object) [\"{\" \"}\"]))\r\n\r\n(def increase-items 20)\r\n\r\n(defn color-classes [selected?]\r\n  {:value-color (if selected? \"white-90\" \"dark-green\")\r\n   :symbol-color (if selected? \"white-90\" \"dark-blue\")\r\n   :prefix-color (if selected? \"white-50\" \"black-30\")\r\n   :label-color (if selected? \"white-90\" \"black-60\")\r\n   :badge-background-color (if selected? \"bg-white-20\" \"bg-black-10\")})\r\n\r\n(defn count-badge [selected? coll]\r\n  (let [{:keys [badge-background-color label-color]} (color-classes selected?)]\r\n    [:span.text-center.flex.items-center\r\n     {:class (str badge-background-color \" \" label-color)\r\n      :style {:padding-left \"0.5em\" :padding-right \"0.5em\" :height \"1.1em\" :border-radius 7}}\r\n     (count coll)]))\r\n\r\n(defn more-button [visible-nb-items-ratom {:keys [expanded? count] :as _opts}]\r\n  [(if expanded? :div.result-data-field :span)\r\n   {:on-click  #(swap! visible-nb-items-ratom + increase-items)}\r\n   [:span.monospace\r\n    (if expanded?\r\n      {:class \"p-1 mt-3 -ml-1 hover:bg-gray-200 rounded cursor-pointer\"\r\n       :style {:font-size 12}}\r\n      {:class \"pl-2 text-gray-500 inspected-value\"})\r\n    (- count @visible-nb-items-ratom)\r\n    [:span \" more\u2026\"]]])\r\n\r\n(defn browsify-button [path {:nextjournal/keys [dispatch]} view]\r\n  [:span.browsify-button\r\n   {:class \"hover:bg-gray-200 cursor-pointer rounded\"\r\n    :on-click #(dispatch {:kind :nav :path path})}\r\n   view])\r\n\r\n(defn navigable-key?\r\n  \"Check if we allow the key to be navibable based on the type.\r\n  Currently we only support primitive types, except symbols.\"\r\n  [item]\r\n  (or (number? item) (string? item) (keyword? item)))\r\n\r\n(defn navigable-item?\r\n  \"Determines whether an item should be made clickable for datafy/nav. Is the view\r\n  editable? The runtime active? Does the runtime support datafy/nav? Did the node\r\n  execute since start of the runtime? ...\"\r\n  [options path item]\r\n  (and (empty? path)\r\n       (:nextjournal/navigable? options)\r\n       (navigable-key? item)))\r\n\r\n(declare inspect)\r\n\r\n(defn inspect-coll [_type _options _coll]\r\n  (let [visible-nb-items (reagent/atom 20)]\r\n    (fn [type {:as options :keys [expanded path]} coll]\r\n      (let [truncated? (:nextjournal/truncated? (core/meta coll))\r\n            expanded? (get @expanded path)\r\n            parent (vec (drop-last path))\r\n            short? (and (seq path) (not (get @expanded parent)))\r\n            items (cond-> coll\r\n                    (object? coll) js->clj)\r\n            count (count items)\r\n            visible-items (take @visible-nb-items items)\r\n            map-like? (case type (:map :object) true false)\r\n            [open close] (coll-decoration type)]\r\n        [:span {:class (if expanded? \"result-data-expanded\" \"result-data-collapsed\")}\r\n         [:span\r\n          (when-not short?\r\n            {:class \"pointer\"\r\n             :on-click (fn []\r\n                         (swap! expanded update path not)\r\n                         (when-let [on-expand (:on-expand options)]\r\n                           (js/requestAnimationFrame on-expand)))})\r\n          (when-not (or (empty? items) short?)\r\n            [:div.disclose {:class (when-not expanded? \"collapsed\")}])\r\n          [:span.inspected-value\r\n           (case type\r\n             :map \"Map\"\r\n             :object \"Object\"\r\n             :array \"Array\"\r\n             :set \"Set\"\r\n             :list \"List\"\r\n             :vector \"Vector\")]\r\n          (when (or (not map-like?) truncated?)\r\n            [:span.inspected-value\r\n             \"(\" count (when truncated? \"+\") \")\"])]\r\n         (when-not short? [:span.inspected-value open])\r\n         (when-not (or (empty? items) short?)\r\n           (doall (map-indexed (fn [i item]\r\n                                 ^{:key i}\r\n                                 [(if expanded? :div.result-data-field :span)\r\n                                  (when (or expanded? map-like?)\r\n                                    (let [item (if (or map-like? (set? coll)) item i)]\r\n                                      (cond->> [:span.inspected-value\r\n                                                {:class (if map-like? \"cmt-atom\" \"cmt-number\")}\r\n                                                (if map-like? [inspect (update options :path conj i) item] i) \": \"]\r\n                                        (navigable-item? options path item)\r\n                                        (conj [browsify-button (conj (:nav/path options) item) options]))))\r\n                                  (let [item (cond (map? coll) (get coll item)\r\n                                                   (object? coll) (goog.object/get coll item)\r\n                                                   :else item)]\r\n                                    [inspect (update options :path conj i) item])\r\n                                  (when (or (> count @visible-nb-items) (< i (dec count)))\r\n                                    [:span.inspected-value \", \"])])\r\n                               (if map-like?\r\n                                 (keys visible-items)\r\n                                 visible-items))))\r\n         (when (and (not short?) (> count @visible-nb-items))\r\n           [more-button visible-nb-items {:expanded? expanded? :count count}])\r\n         (when-not short? [:span.inspected-value close])]))))\r\n\r\n(defn value-of\r\n  \"Safe access to a value at key a js object.\r\n\r\n   Returns `'forbidden` if reading the property would result in a `SecurityError`.\r\n   https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\r\n  [obj k]\r\n  (try\r\n    (let [v (j/get obj k)]\r\n      (.-constructor v) ;; test for SecurityError\r\n      v)\r\n    (catch js/Error ^js _\r\n      'forbidden)))\r\n\r\n(defn inspect-object [_inspect _options _obj]\r\n  (let [visible-nb-items (reagent/atom 20)]\r\n    (fn [inspect {:as options :keys [expanded path]} obj]\r\n      (let [expanded? (get @expanded path)\r\n            parent (vec (drop-last path))\r\n            short? (and (seq path) (not (get @expanded parent)))\r\n            empty? (goog.object/isEmpty obj)\r\n            counter (atom -1)\r\n            t (type obj)\r\n            items (js-keys obj)\r\n            count (count items)]\r\n        [:span {:class (if expanded? \"result-data-expanded\" \"result-data-collapsed\")}\r\n         [:span.inspected-value\r\n          (when-not short?\r\n            {:class \"pointer\"\r\n             :on-click (fn []\r\n                         (swap! expanded update path not)\r\n                         (when-let [on-expand (:on-expand options)]\r\n                           (js/requestAnimationFrame on-expand)))})\r\n          (when-not (or empty? short?)\r\n            [:div.disclose {:class (when-not expanded? \"collapsed\")}])\r\n          (if t (.-name t) \"Object\")]\r\n         (when-not short? [:span.inspected-value \" {\"])\r\n         (when-not (or empty? short?)\r\n           (for [k (take @visible-nb-items items)\r\n                 :when (or (not t) (.hasOwnProperty obj k))\r\n                 :let [i (swap! counter inc)]]\r\n             ^{:key i}\r\n             [(if expanded? :div.result-data-field :span)\r\n              (when (and (not expanded?) (< 0 i)) [:span.inspected-value \", \"])\r\n              [:span.inspected-value.cmt-atom\r\n               k [:span.cmt-punctuation \": \"]]\r\n              [inspect (update options :path conj k)  (value-of obj k)]]))\r\n         (when (and (not (or empty? short?)) (> count @visible-nb-items))\r\n           [more-button visible-nb-items {:expanded? expanded? :count count}])\r\n         (when-not short?\r\n           [:span.inspected-value\r\n            \"}\"])]))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; Custom metadata handling - supporting any cljs value - not compatible with core meta\r\n\r\n(defn meta? [x] (contains? x :nextjournal/value))\r\n\r\n(defn meta [data]\r\n  (if (meta? data)\r\n    data\r\n    (assoc (core/meta data)\r\n      :nextjournal/value (cond-> data\r\n                           ;; IMeta is a protocol in cljs\r\n                           (satisfies? IWithMeta data) (core/with-meta {})))))\r\n\r\n(defn with-meta [data m]\r\n  (cond (meta? data) (assoc m :nextjournal/value (:nextjournal/value data))\r\n        (satisfies? IWithMeta data) (core/with-meta data m)\r\n        :else\r\n        (assoc m :nextjournal/value data)))\r\n\r\n(defn vary-meta [data f & args]\r\n  (with-meta data (apply f (meta data) args)))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; Viewers (built on metadata)\r\n\r\n(defn with-viewer\r\n  \"The given viewer will be used to display data\"\r\n  [data viewer]\r\n  (vary-meta data assoc :nextjournal/viewer viewer))\r\n\r\n(defn with-viewers\r\n  \"Binds viewers to types, eg {:boolean view-fn}\"\r\n  [data viewers]\r\n  (vary-meta data assoc :nextjournal/viewers viewers))\r\n\r\n(defn view-as\r\n  \"Like `with-viewer` but takes viewer as 1st argument\"\r\n  [viewer data]\r\n  (with-viewer data viewer))\r\n\r\n(defn html [v]\r\n  (with-viewer v (if (string? v) :html :hiccup)))\r\n\r\n(def !viewers\r\n  ;; viewers registered here can be invoked via `:nextjournal/viewer` metadata\r\n  ;; (as returned by view-as, with-viewer, and with-viewers)\r\n  (reagent/atom {:hiccup #(reagent/as-element %)\r\n                 :element (fn [v]\r\n                            ;; Should we do something else here?\r\n                            (if (j/get v :parentNode)\r\n                              \"DOM Element\"\r\n                              (view-as :reagent [:div {:ref #(when %\r\n                                                               (when-let [childElement (.-firstChild %)]\r\n                                                                 (.removeChild % childElement))\r\n                                                               (.appendChild % v))}])))\r\n                 :flex-col (fn [xs] (view-as :hiccup (into [:div.flex.flex-col] (map (fn [x] [inspect x])) xs)))\r\n                 :reagent #(reagent/as-element (cond-> % (fn? %) vector))\r\n                 :html (fn [html-str] (view-as :hiccup [:div {:dangerouslySetInnerHTML {:__html html-str}}]))\r\n                 :latex (fn [s] (view-as :html (katex/to-html-string s)))\r\n                 :mathjax mathjax/viewer\r\n                 :plotly plotly/viewer\r\n                 :vega-lite vega-lite/viewer\r\n                 :markdown markdown/viewer\r\n                 :code code/viewer}))\r\n\r\n(defn register-viewer!\r\n  \"Registers a viewer function under a given name.\"\r\n  [name viewer]\r\n  (swap! !viewers assoc name viewer))\r\n\r\n(defn register-viewers!\r\n  \"Registers a viewers map.\"\r\n  [viewers]\r\n  (swap! !viewers merge viewers))\r\n\r\n(declare inspect)\r\n\r\n(def ^:dynamic *eval-form* nil)\r\n\r\n(defn render-with-viewer [options viewer value]\r\n  ((cond (keyword? viewer) (or\r\n                            (get-in options [:nextjournal/viewers viewer])\r\n                            (@!viewers viewer)\r\n                            (prn :viewer-not-found viewer)\r\n                            inspect)\r\n         (fn? viewer) viewer\r\n         (list? viewer) (if (fn? *eval-form*)\r\n                          (*eval-form* viewer)\r\n                          (throw (js/Error. \"Viewer is a list but `*eval-form*` is not bound to a function.\")))\r\n         :else\r\n         (throw (js/Error. (str \"Viewer is not a keyword or function or list: \" viewer))))\r\n   value\r\n   options))\r\n\r\n(defn ^:export inspect\r\n  ([data]\r\n   (inspect {} data))\r\n  ([options data]\r\n   (let [{:as options :keys [path expanded]} (cond-> options (not (:path options)) (merge {:path [] :expanded (reagent/state-atom (reagent/current-component))}))\r\n         {:as value-meta\r\n          :nextjournal/keys [value tag]} (meta data)\r\n         options (update options :nextjournal/viewers merge (:nextjournal/viewers value-meta))\r\n         type-key (if tag\r\n                    (edn-type tag value)\r\n                    (value-type value))\r\n         viewer-key (:nextjournal/viewer value-meta type-key)\r\n         viewer (or (when (or (fn? viewer-key) (list? viewer-key)) viewer-key)\r\n                    (get-in options [:nextjournal/viewers viewer-key])\r\n                    (@!viewers viewer-key))]\r\n     (cond\r\n       (react/isValidElement data) data\r\n       viewer (inspect options (render-with-viewer options viewer value))\r\n       :else\r\n       (case type-key\r\n         :edn-var [:span.inspected-value\r\n                   [:span.cmt-meta \"#'\" (str (first value)) \" \"]\r\n                   [inspect options (second value)]]\r\n         :edn-atom [:span.inspected-value\r\n                    [:span.cmt-meta 'clojure.lang.Atom \" \"]\r\n                    [inspect options (:val (get value 2))]]\r\n         :edn-object [:span.inspected-value\r\n                      [:span.cmt-meta \"#\" (str tag) \" \"]\r\n                      [:span \"[\"\r\n                       [:span.cmt-meta (first value)] \" \"\r\n                       [:span \"0x\" (.toString (second value) 16)] \" \"\r\n                       [inspect options (nth value 2)] \"]\"]]\r\n         :edn-empty [:span.inspected-value\r\n                     [:span.cmt-meta \"#\"]]\r\n         :edn-unknown-tag [:span.inspected-value\r\n                           [:span.cmt-meta \"#\" (str tag) \" \"]\r\n                           [inspect options (let [m (select-keys value-meta [:nextjournal/truncated?])]\r\n                                              (cond-> value (seq m) (vary-meta merge m)))]]\r\n         :var\r\n         [:span.inspected-value\r\n          \"#'\" [inspect options (.-sym ^clj data)]\r\n          \" \"\r\n          [inspect options @data]]\r\n\r\n         :derefable\r\n         [:span.inspected-value\r\n          [:span.cmt-meta (-> data type pr-str) \" \"]\r\n          [inspect options @data]]\r\n\r\n         (:map\r\n          #_:object\r\n          :array\r\n          :set\r\n          :list\r\n          :vector)\r\n         [inspect-coll type-key options data]\r\n\r\n         :transit-tagged-value\r\n         [:span.inspected-value\r\n          [:span.cmt-meta \"#\" (.-tag ^clj data) \" \"]\r\n          [inspect options (.-rep ^clj data)]]\r\n\r\n         :fn\r\n         [:span.inspected-value\r\n          [:span.cmt-meta \"\u0192\"] \"()\"]\r\n\r\n         :uuid\r\n         [:span.inspected-value\r\n          [:span.cmt-meta \"#uuid \"]\r\n          [inspect options (str data)]]\r\n\r\n         :string\r\n         [:span.cmt-string.inspected-value \"\\\"\" data \"\\\"\"]\r\n\r\n         :number\r\n         [:span.cmt-number.inspected-value\r\n          (if (js/Number.isNaN data)\r\n            \"NaN\"\r\n            (str data))]\r\n\r\n         :keyword\r\n         [:span.cmt-atom.inspected-value (str data)]\r\n\r\n         :symbol\r\n         [:span.cmt-keyword.inspected-value (str data)]\r\n\r\n         :nil\r\n         [:span.cmt-atom.inspected-value \"nil\"]\r\n\r\n         :boolean\r\n         [:span.cmt-bool.inspected-value (str data)]\r\n\r\n         :inst\r\n         [:span.inspected-value\r\n          [:span.cmt-meta \"#inst \"]\r\n          [inspect options (.toISOString data)]]\r\n\r\n         :object\r\n         [inspect-object inspect options data]\r\n\r\n         :untyped\r\n         [:span.cmt-invalid.untyped-value.inspected-value (str (type data) \"[\" data \"]\")])))))\r\n\r\n\r\n(comment\r\n  :nav/path node-id ;; a list of keys we have navigated down to\r\n  :nav/value node-id nav-path;; the object for a node-id and a nav-path (see above) ,\r\n  )\r\n\r\n(dc/defcard markdown-doc\r\n  \"Shows how to display a markdown document and viewers using the `:flex-col` viewer.\"\r\n  [state]\r\n  [inspect ^{:nextjournal/viewer :flex-col} [(view-as :markdown \"# Hello Markdown\\nLet's give *this* a try!\")\r\n                                             [1 2 3 4]\r\n                                             {:hello [0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9]}\r\n                                             (view-as :markdown \"And some more [markdown](https://daringfireball.net/projects/markdown/).\")]])\r\n\r\n(dc/defcard viewer-overlays\r\n  \"Shows how to override how values are being displayed.\"\r\n  [state]\r\n  [:div.result-data\r\n   [inspect (with-viewers @state\r\n              {:number #(str/join (take % (repeat \"*\")))\r\n               :boolean #(view-as :hiccup\r\n                                  [:div.inline-block {:style {:width 12 :height 12}\r\n                                                      :class (if % \"bg-red\" \"bg-green\")}])})]]\r\n  {::dc/state {:a 1\r\n               :b 2\r\n               :c 3\r\n               :d true\r\n               :e false}})\r\n\r\n(defn inspect-xf\r\n  \"Takes a data value with possibly metadata on it and returns a transducer\r\n  that will calls `inspect` on every collection element. Use this in custom\r\n  viewers for e.g. vectors to ensure custom viewers are passed down to the\r\n  children.\"\r\n  [x]\r\n  (map (cond-> inspect\r\n         (-> x meta :nextjournal/viewers seq)\r\n         (partial (meta x)))))\r\n\r\n(dc/when-enabled\r\n (def rule-30-state\r\n   (let [rule30 {[1 1 1] 0\r\n                 [1 1 0] 0\r\n                 [1 0 1] 0\r\n                 [1 0 0] 1\r\n                 [0 1 1] 1\r\n                 [0 1 0] 1\r\n                 [0 0 1] 1\r\n                 [0 0 0] 0}\r\n         n 33\r\n         g1 (assoc (vec (repeat n 0)) (/ (dec n) 2) 1)\r\n         evolve #(mapv rule30 (partition 3 1 (repeat 0) (cons 0 %)))]\r\n     (->> g1 (iterate evolve) (take 17)))))\r\n\r\n(dc/defcard rule-30-types\r\n  \"Rule 30 using viewers based on types. Also shows how to use a named viewer for a number.\"\r\n  [state]\r\n  [:div.result-data\r\n   [inspect (with-viewers\r\n              @state\r\n              {:number :cell ;; use the cell viewer for numbers\r\n               :cell #(view-as :hiccup\r\n                               [:div.inline-block {:class (if (zero? %)\r\n                                                            \"bg-white border-solid border-2 border-black\"\r\n                                                            \"bg-black\")\r\n                                                   :style {:width 16 :height 16}}])\r\n               :vector (fn [x options]\r\n                         (->> x\r\n                              (map (partial inspect options))\r\n                              (into [:div.flex.inline-flex])\r\n                              (view-as :hiccup)))\r\n               :list (fn [x options]\r\n                       (->> x\r\n                            (map (partial inspect options))\r\n                            (into [:div.flex.flex-col])\r\n                            (view-as :hiccup)))})]]\r\n  {::dc/state rule-30-state})\r\n\r\n(dc/defcard rule-30-child-options\r\n  \"Rule 30 using viewers based on viewer options (without overriding global types) and passing the viewer option down to child components.\"\r\n  [state]\r\n  [:div.result-data\r\n   [inspect (-> @state\r\n                (with-viewer :board)\r\n                (with-viewers\r\n                  {:cell #(view-as :hiccup\r\n                                   [:div.inline-block {:class (if (zero? %)\r\n                                                                \"bg-white border-solid border-2 border-black\"\r\n                                                                \"bg-black\")\r\n                                                       :style {:width 16 :height 16}}])\r\n                   :row (fn [x options]\r\n                          (->> x\r\n                               (map #(inspect options (view-as :cell %)))\r\n                               (into [:div.flex.inline-flex])\r\n                               (view-as :hiccup)))\r\n                   :board (fn [x options]\r\n                            (->> x\r\n                                 (map #(inspect options (view-as :row %)))\r\n                                 (into [:div.flex.flex-col])\r\n                                 (view-as :hiccup)))}))]]\r\n  {::dc/state rule-30-state})\r\n\r\n(dc/defcard rule-30-html\r\n  \"Rule 30 using viewers based on a single viewer rendering the board.\"\r\n  [state]\r\n  [:div.result-data\r\n   [inspect (with-viewer @state (fn [board]\r\n                                  (let [cell #(vector :div.inline-block\r\n                                                      {:class (if (zero? %)\r\n                                                                \"bg-white border-solid border-2 border-black\"\r\n                                                                \"bg-black\")\r\n                                                       :style {:width 16 :height 16}})\r\n                                        row #(into [:div.flex.inline-flex] (map cell) %)]\r\n                                    (html (into [:div.flex.flex-col] (map row) board)))))]]\r\n  {::dc/state rule-30-state})\r\n\r\n(dc/defcard rule-30-sci-eval\r\n  \"Rule 30 using viewers based on sci eval.\"\r\n  [inspect (with-viewer '([0 1 0] [1 0 1])\r\n             '(fn [board]\r\n                (let [cell #(vector :div.inline-block\r\n                                    {:class (if (zero? %)\r\n                                              \"bg-white border-solid border-2 border-black\"\r\n                                              \"bg-black\")\r\n                                     :style {:width 16 :height 16}})\r\n                      row #(into [:div.flex.inline-flex] (map cell) %)]\r\n                  (v/html (into [:div.flex.flex-col] (map row) board)))))])\r\n\r\n(dc/defcard inspect-values\r\n  (into [:div]\r\n        (for [value [123\r\n                     ##NaN\r\n                     'symbol\r\n                     ::keyword\r\n                     \"a string\"\r\n                     nil\r\n                     true\r\n                     false\r\n                     {:some \"map\"}\r\n                     '[vector of symbols]\r\n                     '(:list :of :keywords)\r\n                     #js {:js \"object\"}\r\n                     #js [\"array\"]\r\n                     (js/Date.)\r\n                     (random-uuid)\r\n                     (fn a-function [foo])\r\n                     (atom \"an atom\")\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Atom 0x2c42b421 {:status :ready, :val 1}]\r\n                     ^{:nextjournal/tag 'var} ['user/a {:foo :bar}]\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Ref 0x73aff8f1 {:status :ready, :val 1}]]]\r\n          [:div.mb-3.result-viewer\r\n           [:pre [:code.inspected-value (binding [*print-meta* true] (pr-str value))]] [:span.inspected-value \" => \"]\r\n           [inspect {} value]])))\r\n\r\n(dc/defcard inspect-values-dark\r\n  (into [:div.p-6]\r\n        (for [value [123\r\n                     ##NaN\r\n                     'symbol\r\n                     ::keyword\r\n                     \"a string\"\r\n                     nil\r\n                     true\r\n                     false\r\n                     {:some \"map\"}\r\n                     '[vector of symbols]\r\n                     '(:list :of :keywords)\r\n                     #js {:js \"object\"}\r\n                     #js [\"array\"]\r\n                     (js/Date.)\r\n                     (random-uuid)\r\n                     (fn a-function [foo])\r\n                     (atom \"an atom\")\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Atom 0x2c42b421 {:status :ready, :val 1}]\r\n                     ^{:nextjournal/tag 'var} ['user/a {:foo :bar}]\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Ref 0x73aff8f1 {:status :ready, :val 1}]]]\r\n          [:div.mb-3.result-viewer.dark:text-slate-300\r\n           [:pre [:code.inspected-value.dark:bg-transparent.dark:text-slate-300\r\n                  (binding [*print-meta* true] (pr-str value))]]\r\n           [:span.inspected-value \" => \"]\r\n           [inspect {} value]]))\r\n  {::dc/class \"dark has-dark-mode bg-slate-900\"})\r\n\r\n(dc/defcard code-theme [state]\r\n  (let [{:keys [clj clj-map js]} @state]\r\n    [:<>\r\n     [:div\r\n      (into [:div.flex.flex-col.items-center.viewer-notebook]\r\n            (map-indexed (fn [i example]\r\n                           [:div.viewer.viewer-code.w-full.max-w-wide.not-prose\r\n                            [code/viewer example]])\r\n                         @state))]\r\n     [:div.dark\r\n      [:div.dark:bg-gray-900\r\n       [:div.flex.flex-col.items-center.viewer-notebook\r\n        (into [:div]\r\n              (map-indexed (fn [i example]\r\n                             [:div.viewer.viewer-code.w-full.max-w-wide.not-prose\r\n                              [code/viewer example]])\r\n                           @state))]]]])\r\n  {::dc/class \"p-0\"\r\n   ::dc/state [\"(defn query-results\\n  \\\"some docstring\\\"\\n  []\\n  (let [_run-at #_(java.util.Date.) #inst \\\"2021-05-20T08:28:29.445-00:00\\\"\\n        ds (next.jdbc/get-datasource {:dbtype \\\"sqlite\\\" :dbname \\\"chinook.db\\\"})]\\n    (with-open [conn (next.jdbc/get-connection ds)]\\n      (clerk/table (next.jdbc/execute! conn [\\\"SELECT AlbumId, Bytes, Name, TrackID, UnitPrice FROM tracks\\\"])))))\"\r\n               \"(/ (+ (* 'A 'C 'gMR (expt (sin 'theta) 2) (cos 'theta))\\n      (* (/ 1 2) 'A (expt 'p_psi 2) (expt (sin 'theta) 2))\\n      (* (/ 1 2) 'C (expt 'p_psi 2) (expt (cos 'theta) 2))\\n      (* (/ 1 2) 'C (expt 'p_theta 2) (expt (sin 'theta) 2))\\n      (* -1 'C 'p_phi 'p_psi (cos 'theta))\\n      (* (/ 1 2) 'C (expt 'p_phi 2)))\\n   (* 'A 'C (expt (sin 'theta) 2)))\"\r\n               \"(def literal-viewer\\n  {:pred e/literal?\\n   :fetch-fn viewer/fetch-all\\n   :transform-fn transform-literal\\n   :render-fn '(fn [x]\\n                 (v/html\\n                  (reagent/with-let [!sel (reagent/atom (-> x first key))]\\n                    [:<>\\n                     (into [:div.flex.items-center.font-sans.text-xs.mb-3\\n                            [:span.text-slate-500.mr-2 \\\"View-as:\\\"]]\\n                           (map (fn [[l _]]\\n                                  [:button.px-3.py-1.font-medium.hover:bg-indigo-50.rounded-full.hover:text-indigo-600.transition\\n                                   {:class (if (= @!sel l) \\\"bg-indigo-100 text-indigo-600\\\" \\\"text-slate-500\\\")\\n                                    :on-click #(reset! !sel l)}\\n                                   l]) x))\\n                     (get x @!sel)])))})\"\r\n               \"(ns multiviewer\\n  \\\"This is a great multiviewer\\\"\\n  (:require [nextjournal.clerk :as clerk]\\n            [nextjournal.clerk.viewer :as viewer]\\n            [sicmutils.value :as v]\\n            [sicmutils.expression :as e]\\n            [sicmutils.env :refer :all]))\"\r\n               \"{:verts\\n [[-0.32999999999999996 -0.5]\\n  [-0.3383203922298239 -0.44746711095625896]\\n  [-0.36246711095625894 -0.40007650711027953]\\n  [-0.40007650711027953 -0.36246711095625894]\\n  [-0.4474671109562589 -0.3383203922298239]\\n  [-0.5 -0.32999999999999996]\\n  [-0.5525328890437411 -0.3383203922298239]\\n  [-0.5999234928897205 -0.36246711095625894]\\n  [-0.6375328890437411 -0.40007650711027953]\\n  [-0.6616796077701761 -0.4474671109562589]\\n  [-0.67 -0.5]\\n  [-0.6616796077701761 -0.5525328890437411]\\n  [-0.6375328890437411 -0.5999234928897205]\\n  [-0.5999234928897205 -0.6375328890437411]\\n  [-0.5525328890437411 -0.6616796077701761]\\n  [-0.5 -0.67]\\n  [-0.44746711095625896 -0.6616796077701761]\\n  [-0.4000765071102796 -0.6375328890437411]\\n  [-0.36246711095625894 -0.5999234928897205]\\n  [-0.3383203922298239 -0.5525328890437411]],\\n :invert? true}\"]})\r\n\r\n(dc/defcard inspect-large-values\r\n  \"Defcard for larger datastructures clj and json, we make use of the db viewer.\"\r\n  [:div]\r\n  (fn []\r\n    (let [gen-keyword #(keyword (gensym))\r\n          generate-ds (fn [x val-fun]\r\n                        (loop [x x res {}]\r\n                          (cond\r\n                            (= x 0) res\r\n                            :else (recur (dec x) (assoc res (gen-keyword) (val-fun))))))\r\n          value-1 (generate-ds 42 gen-keyword)]\r\n      (generate-ds 42 (fn [] (clj->js value-1))))))\r\n\r\n(dc/defcard inspect-in-process\r\n  \"Different datastructures that live in-process in the browser. More values can just be displayed without needing to fetch more data.\"\r\n  [:div\r\n   [:div [inspect (range 1000)]]\r\n   [:div [inspect (vec (range 1000))]]\r\n   [:div [inspect (zipmap (range 1000) (range 1000))]]])\r\n\r\n(dc/defcard viewer-reagent-atom\r\n  [inspect (reagent/atom {:hello :world})])\r\n\r\n(dc/defcard viewer-js-window []\r\n  [inspect js/window])\r\n\r\n(dc/defcard viewer-vega-lite\r\n  [inspect (view-as :vega-lite\r\n                    {:width 650\r\n                     :height 400\r\n                     :data\r\n                     {:url \"https://vega.github.io/vega-datasets/data/us-10m.json\"\r\n                      :format\r\n                      {:type \"topojson\" :feature \"counties\"}}\r\n                     :transform\r\n                     [{:lookup \"id\"\r\n                       :from\r\n                       {:data {:url \"https://vega.github.io/vega-datasets/data/unemployment.tsv\"}\r\n                        :key \"id\"\r\n                        :fields [\"rate\"]}}]\r\n                     :projection {:type \"albersUsa\"}\r\n                     :mark \"geoshape\"\r\n                     :encoding\r\n                     {:color {:field \"rate\" :type \"quantitative\"}}})])\r\n\r\n(dc/defcard viewer-plolty\r\n  [inspect (view-as :plotly\r\n                    {:data [{:y (shuffle (range 10)) :name \"The Federation\" }\r\n                            {:y (shuffle (range 10)) :name \"The Empire\"}]})])\r\n\r\n(dc/defcard viewer-katex\r\n  [inspect (view-as :latex\r\n                    \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")])\r\n\r\n(dc/defcard viewer-mathjax\r\n  [inspect (view-as :mathjax\r\n                    \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")])\r\n\r\n(dc/defcard viewer-markdown\r\n  [:div.viewer-markdown\r\n   [inspect (view-as :markdown \"# Supported Markdown\r\n\r\n## Paragraphs\r\n\r\nTo create paragraphs, use a blank line to separate one or more lines of text.\r\n\r\nI really like using Markdown.\r\n\r\nI think I'll use it to format all of my documents from now on.\r\n\r\n## Headings\r\n\r\n```\r\n  # Heading level 1\r\n  ## Heading level 2\r\n  ### Heading level 3\r\n  #### Heading level 4\r\n  ##### Heading level 5\r\n  ###### Heading level 6\r\n```\r\n\r\n## Inlines\r\n\r\n- I just love **bold text**.\r\n- Italicized text is the *cat's meow*.\r\n- This text is ***really important***.\r\n- My favorite search engine is [Duck Duck Go](https://duckduckgo.com).\r\n- At the command prompt, type `acme`.\r\n- This was ~~entirely uninteresting.~~\r\n- The Dow Jones Industrial Average for February 7, 2006 ![Dow Jones Industrial Average for February 7, 2006](https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Sparkline_dowjones_new.svg/200px-Sparkline_dowjones_new.svg.png).\r\n\r\n## Lists\r\n\r\n### Ordered\r\n\r\n1. First item\r\n2. Second item\r\n3. Third item\r\n  1. Indented item\r\n  2. Indented item\r\n4. Fourth item\r\n\r\n### Unordered\r\n\r\n- First item\r\n- Second item\r\n- Third item\r\n  - Indented item\r\n  - Indented item\r\n- Fourth item\r\n\r\n### Todo\r\n\r\n- [x] First item\r\n- [x] Second item\r\n- [ ] Third item\r\n  - [x] Indented item\r\n  - [ ] Indented item\r\n- [ ] Fourth item\r\n\r\n## Code Blocks\r\n\r\n```json\r\n{\r\n  \\\"firstName\\\": \\\"Mecca\\\",\r\n  \\\"lastName\\\": \\\"Smith\\\",\r\n  \\\"age\\\": 25\r\n}\r\n```\r\n\r\n## Horizontal Rules\r\n\r\n---\r\n\r\n## Blockquotes\r\n\r\n> Dorothy followed her through many of the beautiful rooms in her castle.\r\n>\r\n>> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\r\n\r\n## Images\r\n\r\n![_An old rock in the desert_, Shiprock, New Mexico, by Beau Rogers](https://live.staticflickr.com/389/31833779864_38b5c9d52e_c_d.jpg)\r\n\r\n## Formulas\r\n\r\n$$\\\\int_{\\\\omega} \\\\phi d\\\\omega$$\r\n\r\n## Tables\r\n\r\nas building hiccup is recursive, we're using the specific viewers for values occurring at any level in the structure\r\n\r\n| Syntax |  JVM                     | JavaScript                                    |\r\n|--------|:------------------------:|----------------------------------------------:|\r\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                                |\r\n|   bar  |  java.time.LocalTime     | somethng else entirey                         |\r\n|   bag  |  java.time.LocalDateTime | $\\\\bigoplus_{\\\\alpha < \\\\omega}\\\\phi_\\\\alpha$ |\r\n\r\n\")]])\r\n\r\n(dc/defcard viewer-code\r\n  [inspect (view-as :code \"(str (+ 1 2) \\\"some string\\\")\")])\r\n\r\n(dc/defcard viewer-hiccup\r\n  [inspect (view-as :hiccup [:h1 \"Hello Hiccup \ud83d\udc4b\"])])\r\n\r\n(dc/defcard viewer-reagent-component\r\n  \"A simple counter component in reagent using `reagent.core/with-let`.\"\r\n  [inspect (view-as :reagent\r\n                    (fn []\r\n                      (reagent/with-let [c (reagent/atom 0)]\r\n                        [:<>\r\n                         [:h2 \"Count: \" @c]\r\n                         [:button.rounded.bg-blue-500.text-white.py-2.px-4.font-bold.mr-2 {:on-click #(swap! c inc)} \"increment\"]\r\n                         [:button.rounded.bg-blue-500.text-white.py-2.px-4.font-bold {:on-click #(swap! c dec)} \"decrement\"]])))])\r\n\r\n(dc/defcard progress-bar\r\n  \"Show how to use a function as a viewer, supports both one and two artity versions.\"\r\n  [:div\r\n   [inspect (with-viewer 0.33\r\n              #(view-as :hiccup\r\n                        [:div.relative.pt-1\r\n                         [:div.overflow-hidden.h-2.mb-4-text-xs.flex.rounded.bg-teal-200\r\n                          [:div.shadow-none.flex.flex-col.text-center.whitespace-nowrap.text-white.bg-teal-500\r\n                           {:style {:width (-> %\r\n                                               (* 100)\r\n                                               int\r\n                                               (max 0)\r\n                                               (min 100)\r\n                                               (str \"%\"))}}]]]))]\r\n   [inspect (with-viewer 0.35\r\n              (fn [v _opts] (view-as :hiccup\r\n                                     [:div.relative.pt-1\r\n                                      [:div.overflow-hidden.h-2.mb-4-text-xs.flex.rounded.bg-teal-200\r\n                                       [:div.shadow-none.flex.flex-col.text-center.whitespace-nowrap.text-white.bg-teal-500\r\n                                        {:style {:width (-> v\r\n                                                            (* 100)\r\n                                                            int\r\n                                                            (max 0)\r\n                                                            (min 100)\r\n                                                            (str \"%\"))}}]]])))]])\r\n"]}