{"version":3,"sources":["nextjournal/clojure_mode/node.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.node/coll-prop","js/module$node_modules$$nextjournal$lezer_clojure$dist$index_cjs.props","nextjournal.clojure-mode.node/prefix-coll-prop","nextjournal.clojure-mode.node/prefix-edge-prop","nextjournal.clojure-mode.node/prefix-container-prop","nextjournal.clojure-mode.node/start-edge-prop","js/module$node_modules$$lezer$common$dist$index_cjs.NodeProp","nextjournal.clojure-mode.node/end-edge-prop","nextjournal.clojure-mode.node/same-edge-prop","nextjournal.clojure-mode.node/node-prop","prop-name","G__60202","js/Error","nextjournal.clojure-mode.node/type","node","nextjournal.clojure-mode.node/start","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/up","nextjournal.clojure-mode.node/down","cljs.core/fn?","nextjournal.clojure-mode.node/down-last","nextjournal.clojure-mode.node/depth","i","temp__5755__auto__","parent","nextjournal.clojure-mode.node/left","nextjournal.clojure-mode.node/lefts","cljs.core.take_while","cljs.core/identity","cljs.core/iterate","nextjournal.clojure-mode.node/right","nextjournal.clojure-mode.node/rights","nextjournal.clojure-mode.node/coll-type?","node-type","nextjournal.clojure-mode.node/prefix-type?","nextjournal.clojure-mode.node/prefix-edge-type?","nextjournal.clojure-mode.node/prefix-container-type?","nextjournal.clojure-mode.node/same-edge-type?","nextjournal.clojure-mode.node/start-edge-type?","nextjournal.clojure-mode.node/end-edge-type?","nextjournal.clojure-mode.node/top-type?","nextjournal.clojure-mode.node/error-type?","nextjournal.clojure-mode.node/prefix?","n","nextjournal.clojure-mode.node/prefix-edge?","nextjournal.clojure-mode.node/prefix-container?","nextjournal.clojure-mode.node/same-edge?","nextjournal.clojure-mode.node/start-edge?","nextjournal.clojure-mode.node/end-edge?","nextjournal.clojure-mode.node/left-edge-type?","t","nextjournal.clojure-mode.node/left-edge?","nextjournal.clojure-mode.node/right-edge-type?","nextjournal.clojure-mode.node/right-edge?","nextjournal.clojure-mode.node/edge?","nextjournal.clojure-mode.node/closed-by","G__60218","nextjournal.clojure-mode.node/opened-by","G__60219","nextjournal.clojure-mode.node/name","nextjournal.clojure-mode.node/error?","nextjournal.clojure-mode.node/top?","nextjournal.clojure-mode.node/program?","nextjournal.clojure-mode.node/string?","nextjournal.clojure-mode.node/regexp?","nextjournal.clojure-mode.node/line-comment?","nextjournal.clojure-mode.node/discard?","nextjournal.clojure-mode.node/coll?","nextjournal.clojure-mode.node/terminal-type?","p__60221","map__60222","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj60224","js/undefined","obj60225","nextjournal.clojure-mode.node/balanced?","firstChild","lastChild","temp__5751__auto__","closing","cljs.core._EQ_","cljs.core.not_EQ_","nextjournal.clojure-mode.node/ancestors","temp__5757__auto__","cljs.core/cons","cljs.core/LazySeq","nextjournal.clojure-mode.node/closest","pred","cljs.core.reduce","_","x","cljs.core/reduced","nextjournal.clojure-mode.node/highest","found","var_args","G__60227","nextjournal.clojure-mode.node/children","from","dir","child","G__60228","nextjournal.clojure_mode.node.children","G__60229","subtree","nextjournal.clojure-mode.node/eq?","y","nextjournal.clojure-mode.node/empty?","type-name","G__60231","nextjournal.clojure-mode.node/from-to","to","nextjournal.clojure_mode.node.from_to","nextjournal.clojure-mode.node/range","nextjournal.clojure_mode.selections.range","G__60233","nextjournal.clojure-mode.node/string","state","nextjournal.clojure_mode.node.string","nextjournal.clojure-mode.node/ancestor?","cljs.core/boolean","nextjournal.clojure-mode.node/move-toward","to-node","G__60234","cljs.core/compare","or__4223__auto__","nextjournal.clojure-mode.node/nodes-between","p1__60235#","nextjournal.clojure-mode.node/require-balance?","G__60237","nextjournal.clojure-mode.node/tree","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxTree","pos","G__60239","nextjournal.clojure-mode.node/cursor","tree","nextjournal.clojure-mode.node/terminal-cursor","c","nextjournal.clojure_mode.node.cursor","type","nextjournal.clojure-mode.node/up-here","p1__60240#","nextjournal.clojure-mode.node/topmost-cursor","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.node/terminal-nodes","cursor","cljs.core.conj","G__60243","nextjournal.clojure-mode.node/balanced-range","nextjournal.clojure_mode.node.balanced_range","vec__60244","cljs.core.nth","vec__60247","cljs.core.sort","from-node","left","right","p1__60241#","cljs.core.map","G__60254","p__60250","vec__60251","node-between","p__60255","map__60256","obj60258","obj60259","nextjournal.clojure-mode.node/inner-span","nextjournal.clojure-mode.node/within?<","c1","c2","nextjournal.clojure-mode.node/within?","nextjournal.clojure-mode.node/follow-edges","nextjournal.clojure-mode.node/prefix","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/left-edge-with-prefix","G__60261","nextjournal.clojure-mode.node/with-prefix","G__60262","nextjournal.clojure-mode.node/node|","G__60264","p1__60263#","nextjournal.clojure-mode.node/|node","G__60266","p1__60265#","nextjournal.clojure-mode.node/nearest-touching","L","G__60269","p__60270","map__60271","obj60273","R","G__60274","p__60275","map__60276","obj60278","mid","G__60279","p1__60267#","cljs.core.every_pred","cljs.core/some?","p1__60268#","G__60281","nextjournal.clojure-mode.node/embedded?","nextjournal.clojure_mode.node.embedded_QMARK_","js/module$node_modules$$lezer$markdown$dist$index_cjs.parser.nodeTypes","G__60283","nextjournal.clojure-mode.node/within-program?","nextjournal.clojure_mode.node.within_program_QMARK_","cljs.core/some"],"sourcesContent":["(ns nextjournal.clojure-mode.node\r\n  (:refer-clojure :exclude [coll? ancestors string? empty? regexp? name range resolve type])\r\n  (:require [\"@lezer/common\" :as lz-tree]\r\n            [\"@lezer/markdown\" :as lezer-markdown]\r\n            [\"@codemirror/language\" :as language]\r\n            [\"@nextjournal/lezer-clojure\" :as lezer-clj]\r\n            [applied-science.js-interop :as j]\r\n            [nextjournal.clojure-mode.util :as u]\r\n            [nextjournal.clojure-mode.selections :as sel]))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; Node props are marked in the grammar and distinguish categories of nodes\r\n\r\n;; primitive collection\r\n(def coll-prop (.-coll lezer-clj/props))\r\n;; prefix collection - a prefix token that wraps the next element\r\n(def prefix-coll-prop (.-prefixColl lezer-clj/props))\r\n;; the prefix edge itself\r\n(def prefix-edge-prop (.-prefixEdge lezer-clj/props))\r\n;; prefix form - pair of [metadata, target]\r\n(def prefix-container-prop (.-prefixContainer lezer-clj/props))\r\n;; edges at the beginning/end of collections, + \"same\" edges (string quotes)\r\n(def start-edge-prop (.-closedBy lz-tree/NodeProp))\r\n(def end-edge-prop (.-openedBy lz-tree/NodeProp))\r\n(def same-edge-prop (.-sameEdge lezer-clj/props ))\r\n\r\n;; used when instantiating the parser\r\n(defn node-prop [prop-name]\r\n  (case prop-name \"prefixColl\" prefix-coll-prop\r\n                  \"coll\" coll-prop\r\n                  \"prefixEdge\" prefix-edge-prop\r\n                  \"prefixContainer\" prefix-container-prop\r\n                  \"sameEdge\" same-edge-prop))\r\n\r\n;; these wrapping functions exist mainly to avoid type hints\r\n;; & are mostly compiled away\r\n\r\n(defn ^lz-tree/NodeType type [^js node] (.-type node))\r\n\r\n(defn ^number start [^js node]\r\n  {:pre [(.-from node)]}\r\n  (.-from node))\r\n\r\n(defn ^number end [^js node]\r\n  {:pre [(.-to node)]}\r\n  (.-to node))\r\n\r\n;; a more zipper-like interface\r\n(defn ^js up [node] (.-parent ^js node))\r\n\r\n(defn ^js down [node]\r\n  {:pre [(not (fn? (.-lastChild ^js node)))]}\r\n  (.-firstChild ^js node))\r\n\r\n(defn ^js down-last [node]\r\n  {:pre [(not (fn? (.-lastChild ^js node)))]}\r\n  (.-lastChild ^js node))\r\n\r\n(defn ^number depth [^js node]\r\n  (loop [node node\r\n         i 0]\r\n    (if-some [parent (up node)]\r\n      (recur parent (inc i))\r\n      i)))\r\n\r\n(defn ^js left [^js node]\r\n  (.childBefore (up node) (start node))\r\n  #_(.-prevSibling node))\r\n\r\n(defn lefts [node]\r\n  (take-while identity (iterate left (left node))))\r\n\r\n(defn ^js right [node]\r\n  (.childAfter (up node) (end node))\r\n  #_(.-nextSibling node))\r\n\r\n(defn rights [node]\r\n  (take-while identity (iterate right (right node))))\r\n\r\n;; category predicates\r\n\r\n(defn coll-type? [^js node-type]\r\n  (or (.prop node-type coll-prop)\r\n      #_(.prop node-type prefix-coll-prop)))\r\n\r\n(defn ^boolean prefix-type? [node-type] (.prop ^js node-type prefix-coll-prop))\r\n(defn ^boolean prefix-edge-type? [node-type] (.prop ^js node-type prefix-edge-prop))\r\n(defn ^boolean prefix-container-type? [node-type] (.prop ^js node-type prefix-container-prop))\r\n(defn ^boolean same-edge-type? [node-type] (.prop ^js node-type same-edge-prop))\r\n(defn ^boolean start-edge-type? [node-type] (.prop ^js node-type start-edge-prop))\r\n(defn ^boolean end-edge-type? [node-type] (.prop ^js node-type end-edge-prop))\r\n(defn ^boolean top-type? [node-type] (.-isTop ^js node-type))\r\n(defn ^boolean error-type? [node-type]  (.-isError ^js node-type))\r\n\r\n(defn ^boolean prefix? [n] (prefix-type? (type n)))\r\n(defn ^boolean prefix-edge? [n] (prefix-edge-type? (type n)))\r\n(defn ^boolean prefix-container? [n] (prefix-container-type? (type n)))\r\n(defn ^boolean same-edge? [n] (same-edge-type? (type n)))\r\n(defn ^boolean start-edge? [n]\r\n  (start-edge-type? (type n)))\r\n(defn ^boolean end-edge? [n] (end-edge-type? (type n)))\r\n\r\n(defn ^boolean left-edge-type? [t]\r\n  (or (start-edge-type? t)\r\n      (same-edge-type? t)\r\n      (prefix-edge-type? t)))\r\n\r\n(defn ^boolean left-edge? [n]\r\n  (left-edge-type? (type  n)))\r\n\r\n(defn ^boolean right-edge-type? [t]\r\n  (or (end-edge-type? t)\r\n      (same-edge-type? t)))\r\n\r\n(defn ^boolean right-edge? [n]\r\n  (right-edge-type? (type n)))\r\n\r\n(defn ^boolean edge? [n]\r\n  (let [t (type n)]\r\n    (or (start-edge-type? t)\r\n        (end-edge-type? t)\r\n        (same-edge-type? t)\r\n        (prefix-type? t))))\r\n\r\n(defn closed-by [n]\r\n  (some-> (.prop (type n) (.-closedBy lz-tree/NodeProp))\r\n          (aget 0)))\r\n(defn opened-by [n]\r\n  (some-> (.prop (type n) (.-openedBy lz-tree/NodeProp))\r\n          (aget 0)))\r\n\r\n(defn ^string name [^js node] (.-name node))\r\n\r\n;; specific node types\r\n\r\n(defn error? [^js node] (error-type? node))\r\n(defn top? [node] (top-type? (type node)))\r\n\r\n(defn program? [node] (identical? \"Program\" (name node)))\r\n(defn string? [node] (identical? \"String\" (name node)))\r\n(defn regexp? [node] (identical? \"RegExp\" (name node)))\r\n(defn line-comment? [node] (identical? \"LineComment\" (name node)))\r\n(defn discard? [node] (identical? \"Discard\" (name node)))\r\n\r\n(comment\r\n  ;; find a node type id at load time, maybe faster checks?\r\n  (some #(and (.is % \"Program\") (.-id %))\r\n        (.. lezer-clj -parser -nodeSet -types)))\r\n\r\n(defn coll? [node]\r\n  (coll-type? (type node)))\r\n\r\n(defn terminal-type? [^js node-type]\r\n  (cond (top-type? node-type) false\r\n        (.prop node-type prefix-coll-prop) false\r\n        (.prop node-type coll-prop) false\r\n        (identical? \"Meta\" (name node-type)) false\r\n        (identical? \"TaggedLiteral\" (name node-type)) false\r\n        (identical? \"ConstructorCall\" (name node-type)) false\r\n        :else true))\r\n\r\n(j/defn balanced? [^:js {:as node :keys [^js firstChild ^js lastChild]}]\r\n  (if-let [closing (closed-by firstChild)]\r\n    (and (= closing (name lastChild))\r\n         (not= (end firstChild) (end lastChild)))\r\n    true))\r\n\r\n(defn ancestors [^js node]\r\n  (when-some [parent (up node)]\r\n    (cons parent\r\n          (lazy-seq (ancestors parent)))))\r\n\r\n(defn ^js closest [node pred]\r\n  (if (pred node)\r\n    node\r\n    (reduce (fn [_ x]\r\n              (if (pred x) (reduced x) nil)) nil (ancestors node))))\r\n\r\n(defn ^js highest [node pred]\r\n  (reduce (fn [found x]\r\n            (if (pred x) x (reduced found))) nil (cons node (ancestors node))))\r\n\r\n(defn children\r\n  ([^js parent from dir]\r\n   (when-some [^js child (case dir 1 (.childAfter parent from)\r\n                                   -1 (.childBefore parent from))]\r\n     (cons child (lazy-seq\r\n                  (children parent (case dir 1 (end child)\r\n                                             -1 (start child)) dir)))))\r\n  ([^js subtree]\r\n   (children subtree (start subtree) 1)))\r\n\r\n(defn eq? [^js x ^js y]\r\n  (and (== (start x) (start y))\r\n       (== (end x) (end y))\r\n       (== (depth x) (depth y))))\r\n\r\n(defn empty?\r\n  \"Node only contains whitespace\"\r\n  [^js node]\r\n  (let [type-name (name node)]\r\n    (cond (coll? node)\r\n          (eq? (-> node down right) (-> node down-last))\r\n\r\n          (= \"String\" type-name)\r\n          (== (-> node down end) (-> node down-last start))\r\n          :else false)))\r\n\r\n(defn from-to\r\n  ([from to] #js{:from from :to to})\r\n  ([node]\r\n   (from-to (start node) (end node))))\r\n\r\n(defn range [node]\r\n  (sel/range (start node) (end node)))\r\n\r\n(defn string\r\n  ([^js state node]\r\n   (string state (start node) (end node)))\r\n  ([^js state from to]\r\n   (.sliceString (.-doc state) from to \\newline)))\r\n\r\n(defn ancestor? [parent child]\r\n  (boolean\r\n   (and (<= (start parent) (start child))\r\n        (>= (end parent) (end child))\r\n        (< (depth parent) (depth child)))))\r\n\r\n(defn move-toward\r\n  \"Returns next loc moving toward `to-path`, skipping children\"\r\n  [node to-node]\r\n  (when-not (eq? node to-node)\r\n    (case (compare (start to-node) (start node))\r\n      0 (cond (ancestor? to-node node) (up node)\r\n              (ancestor? node to-node) (down node))\r\n      -1 (if (ancestor? node to-node)\r\n           (down-last node)\r\n           (or (left node)\r\n               (up node)))\r\n      1 (if (ancestor? node to-node)\r\n          (down node)\r\n          (or (right node)\r\n              (up node))))))\r\n\r\n(defn nodes-between [node to-node]\r\n  (take-while identity (iterate #(move-toward % to-node) node)))\r\n\r\n(defn- require-balance? [node]\r\n  (or (coll? node)\r\n      (string? node)\r\n      (regexp? node)))\r\n\r\n(defn ^js tree\r\n  \"Returns a (Tree https://lezer.codemirror.net/docs/ref/#common.Tree) for editor state\r\n  or the SyntaxNode at pos.\r\n\r\n  If pos is given and we're using Clojure language support embedded in other languages (e.g. markdown)\r\n  enters overlaid Clojure nodes (https://lezer.codemirror.net/docs/ref/#common.MountedTree).\"\r\n  ([^js state] (language/syntaxTree state))\r\n  ([^js state pos] (-> state language/syntaxTree (.resolveInner pos)))\r\n  ([^js state pos dir] (-> state language/syntaxTree (.resolveInner pos dir))))\r\n\r\n(defn ^js cursor\r\n  ([^js tree] (.cursor tree))\r\n  ([^js tree pos] (.cursorAt tree pos))\r\n  ([^js tree pos dir] (.cursorAt tree pos dir)))\r\n\r\n(defn ^js terminal-cursor\r\n  [^js tree pos dir]\r\n  (loop [i pos]\r\n    (let [^js c (cursor tree i dir)\r\n          type (.-type c)]\r\n      (cond (top-type? type) nil\r\n            (terminal-type? (.-type c)) c\r\n            :else (recur (+ dir i))))))\r\n\r\n(defn ^js up-here\r\n  \"Returns topmost node at same starting position\"\r\n  [node]\r\n  (let [from (start node)]\r\n    (or (highest node #(= from (start %)))\r\n        node)))\r\n\r\n(defn topmost-cursor [state from]\r\n  (-> (tree state from 1) .-node up-here .cursor))\r\n\r\n(defn terminal-nodes [state from to]\r\n  (let [^js cursor (topmost-cursor state from)]\r\n    (loop [found []]\r\n      (let [node-type (type cursor)]\r\n        (cond (> (start cursor) to) found\r\n              (or (terminal-type? node-type)\r\n                  (error? node-type))\r\n              (let [found (conj found #js{:type node-type\r\n                                          :from (start cursor)\r\n                                          :to  (end cursor)})]\r\n                (.lastChild cursor)\r\n                (if (.next cursor)\r\n                  (recur found)\r\n                  found))\r\n              :else (if (.next cursor)\r\n                      (recur found)\r\n                      found))))))\r\n\r\n(j/defn balanced-range\r\n  ([state ^js node] (balanced-range state (start node) (end node)))\r\n  ([state from to]\r\n   (let [[from to] (sort [from to])\r\n         from-node (tree state from 1)\r\n         to-node (tree state to -1)\r\n         from (if (require-balance? from-node)\r\n                (start from-node)\r\n                from)\r\n         to (if (require-balance? to-node)\r\n              (end to-node)\r\n              to)\r\n         [left right] (->> (nodes-between from-node to-node)\r\n                           (map #(cond-> % (edge? %) up))\r\n                           (reduce (fn [[left right] ^js node-between]\r\n                                     [(if (ancestor? node-between from-node) (start node-between) left)\r\n                                      (if (ancestor? node-between to-node) (end node-between) right)])\r\n                                   [from to]))]\r\n     (sel/range left right))))\r\n\r\n(j/defn inner-span\r\n  \"Span of collection not including edges\"\r\n  [^:js {:as node :keys [firstChild lastChild]}]\r\n  #js{:from (if (left-edge? firstChild)\r\n              (end firstChild)\r\n              (start node))\r\n      :to (if (right-edge? lastChild)\r\n            (start lastChild)\r\n            (end node))})\r\n\r\n(defn within?< \"within (exclusive of edges)\"\r\n  [parent child]\r\n  (let [c1 (compare (start parent) (start child))\r\n        c2 (compare (end parent) (end child))]\r\n    (and (or (pos? c1) (neg? c2))\r\n         (not (neg? c1))\r\n         (not (pos? c2)))))\r\n\r\n(defn within? \"within (inclusive of edges)\"\r\n  [parent child]\r\n  (and (not (neg? (compare (start parent) (start child))))\r\n       (not (pos? (compare (end parent) (end child))))))\r\n\r\n(defn follow-edges [node]\r\n  (if (edge? node)\r\n    (up node)\r\n    node))\r\n\r\n(defn prefix [node]\r\n  (when-some [parent (up node)]\r\n    (or (u/guard parent prefix-container?)\r\n        (u/guard (down parent) prefix-edge?))))\r\n\r\n(defn left-edge-with-prefix [state node]\r\n  (str (some->> (prefix node) (string state))\r\n       (name (down node))))\r\n\r\n(defn with-prefix [node]\r\n  (cond-> node\r\n    (prefix node) up))\r\n\r\n(defn node|\r\n  \"Node ending immediately to the left of pos\"\r\n  [state pos]\r\n  (some-> (tree state pos -1)\r\n          (u/guard #(= pos (end %)))))\r\n\r\n(defn |node\r\n  \"Node starting immediately to the right of pos\"\r\n  [state pos]\r\n  (some-> (tree state pos 1)\r\n          (u/guard #(= pos (start %)))))\r\n\r\n(defn nearest-touching [^js state pos dir]\r\n  (let [L (some-> (tree state pos -1)\r\n                  (u/guard (j/fn [^:js {:keys [to]}] (= pos to))))\r\n        R (some-> (tree state pos 1)\r\n                  (u/guard (j/fn [^:js {:keys [from]}]\r\n                             (= pos from))))\r\n        mid (tree state pos)]\r\n    (case dir 1 (or (u/guard R (every-pred some? #(or (same-edge? %) (not (right-edge? %)))))\r\n                    L\r\n                    R\r\n                    mid)\r\n          -1 (or (u/guard L (every-pred some? #(or (same-edge? %) (not (left-edge? %)))))\r\n                 R\r\n                 L\r\n                 mid))))\r\n\r\n(defn embedded?\r\n  \"State position is inside fenced code blocks regardless of clojure syntax.\"\r\n  ([state] (embedded? state (.. state -selection -main -head)))\r\n  ([state pos]\r\n   (identical? (.-FencedCode lezer-markdown/parser.nodeTypes)\r\n               (.. state -tree (resolve pos) -type -id))))\r\n\r\n(defn within-program?\r\n  \"Returns true when position (or current cursor) is inside some Clojure node.\r\n\r\n  This is useful for limiting certain actions when clojure is nested into another language (e.g. Markdown)\"\r\n  ([state] (within-program? state (.. state -selection -main -head)))\r\n  ([state pos]\r\n   (let [n (tree state pos)]\r\n     (or (program? n)\r\n         (some program? (ancestors n))))))\r\n\r\n(comment\r\n  ;; test state overlaid nodes\r\n  (let [state\r\n        (nextjournal.clojure-mode.test-utils/make-state\r\n         #js [nextjournal.livedoc/markdown-language-support]\r\n         \"```\\n(|  a)\\n```\")]\r\n\r\n    (js/console.log (-> (tree state 4 1) .-node up-here .cursor))\r\n    (js/console.log (terminal-nodes state 4 9))))\r\n"]}