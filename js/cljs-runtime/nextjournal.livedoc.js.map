{"version":3,"sources":["nextjournal/livedoc.cljs"],"mappings":"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","names":["nextjournal.livedoc/doc?","node","js/module$node_modules$$lezer$markdown$dist$index_cjs.parser.nodeTypes","nextjournal.livedoc/fenced-code?","p__75225","map__75226","cljs.core/--destructure-map","cljs.core.get","nextjournal.livedoc/within?","pos","from","to","nextjournal.livedoc/->cursor-pos","x","nextjournal.livedoc/bounded-inc","i","b","x__4309__auto__","y__4310__auto__","nextjournal.livedoc/bounded-dec","x__4306__auto__","y__4307__auto__","var_args","G__75234","nextjournal.livedoc/rangeset-seq","js/Error","rset","nextjournal.livedoc.rangeset_seq","iterator","temp__5757__auto__","val","cljs.core/cons","cljs.core/LazySeq","step","nextjournal.livedoc/when-fn","p","nextjournal.livedoc/block-at","blocks","cljs.core/some","cljs.core.partial","nextjournal.livedoc/get-block-by-id","state","id","p1__75238#","nextjournal.livedoc/get-blocks","nextjournal.livedoc/with-index","coll","p1__75239#","p2__75240#","cljs.core.map_indexed","cljs.core/PersistentVector","nextjournal.livedoc/pos->block-idx","p__75241","vec__75242","cljs.core.nth","p__75245","p__75246","map__75247","map__75248","nextjournal.livedoc/block-eq?","other","p__75250","map__75251","nextjournal.livedoc/->widget","p__75254","map__75255","nextjournal.livedoc/update-block","f","G__75257","nextjournal.livedoc/block-opts->decoration","cljs.core.assoc","G__75258","cljs.core/deref","nextjournal.livedoc/update-blocks","update-spec","p__75260","map__75261","nextjournal.livedoc/set-selected","doc","nextjournal.livedoc/default-config","map__75262","type","text","selected?","cljs.core._EQ_","G__75264","cljs.core/Keyword","js/nextjournal","js/nextjournal.livedoc","js/nextjournal.livedoc.config-state","nextjournal.livedoc/config-state","js/module$node_modules$$codemirror$state$dist$index_cjs.StateField","cljs.core/constantly","cfg","_","G__75273","nextjournal.livedoc/config-get","key","nextjournal.livedoc.config_get","js/nextjournal.livedoc.doc-apply-op","nextjournal.livedoc/doc-apply-op","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","nextjournal.livedoc/get-effect-value","tr","effect-type","p1__75274#","and__4221__auto__","nextjournal.livedoc/decorate","js/module$node_modules$$codemirror$view$dist$index_cjs.Decoration","nextjournal.livedoc/state->blocks","nextjournal.livedoc/decorate+eval!","G__75304","G__75305","nextjournal.livedoc/eval-all!","p__75307","map__75308","nextjournal.livedoc/edit-gap-blocks","edit-from","bs","G__75312","G__75313","or__4223__auto__","p1__75306#","seq__75316","cljs.core/seq","chunk__75317","count__75318","i__75319","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__75329","G__75330","G__75332","G__75333","nextjournal.livedoc/eval-widget!","p__75341","map__75342","nextjournal.livedoc/edit-at","selected","map__75344","current-block","gap-blocks","selected-block","G__75345","cljs.core.dissoc","cljs.core.not_EQ_","cljs.core.update","G__75346","p__75347","map__75350","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj75352","js/undefined","_from","_to","widget","cljs.core/not","obj75353","obj75354","obj75357","obj75358","p1__75337#","nextjournal.livedoc/preview+select+eval","G__75361","nextjournal.livedoc/preview-all+select+eval","nextjournal.livedoc/edit-all","_tr","p__75368","map__75369","nextjournal.livedoc/move-block-selection!","dir","block-seq","next-idx","G__75370","seq__75374","chunk__75375","count__75376","i__75377","vec__75388","map__75391","vec__75393","map__75396","idx","cljs.core.swap_BANG_","cljs.core/assoc","p__75397","map__75398","nextjournal.livedoc/select-all!","seq__75399","chunk__75400","count__75401","i__75402","map__75405","map__75406","p__75424","map__75425","nextjournal.livedoc/restore-selection!","seq__75426","chunk__75427","count__75428","i__75429","vec__75439","map__75442","vec__75449","map__75452","eval-fn!","G__75453","seq__75455","chunk__75456","count__75457","i__75458","map__75462","map__75463","p__75465","map__75466","nextjournal.livedoc/preview+eval","edit-all?","all?","map__75467","js/nextjournal.livedoc.doc-state","nextjournal.livedoc/doc-state","field","p1__75468#","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","cm-state","p__75472","map__75473","map__75474","map__75475","apply-op","op","args","me","Meta","Shift","nextjournal.clojure-mode.extensions.eval-region/modifier-effect","G__75476","p1__75469#","nextjournal.livedoc/render-block-preview","view","el","js/document.createElement","editor-state","widget-state","render","reagent.dom.render","_e","map__75482","G__75483","js/module$node_modules$$codemirror$view$dist$index_cjs.WidgetType","spec","obj75484","obj75485","obj75486","obj75487","obj75488","obj75489","self__","cljs.core/random-uuid","reagent.core.atom","p__75492","map__75493","opts","nextjournal.livedoc/BlockPreviewWidget","cljs.core/select-keys","p__75494","map__75495","nextjournal.livedoc/node-info->decoration","select?","temp__5755__auto__","code-text","G__75496","G__75498","p__75499","map__75500","nextjournal.livedoc.state__GT_blocks","js/module$node_modules$$codemirror$language$dist$index_cjs.ensureSyntaxTree","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxTree","last-to","G__75501","block-from","G__75502","nextjournal.clojure-mode.node/start","Array75503","nextjournal.clojure-mode.node/end","Array75504","G__75505","G__75506","Array75507","nextjournal.livedoc/eval-region-text","er","nextjournal.clojure-mode.extensions.eval-region/region-field","p__75512","map__75513","nextjournal.livedoc/eval-region-text->tooltip","create-fn","ers","nextjournal.livedoc/tooltip-theme","nextjournal.livedoc/eval-region-tooltip","js/module$node_modules$$codemirror$view$dist$index_cjs.showTooltip","tooltip-create-fn","nextjournal.livedoc/edit-adjacent-block-at","next-block","G__75521","p1__75516#","cljs.core/reverse","p1__75518#","line","G__75522","offset","new-pos","G__75523","end","G__75526","nextjournal.livedoc/handle-keydown","e","G__75527","map__75529","doc-changed?","at","fexpr__75530","nextjournal.livedoc/default-extensions","js/module$node_modules$$codemirror$state$dist$index_cjs.Prec","G__75532","nextjournal.livedoc/extensions","nextjournal.livedoc.extensions","G__75533","cljs.core.merge","nextjournal.livedoc/handle-open-backticks","sel","nextjournal.livedoc/markdown-language-support","md","js/module$node_modules$$codemirror$lang_markdown$dist$index_cjs.markdown","nextjournal.clojure-mode/language-support","js/module$node_modules$$codemirror$language$dist$index_cjs.Language","js/module$node_modules$$codemirror$lang_markdown$dist$index_cjs.markdownLanguage","js/module$node_modules$$codemirror$language$dist$index_cjs.indentNodeProp","js/module$node_modules$$codemirror$language$dist$index_cjs.LanguageSupport","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","p__75541","map__75543","nextjournal.livedoc/editor-state","extras","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","clojure.string/trim","cljs.core.into_array","cljs.core.concat","js/module$node_modules$$codemirror$language$dist$index_cjs.syntaxHighlighting","js/module$node_modules$$codemirror$language$dist$index_cjs.defaultHighlightStyle","nextjournal.clojure-mode/complete-keymap","G__75544","nextjournal.livedoc/editor","_opts","p__75548","map__75549","focus?","with-let75551","reagent.ratom/with-let-values","reagent.ratom/*ratom-context*","c__57349__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init75552","res75554","!v","cljs.core.atom","cljs.core/reset!","G__75556","G__75559","G__75561"],"sourcesContent":["(ns nextjournal.livedoc\r\n  \"A collection of CodeMirror extension for dealing with markdown notebooks, adding support for:\r\n  * code block evaluation\r\n  * per form evaluation inside clojure blocks\r\n  * markdown blocks rendering\r\n  * per-block edit mode\"\r\n  (:require [\"@codemirror/language\" :refer [syntaxHighlighting defaultHighlightStyle syntaxTree ensureSyntaxTree Language LanguageSupport indentNodeProp]]\r\n            [\"@codemirror/lang-markdown\" :as MD :refer [markdown markdownLanguage]]\r\n            [\"@codemirror/state\" :refer [EditorState StateField StateEffect Prec]]\r\n            [\"@codemirror/view\" :as view :refer [EditorView Decoration WidgetType keymap showTooltip]]\r\n            [\"@lezer/markdown\" :as lezer-markdown]\r\n            [applied-science.js-interop :as j]\r\n            [clojure.string :as str]\r\n            [shadow.cljs.modern :refer [defclass]]\r\n            [nextjournal.clojure-mode :as cm-clj]\r\n            [nextjournal.clojure-mode.extensions.eval-region :as eval-region]\r\n            [nextjournal.clojure-mode.node :as n]\r\n            [reagent.core :as r]\r\n            [reagent.dom :as rdom]))\r\n\r\n(declare state->blocks block-opts->decoration get-blocks eval-all! eval-widget!)\r\n\r\n;; Helpers\r\n(defn doc? [^js node] (== (.-Document lezer-markdown/parser.nodeTypes) (.. node -type -id)))\r\n(defn fenced-code? [^js node] (== (.-FencedCode lezer-markdown/parser.nodeTypes) (.. node -type -id)))\r\n(defn within? [pos {:keys [from to]}] (and (<= from pos) (< pos to)))\r\n(defn ->cursor-pos [^js x] (.. x -selection -main -anchor))\r\n(defn bounded-inc [i b] (min (dec b) (inc i)))\r\n(defn bounded-dec [i] (max 0 (dec i)))\r\n\r\n(defn rangeset-seq\r\n  \"Returns a lazy-seq of ranges inside a RangeSet (like a Decoration set)\"\r\n  ([rset] (rangeset-seq rset 0))\r\n  ([^js rset from]\r\n   (let [iterator (.iter rset from)]\r\n     ((fn step []\r\n        (when-some [val (.-value iterator)]\r\n          (let [from (.-from iterator) to (.-to iterator)]\r\n            (.next iterator)\r\n            (cons {:from from :to to :val val}\r\n                  (lazy-seq (step))))))))))\r\n\r\n(defn when-fn [p] (fn [x] (when (p x) x)))\r\n(defn block-at [blocks pos] (some (when-fn (partial within? pos)) (rangeset-seq blocks)))\r\n(defn get-block-by-id [state id]\r\n  (some (when-fn #(identical? id (-> % :val .-widget .-id))) (get-blocks state)))\r\n(defn with-index [coll] (map-indexed #(vector %1 %2) coll))\r\n(defn pos->block-idx [blocks pos]\r\n  ;; blocks partition the whole document, the only missing point is the end of the document\r\n  (some (fn [[i b]] (when (within? pos b) i)) (with-index blocks)))\r\n(defn block-eq? [{:keys [^js val]} {^js other :val}] (.. val -widget (eq (.. other -widget))))\r\n(defn ->widget [{:keys [^js val]}] (.-widget val))\r\n(defn update-block [{:keys [from to val]} f]\r\n  \"Returns a _new_ decoration instance with spec updated by applying `f`.\"\r\n  (block-opts->decoration (assoc (f @(.. val -widget -state)) :from from :to to)))\r\n(defn update-blocks [update-spec ^js blocks] (.update blocks update-spec))\r\n(defn set-selected [{:as doc :keys [blocks]} pos]\r\n  (assoc doc :selected (pos->block-idx (rangeset-seq blocks) pos)))\r\n\r\n;; Config\r\n(def default-config\r\n  {:render (fn [state]\r\n             (let [{:keys [type text selected?]} @state]\r\n               [:div.m-2.border.rounded\r\n                {:class [(when selected? \"ring-4\") (when (= :code type) \"bg-slate-100\")]}\r\n                (case type\r\n                  :markdown [:div.p-2 text]\r\n                  :code [:code [:pre.p-2 text]])]))})\r\n\r\n(defonce ^{:doc \"Configurable entrypoint see also `extensions/1` fn below.\"}\r\n  config-state\r\n  (.define StateField\r\n           (j/obj :create (constantly default-config)\r\n                  :update (fn [cfg _] cfg))))\r\n(defn config-get\r\n  ([^js state] (.field state config-state))\r\n  ([state key] (get (config-get state) key)))\r\n\r\n;; FXs\r\n(defonce doc-apply-op (.define StateEffect))\r\n(defn get-effect-value\r\n  \"Get first effect value matching type from a transaction\"\r\n  [^js tr effect-type]\r\n  (some #(and (.is ^js % effect-type) (.-value ^js %)) (.-effects tr)))\r\n\r\n;; Doc Operations\r\n;;\r\n;; Doc { :blocks [Decoration]\r\n;;       :selected (Set | Int)\r\n;;       :edit-all? Boolean\r\n;;       :doc-changed? Boolean }\r\n\r\n(defn decorate [state] (.set Decoration (state->blocks state)))\r\n(defn decorate+eval! [state] (eval-all! state (.set Decoration (state->blocks state))))\r\n\r\n(defn edit-gap-blocks [{:keys [edit-from blocks]} state]\r\n  (when edit-from\r\n    (let [bs (state->blocks state\r\n                            {:from edit-from\r\n                             :to (or (:from (some (when-fn #(< edit-from (:from %))) (rangeset-seq blocks edit-from)))\r\n                                     (.. state -doc -length))})]\r\n\r\n      (doseq [^js b bs] (eval-widget! state (.. b -value -widget)))\r\n      bs)))\r\n\r\n(defn edit-at [{:as doc :keys [selected blocks edit-from]} ^js tr pos]\r\n  ;; we patch the existing decoration with blocks arising from last editable region\r\n  (let [{:as current-block :keys [from]} (block-at blocks pos)\r\n        ^js gap-blocks (edit-gap-blocks doc (.-state tr))\r\n        ^js selected-block (when selected (nth (rangeset-seq blocks) selected))]\r\n    (cond-> doc\r\n      current-block\r\n      (-> (dissoc :selected :edit-all?)\r\n          (assoc :edit-from from\r\n                 :doc-changed? (and edit-from (not= edit-from from)))\r\n          (update :blocks\r\n                  (partial update-blocks\r\n                           (cond-> (j/obj :filter\r\n                                          (j/fn [_from _to ^:js {:keys [widget]}]\r\n                                            (not (or (.eq widget (->widget current-block))\r\n                                                     (when selected-block (.eq widget (->widget selected-block)))))))\r\n                             ;; either add gap (click after click)\r\n                             gap-blocks\r\n                             (j/assoc! :add gap-blocks)\r\n                             ;; or remove selection (click while some block is selected)\r\n                             (and selected-block (not (block-eq? selected-block current-block)))\r\n                             (j/assoc! :add (array (update-block selected-block #(assoc % :selected? false)))))))))))\r\n\r\n(defn preview+select+eval [doc tr]\r\n  (let [gap-blocks (edit-gap-blocks doc (.-state tr))]\r\n    (cond-> doc\r\n      gap-blocks\r\n      (-> (dissoc :edit-all? :edit-from :doc-changed?)\r\n          (update :blocks (partial update-blocks (j/obj :add gap-blocks)))\r\n          (set-selected (->cursor-pos (.-state tr)))))))\r\n\r\n(defn preview-all+select+eval [doc tr]\r\n  ;; rebuild all decorations to get new selection right (investigate filter/add)\r\n  (-> doc\r\n      (assoc :blocks (decorate+eval! (.-state tr)))\r\n      (set-selected (->cursor-pos (.-state tr)))\r\n      (dissoc :edit-all? :doc-changed? :edit-from)))\r\n\r\n(defn edit-all [doc _tr]\r\n  (-> doc\r\n      (dissoc :selected :doc-changed? :edit-from)\r\n      (assoc :edit-all? true\r\n             :blocks (.-none Decoration))))\r\n\r\n(defn move-block-selection! [{:as doc :keys [selected blocks]} _tr dir]\r\n  (let [block-seq (rangeset-seq blocks)\r\n        next-idx (case dir\r\n                   :up (bounded-dec selected)\r\n                   :down (bounded-inc selected (count block-seq)))]\r\n    (when (not= selected next-idx)\r\n      (doseq [[idx {:keys [val]}] (with-index block-seq)]\r\n        (swap! (.. val -widget -state) assoc :selected? (= next-idx idx))))\r\n    (-> doc\r\n        (assoc :selected next-idx)\r\n        (dissoc :edit-all? :doc-changed? :edit-from))))\r\n\r\n(defn select-all! [{:as doc :keys [blocks]}]\r\n  (doseq [{:keys [^js val]} (rangeset-seq blocks)]\r\n    (swap! (.. val -widget -state) assoc :selected? true))\r\n  doc)\r\n\r\n(defn restore-selection! [{:as doc :keys [blocks selected]}]\r\n  (doseq [[idx {:keys [^js val]}] (with-index (rangeset-seq blocks))]\r\n    (swap! (.. val -widget -state) assoc :selected? (= idx selected)))\r\n  doc)\r\n\r\n;; eval\r\n(defn eval-widget! [state ^js widget]\r\n  (when (= :code (:type @(.-state widget)))\r\n    (when-some [eval-fn! (config-get state :eval-fn!)]\r\n      (eval-fn! (.-state widget)))))\r\n\r\n(defn eval-all! [state blocks]\r\n  (doseq [{:keys [^js val]} (rangeset-seq blocks)] (eval-widget! state (.-widget val)))\r\n  blocks)\r\n\r\n(defn preview+eval [{:as doc :keys [selected edit-from edit-all? blocks]} tr all?]\r\n  (cond\r\n    edit-all? (preview-all+select+eval doc tr)\r\n    edit-from (preview+select+eval doc tr)\r\n    'else (do\r\n            (cond\r\n              all?\r\n              (eval-all! (.-state tr) blocks)\r\n              (and selected (not all?))\r\n              (when-some [{:keys [^js val]} (nth (rangeset-seq blocks) selected)]\r\n                (eval-widget! (.-state tr) (.-widget val))))\r\n            doc)))\r\n\r\n;; Doc State Field\r\n(defonce ^{:doc \"Maintains a document description at block level\"}\r\n  doc-state\r\n  (.define StateField\r\n           (j/obj\r\n            :provide (fn [field] (.. EditorView -decorations (from field #(get % :blocks))))\r\n            :create (fn [cm-state] {:selected 0 :blocks (decorate+eval! cm-state)})\r\n            :update (fn [{:as doc :keys [edit-all?]} ^js tr]\r\n                      (let [{:as apply-op :keys [op args]} (get-effect-value tr doc-apply-op)\r\n                            {:as me :strs [Meta Shift]} (get-effect-value tr eval-region/modifier-effect)]\r\n                        (cond\r\n                          apply-op (apply op doc tr args)\r\n                          (.-docChanged tr)\r\n                          (-> doc\r\n                              (assoc :doc-changed? true)\r\n                              (cond->\r\n                                (not edit-all?)\r\n                                (update :blocks #(.map ^js % (.-changes tr)))))\r\n                          (and me Meta Shift) (select-all! doc)\r\n                          (and me (or (not Meta) (not Shift))) (restore-selection! doc)\r\n                          'else doc))))))\r\n\r\n(defn get-blocks [state] (-> state (.field doc-state) :blocks rangeset-seq))\r\n\r\n;; Block Previews\r\n(defn render-block-preview [^js widget ^js view]\r\n  (let [el (js/document.createElement \"div\")\r\n        editor-state (.-state view)\r\n        widget-state (.-state widget)\r\n        render (config-get editor-state :render)]\r\n    (rdom/render [:div.cursor-pointer\r\n                  {:on-click (fn [_e]\r\n                               ;; since decorations might have been mapped since widget creation we cannot argue by range from/to\r\n                               (when-some [{:keys [from]} (get-block-by-id editor-state (.-id widget))]\r\n                                 (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op edit-at :args [from]})\r\n                                                            :selection {:anchor from}\r\n                                                            :scrollIntoView true})))))}\r\n                  [render widget-state]] el)\r\n    el))\r\n\r\n(defclass BlockPreviewWidget\r\n  (extends WidgetType)\r\n  (constructor [this spec]\r\n               (j/assoc! this\r\n                         :id (random-uuid)\r\n                         :state (r/atom spec)\r\n                         :ignoreEvent (constantly false)\r\n                         :toDOM (partial render-block-preview this)\r\n                         :eq (fn [^js other] (identical? (.-id this) (.-id other))))))\r\n\r\n(defn block-opts->decoration\r\n  [{:as opts :keys [from to]}]\r\n  (assert (< from to) (str \"Bad range: \" opts))\r\n  (.. Decoration\r\n      (replace (j/obj :block true\r\n                      :widget (BlockPreviewWidget. (select-keys opts [:text :type :selected?]))))\r\n      (range from to)))\r\n\r\n;; Codemirror State Syntax Tree to Blocks\r\n(defn node-info->decoration [^js state {:as opts :keys [from to ^js node type select?]}]\r\n  (block-opts->decoration\r\n   (-> opts\r\n       (assoc :text (cond\r\n                      (= :markdown type)\r\n                      (.. state -doc (sliceString from to))\r\n                      (= :code type)\r\n                      (if-some [^js code-text (.getChild node \"CodeText\")]\r\n                        ;; if fenced block code is not empty, then it has a CodeText child node\r\n                        (.. state -doc (sliceString (.-from code-text) (.-to code-text)))\r\n                        \"\")))\r\n       (cond->\r\n         (and select? (within? (->cursor-pos state) opts))\r\n         (assoc :selected? true)))))\r\n\r\n(defn state->blocks\r\n  \"Partitions the document into ranges delimited by code blocks\"\r\n  ([state] (state->blocks state {}))\r\n  ([state {:keys [from to select?] :or {select? true from 0 to (.. state -doc -length)}}]\r\n   (let [^js blocks (array)]\r\n     ;; TODO: parse only the visible part in viewport / call again when viewport changs\r\n     ;; or delay the state-field until syntax parsing has reached the end\r\n     ;; see also https://codemirror.net/docs/ref/#language.forceParsing (in a high-prec plugin with EditorView access)\r\n     ;; `ensureSyntaxTree` forces parsing of the whole document within 1sec and returns nil otherwise\r\n     ;; `syntaxTree` returns the available tree constructed at the time of call\r\n     (.. (or (ensureSyntaxTree state to 1000)\r\n             (syntaxTree state))\r\n         (iterate (j/obj :from from :to to\r\n                         :enter\r\n                         (fn [^js node]\r\n                           (if (doc? node)\r\n                             true ;; only enter into children of the top level document\r\n                             (do\r\n                               (when (fenced-code? node)\r\n                                 (let [last-to (some-> blocks (.at -1) .-to)\r\n                                       block-from (or last-to from)]\r\n                                   (cond-> blocks\r\n                                     (and (not= from (n/start node))\r\n                                          (< block-from (n/start node))\r\n                                          (or (not last-to)\r\n                                              (not= (inc last-to) (n/start node)))) ;; contiguous fenced blocks\r\n                                     (j/push! (node-info->decoration state\r\n                                                                     {:from block-from\r\n                                                                      :to (n/start node)\r\n                                                                      :type :markdown\r\n                                                                      :select? select?}))\r\n                                     (and (<= from (n/start node)) (<= (n/end node) to))\r\n                                     (j/push! (node-info->decoration state\r\n                                                                     {:from (n/start node)\r\n                                                                      :to (min (inc (n/end node)) to)\r\n                                                                      ;; \u2b06 note this assumes no trailing whitespace after closing ```\r\n                                                                      :node (.-node node)\r\n                                                                      :type :code\r\n                                                                      :select? select?})))))\r\n                               false))))))\r\n     (let [last-to (some-> blocks (.at -1) .-to)]\r\n       (cond-> blocks\r\n         (not= to last-to)\r\n         (j/push! (node-info->decoration state\r\n                                         {:from (or last-to from)\r\n                                          :to to\r\n                                          :type :markdown\r\n                                          :select? select?})))))))\r\n\r\n(comment\r\n  (let [state\r\n        (nextjournal.clojure-mode.test-utils/make-state\r\n         (into-array (cons markdown-language-support (extensions)))\r\n         \"start\\n```\\ncode-1\\n```\\n```\\ncode-2\\n```\\n|end.\")\r\n        pos (.. state -selection -main -anchor)]\r\n    (.. state -doc (sliceString 6 21))\r\n    (-> state\r\n        (state->blocks {:from 6 :to pos})\r\n        seq (->> (map (juxt (j/get :from) (j/get :to) (comp :type deref (j/get :state) (j/get :widget) (j/get :value)))))\r\n        str\r\n        )))\r\n\r\n;; Tooltips State Field\r\n;; depends on `nextjournal.clojure-mode.extensions.eval-region`\r\n(defn eval-region-text [^js state]\r\n  (let [er (.field state eval-region/region-field)]\r\n    (when (< 0 (.-size er))\r\n      (let [i (.. er iter) from (.-from i) to (.-to i)]\r\n        {:to to :text (.. state -doc (sliceString from to))}))))\r\n\r\n(defn eval-region-text->tooltip [create-fn {:as ers :keys [to text]}]\r\n  (when (seq ers)\r\n    (j/obj :pos to\r\n           :above false\r\n           :strictSide true\r\n           :arrow true\r\n           :create (partial create-fn text))))\r\n\r\n(def tooltip-theme\r\n  (.theme EditorView\r\n          (j/lit {\".cm-tooltip\"\r\n                  {:background-color \"#e2e8f0\"\r\n                   :border \"1px solid #cbd5e1\"}})))\r\n\r\n(def eval-region-tooltip\r\n  (.define StateField\r\n           (j/obj :create  (constantly nil)\r\n                  :update  (fn [_ ^js tr] (eval-region-text (.-state tr)))\r\n                  :provide (fn [f] (.compute showTooltip\r\n                                             (array f config-state)\r\n                                             (fn [state]\r\n                                               (when-some [tooltip-create-fn (:tooltip (.field state config-state))]\r\n                                                 (eval-region-text->tooltip tooltip-create-fn (.field state f)))))))))\r\n\r\n;; Keyborad Event handling\r\n(defn edit-adjacent-block-at [^js view blocks key]\r\n  (let [pos (->cursor-pos (.-state view))]\r\n    ;; get the first adjacent block we meet wrt the current movement direction\r\n    (when-some [next-block (case key\r\n                             (:up :left) (some (when-fn #(<= (:to %) pos)) (reverse blocks))\r\n                             (:down :right) (some (when-fn #(<= pos (:from %))) blocks))]\r\n      (let [line (.. view -state -doc (lineAt pos))]\r\n        ;; blocks span entire lines we can argue by an offset of at most the current line + 1\r\n        (case key\r\n          (:down :right)\r\n          (let [offset (when (= :down key) (- (.-to line) pos))\r\n                new-pos (cond-> (inc pos) offset (+ offset))\r\n                end (.. view -state -doc -length)]\r\n            (when (or (< (:from next-block) new-pos)\r\n                      (and (= :down key)\r\n                           ;; we'd reach end of doc by jumping across decorations\r\n                           (= end (.. view (moveVertically (.. view -state -selection -main) true) -anchor))))\r\n              (.. view -state -doc (lineAt new-pos) -from)))\r\n\r\n          (:up :left)\r\n          (let [offset (when (= :up key) (- pos (.-from line)))\r\n                new-pos (cond-> (dec pos) offset (- offset))]\r\n            (when (or (<= new-pos (:to next-block))\r\n                      (and (= :up key)\r\n                           ;; we'd reach start of doc by jumping across decorations\r\n                           (= 0 (.. view (moveVertically (.. view -state -selection -main) false) -anchor))))\r\n              (.. view -state -doc (lineAt new-pos) -from))))))))\r\n\r\n(defn handle-keydown [^js e ^js view]\r\n  (when-some [key (case (.-which e)\r\n                    13 (when (.-metaKey e) :eval)\r\n                    40 :down 38 :up 27 :esc 39 :right 37 :left nil)]\r\n    (let [{:keys [doc-changed? edit-all? edit-from selected blocks]} (.. view -state (field doc-state))\r\n          block-seq (rangeset-seq blocks)]\r\n      (cond\r\n        (= :eval key)\r\n        (do\r\n          (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op preview+eval :args [(.-shiftKey e)]})})))\r\n          true)\r\n\r\n        ;; toggle edit mode (Selected <-> EditOne -> EditAll -> Selected)\r\n        (= :esc key)\r\n        (cond\r\n          selected\r\n          (let [at (:from (nth block-seq selected))]\r\n            (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op edit-at :args [at]})\r\n                                       :selection {:anchor at}\r\n                                       :scrollIntoView true})))\r\n            true)\r\n\r\n          edit-all?\r\n          (do\r\n            (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op preview-all+select+eval})})))\r\n            true)\r\n\r\n          (and edit-from doc-changed?)\r\n          (do\r\n            (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op preview+select+eval})})))\r\n            true)\r\n\r\n          'edit-one\r\n          (do (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op edit-all})})))\r\n              true))\r\n\r\n        ;; move up/down selection\r\n        (and (#{:up :down} key) selected)\r\n        (do\r\n          (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op move-block-selection! :args [key]})\r\n                                     :scrollIntoView true})))\r\n          true)\r\n\r\n        ;; check we're entering a preview from an edit region\r\n        ;; (not selected) implies we're in edit. Also check we're not expanding/shrinking a paredit region\r\n        (and (not= :esc key) (not selected) (not edit-all?)\r\n             (not (.. view -state (field eval-region-tooltip))))\r\n        (when-some [at (edit-adjacent-block-at view block-seq key)]\r\n          (.. view (dispatch (j/lit {:effects (.of doc-apply-op {:op edit-at :args [at]})\r\n                                     :selection {:anchor at}\r\n                                     :scrollIntoView true})))\r\n          true)\r\n\r\n        'else false))))\r\n\r\n(def default-extensions\r\n  \"An extension turning a Markdown document in a blockwise preview-able editor\"\r\n  [(.low Prec doc-state)\r\n   (.highest Prec (.domEventHandlers EditorView (j/obj :keydown handle-keydown)))\r\n   eval-region-tooltip\r\n   tooltip-theme])\r\n\r\n(defn extensions\r\n  \"Accepts an `opts` map with optional keys:\r\n   * `:render` a component function taking a reagent atom as argument, such \\\"state\\\" derefs to a map with keys:\r\n      - `:text` a cell's text\r\n      - `:type` with values `:code` or `:markdown`\r\n      - `:selected?`\r\n      the component is used to render blocks in preview mode\r\n\r\n   * `:eval-fn!` a function which is called against each selected block's state when eval commands are invoked\r\n\r\n   * `:tooltip` (String -> EditorView -> TooltipView) as per https://codemirror.net/docs/ref/#view.TooltipView\r\n      when present, enables a Codemirror tooltips.\r\n      Receives text spanned by the current region as per `nextjournal.clojure-mode.extensions.eval-region`, positions\r\n      a tooltip at the end of the region.\r\n\r\n   Returns a default set of codemirror extensions.\r\n   \"\r\n  ([] (extensions {}))\r\n  ([opts]\r\n   (cons (cond-> config-state (seq opts) (.init #(merge default-config opts)))\r\n         default-extensions)))\r\n\r\n;; Markdown Language Support\r\n\r\n(defn handle-open-backticks [^js view]\r\n  (let [state (.-state view)]\r\n    (when (doc? (.-tree state))\r\n      (let [sel (.. state -selection -main)]\r\n        (when (and (.-empty sel)\r\n                   (identical? \"``\" (.. state -doc (lineAt (.-anchor sel)) -text)))\r\n          (.dispatch view\r\n                     (.update state (j/lit {:changes [{:insert \"\\n```\"\r\n                                                       :from (.-anchor sel)}]}))))))))\r\n(def ^js markdown-language-support\r\n  (let [^js md\r\n        (markdown (j/obj :defaultCodeLanguage cm-clj/language-support\r\n                         :base (Language.\r\n                                (.-data markdownLanguage)\r\n                                (.. markdownLanguage\r\n                                    -parser (configure\r\n                                             ;; fixes indentation base for clojure inside fenced code blocks \u2b07\r\n                                             (j/lit {:props [(.add indentNodeProp\r\n                                                                   (j/obj :Document (constantly 0)))]}))))))]\r\n    (LanguageSupport.\r\n     (.-language md)\r\n     (array (.-support md)\r\n            (.high Prec (.of keymap (j/lit [{:key \\` :run handle-open-backticks}])))))))\r\n\r\n(defn editor-state [{:as opts extras :extensions :keys [doc]}]\r\n  (.create EditorState\r\n           (j/obj :doc (str/trim doc)\r\n                  :extensions (into-array\r\n                               (-> (extensions (select-keys opts [:render :tooltip :eval-fn!]))\r\n                                   (concat [(syntaxHighlighting defaultHighlightStyle)\r\n                                            (.of keymap cm-clj/complete-keymap)\r\n                                            markdown-language-support])\r\n                                   (cond->\r\n                                     (seq extras)\r\n                                     (concat extras)))))))\r\n\r\n;; Editor\r\n(defn editor\r\n  \"A convenience function/component bundling a basic editor setup with\r\n\r\n  * markdown + nested clojure-mode language support and their syntax highlighting\r\n  * clojure mode keybindings for paredit actions among others\r\n  * livedoc extensions configurable via `opts` (see `extensions`).\r\n\r\n  Takes extra keys:\r\n   - `:doc` a markdown string setting the editor's initial document\r\n   - `:extenstions` extra codemirror extensions to be stacked on top of the default\r\n   - `:focus?` when true let the codemirror instance acquire focus.\"\r\n  [_opts]\r\n  (fn [{:as opts :keys [doc focus?]}]\r\n    (r/with-let [!v (atom nil)]\r\n      ^{:key doc}\r\n      [:div {:ref (fn [el]\r\n                    (if el\r\n                      (reset! !v\r\n                              (doto (EditorView. (j/obj :state (editor-state opts)\r\n                                                        :parent el))\r\n                                (cond-> focus? .focus)))\r\n                      (some-> @!v .destroy)))}])))\r\n"]}