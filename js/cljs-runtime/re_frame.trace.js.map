{"version":3,"sources":["re_frame/trace.cljc"],"mappings":"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","names":["re-frame.trace/id","cljs.core.atom","re-frame.trace/*current-trace*","re-frame.trace/reset-tracing!","cljs.core/reset!","js/goog.define","re-frame.trace/trace-enabled?","re-frame.trace/is-trace-enabled?","re-frame.trace/trace-cbs","js/re-frame","js/re-frame.trace","js/re-frame.trace.traces","re-frame.trace/traces","js/re-frame.trace.next-delivery","re-frame.trace/next-delivery","re-frame.trace/register-trace-cb","key","f","cljs.core.swap_BANG_","cljs.core/assoc","re_frame.loggers.console","re-frame.trace/remove-trace-cb","cljs.core/dissoc","re-frame.trace/next-id","cljs.core/inc","p__59251","map__59252","cljs.core/--destructure-map","cljs.core.get","re-frame.trace/start-trace","operation","op-type","tags","child-of","or__4223__auto__","re-frame.interop/now","re-frame.trace/debounce-time","re-frame.trace/debounce","interval","goog.functions/debounce","re-frame.trace/schedule-debounce","seq__59253","cljs.core/seq","cljs.core/deref","chunk__59254","count__59255","i__59256","vec__59267","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__59272","cljs.core/first","cljs.core/next","k","cb","e59270","e59275","G__59271","G__59276","e","re-frame.trace/run-tracing-callbacks!","now"],"sourcesContent":["(ns re-frame.trace\r\n  \"Tracing for re-frame.\r\n  Alpha quality, subject to change/break at any time.\"\r\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]\r\n                            [re-frame.trace :refer [finish-trace with-trace merge-trace!]]))\r\n  (:require [re-frame.interop :as interop]\r\n            [re-frame.loggers :refer [console]]\r\n            #?(:clj [net.cgrand.macrovich :as macros])\r\n            #?(:cljs [goog.functions])))\r\n\r\n(def id (atom 0))\r\n(def ^:dynamic *current-trace* nil)\r\n\r\n(defn reset-tracing! []\r\n  (reset! id 0))\r\n\r\n#?(:cljs (goog-define trace-enabled? false)\r\n   :clj  (def ^boolean trace-enabled? false))\r\n\r\n(defn ^boolean is-trace-enabled?\r\n  \"See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details\"\r\n  ;; We can remove this extra step of type hinting indirection once our minimum CLJS version includes\r\n  ;; https://dev.clojure.org/jira/browse/CLJS-1439\r\n  ;; r1.10.63 is the first version with this:\r\n  ;; https://github.com/clojure/clojurescript/commit/9ec796d791b1b2bd613af2f62cdecfd25caa6482\r\n  []\r\n  trace-enabled?)\r\n\r\n(def trace-cbs (atom {}))\r\n(defonce traces (atom []))\r\n(defonce next-delivery (atom 0))\r\n\r\n(defn register-trace-cb\r\n  \"Registers a tracing callback function which will receive a collection of one or more traces.\r\n  Will replace an existing callback function if it shares the same key.\"\r\n  [key f]\r\n  (if trace-enabled?\r\n    (swap! trace-cbs assoc key f)\r\n    (console :warn \"Tracing is not enabled. Please set {\\\"re_frame.trace.trace_enabled_QMARK_\\\" true} in :closure-defines. See: https://github.com/day8/re-frame-10x#installation.\")))\r\n\r\n(defn remove-trace-cb [key]\r\n  (swap! trace-cbs dissoc key)\r\n  nil)\r\n\r\n(defn next-id [] (swap! id inc))\r\n\r\n(defn start-trace [{:keys [operation op-type tags child-of]}]\r\n  {:id        (next-id)\r\n   :operation operation\r\n   :op-type   op-type\r\n   :tags      tags\r\n   :child-of  (or child-of (:id *current-trace*))\r\n   :start     (interop/now)})\r\n\r\n;; On debouncing\r\n;;\r\n;; We debounce delivering traces to registered cbs so that\r\n;; we can deliver them in batches. This aids us in efficiency\r\n;; but also importantly lets us avoid slowing down the host\r\n;; application by running any trace code in the critical path.\r\n;;\r\n;; We add a lightweight check on top of goog.functions/debounce\r\n;; to avoid constant setting and cancelling of timeouts. This\r\n;; means that we will deliver traces between 10-50 ms from the\r\n;; last trace being created, which still achieves our goals.\r\n\r\n(def debounce-time 50)\r\n\r\n(defn debounce [f interval]\r\n  #?(:cljs (goog.functions/debounce f interval)\r\n     :clj  (f)))\r\n\r\n(def schedule-debounce\r\n  (debounce\r\n    (fn tracing-cb-debounced []\r\n      (doseq [[k cb] @trace-cbs]\r\n        (try (cb @traces)\r\n             #?(:clj (catch Exception e\r\n                       (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))\r\n             #?(:cljs (catch :default e\r\n                        (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))))\r\n      (reset! traces []))\r\n    debounce-time))\r\n\r\n(defn run-tracing-callbacks! [now]\r\n  ;; Optimised debounce, we only re-debounce\r\n  ;; if we are close to delivery time\r\n  ;; to avoid constant setting and cancelling\r\n  ;; timeouts.\r\n\r\n  ;; If we are within 25 ms of next delivery\r\n  (when (< (- @next-delivery 25) now)\r\n    (schedule-debounce)\r\n    ;; The next-delivery time is not perfectly accurate\r\n    ;; as scheduling the debounce takes some time, but\r\n    ;; it's good enough for our purposes here.\r\n    (reset! next-delivery (+ now debounce-time))))\r\n\r\n(macros/deftime\r\n  (defmacro finish-trace [trace]\r\n     `(when (is-trace-enabled?)\r\n        (let [end#      (interop/now)\r\n              duration# (- end# (:start ~trace))]\r\n          (swap! traces conj (assoc ~trace\r\n                               :duration duration#\r\n                               :end (interop/now)))\r\n          (run-tracing-callbacks! end#))))\r\n\r\n (defmacro with-trace\r\n     \"Create a trace inside the scope of the with-trace macro\r\n\r\n          Common keys for trace-opts\r\n          :op-type - what kind of operation is this? e.g. :sub/create, :render.\r\n          :operation - identifier for the operation, for a subscription it would be the subscription keyword\r\n          :tags - a map of arbitrary kv pairs\"\r\n     [{:keys [operation op-type tags child-of] :as trace-opts} & body]\r\n     `(if (is-trace-enabled?)\r\n        (binding [*current-trace* (start-trace ~trace-opts)]\r\n          (try ~@body\r\n               (finally (finish-trace *current-trace*))))\r\n        (do ~@body)))\r\n\r\n  (defmacro merge-trace! [m]\r\n     ;; Overwrite keys in tags, and all top level keys.\r\n     `(when (is-trace-enabled?)\r\n        (let [new-trace# (-> (update *current-trace* :tags merge (:tags ~m))\r\n                             (merge (dissoc ~m :tags)))]\r\n          (set! *current-trace* new-trace#))\r\n        nil)))\r\n"]}