{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["var_args","G__63266","sci.impl.io/core-dynamic-var","js/Error","name","sci.impl.io.core_dynamic_var","init-val","sci.impl.vars.dynamic_var","sci.impl.vars/clojure-core-ns","sci.impl.io/in","*unrestricted*-orig-val__63267","*unrestricted*-temp-val__63268","sci.impl.unrestrict/*unrestricted*","G__63269","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__63270","*unrestricted*-temp-val__63271","G__63272","sci.impl.io/err","*unrestricted*-orig-val__63273","*unrestricted*-temp-val__63274","G__63275","sci.impl.io/print-fn","*unrestricted*-orig-val__63276","*unrestricted*-temp-val__63277","G__63278","sci.impl.io/print-err-fn","*unrestricted*-orig-val__63279","*unrestricted*-temp-val__63280","G__63281","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","sci.impl.io/print-namespace-maps","sci.impl.io/flush-on-newline","cljs.core/*flush-on-newline*","sci.impl.io/print-readably","cljs.core/*print-readably*","sci.impl.io/print-dup-var","cljs.core/*print-dup*","sci.impl.io/print-newline","cljs.core/*print-newline*","sci.impl.io/string-print","x","*print-fn*-orig-val__63282","*print-fn*-temp-val__63283","cljs.core/deref","cljs.core/*print-fn*","cljs.core/string-print","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq63284","self__4817__auto__","cljs.core/seq","objs","*print-fn*-orig-val__63285","*print-length*-orig-val__63286","*print-level*-orig-val__63287","*print-meta*-orig-val__63288","*print-namespace-maps*-orig-val__63289","*print-readably*-orig-val__63290","*print-newline*-orig-val__63291","*print-dup*-orig-val__63292","*print-fn*-temp-val__63293","*print-length*-temp-val__63294","*print-level*-temp-val__63295","*print-meta*-temp-val__63296","*print-namespace-maps*-temp-val__63297","*print-readably*-temp-val__63298","*print-newline*-temp-val__63299","*print-dup*-temp-val__63300","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core/*print-namespace-maps*","cljs.core.apply","cljs.core/pr","sci.impl.io/flush","sci.impl.io/newline","*print-fn*-orig-val__63301","*print-fn*-temp-val__63302","cljs.core.newline","sci.impl.io/pr-str","seq63303","*print-length*-orig-val__63304","*print-level*-orig-val__63305","*print-meta*-orig-val__63306","*print-namespace-maps*-orig-val__63307","*print-readably*-orig-val__63308","*print-newline*-orig-val__63309","*print-dup*-orig-val__63310","*print-length*-temp-val__63311","*print-level*-temp-val__63312","*print-meta*-temp-val__63313","*print-namespace-maps*-temp-val__63314","*print-readably*-temp-val__63315","*print-newline*-temp-val__63316","*print-dup*-temp-val__63317","cljs.core/pr-str","sci.impl.io/prn","seq63318","*print-fn*-orig-val__63319","*print-length*-orig-val__63320","*print-level*-orig-val__63321","*print-meta*-orig-val__63322","*print-namespace-maps*-orig-val__63323","*print-readably*-orig-val__63324","*print-newline*-orig-val__63325","*print-dup*-orig-val__63326","*print-fn*-temp-val__63327","*print-length*-temp-val__63328","*print-level*-temp-val__63329","*print-meta*-temp-val__63330","*print-namespace-maps*-temp-val__63331","*print-readably*-temp-val__63332","*print-newline*-temp-val__63333","*print-dup*-temp-val__63334","cljs.core/prn","sci.impl.io/prn-str","seq63338","*print-length*-orig-val__63339","*print-level*-orig-val__63340","*print-meta*-orig-val__63341","*print-namespace-maps*-orig-val__63342","*print-readably*-orig-val__63343","*print-newline*-orig-val__63344","*print-dup*-orig-val__63345","*print-length*-temp-val__63346","*print-level*-temp-val__63347","*print-meta*-temp-val__63348","*print-namespace-maps*-temp-val__63349","*print-readably*-temp-val__63350","*print-newline*-temp-val__63351","*print-dup*-temp-val__63352","cljs.core/prn-str","sci.impl.io/print","seq63353","*print-fn*-orig-val__63354","*print-length*-orig-val__63355","*print-level*-orig-val__63356","*print-namespace-maps*-orig-val__63357","*print-readably*-orig-val__63358","*print-newline*-orig-val__63359","*print-dup*-orig-val__63360","*print-fn*-temp-val__63361","*print-length*-temp-val__63362","*print-level*-temp-val__63363","*print-namespace-maps*-temp-val__63364","*print-readably*-temp-val__63365","*print-newline*-temp-val__63366","*print-dup*-temp-val__63367","cljs.core/print","sci.impl.io/print-str","seq63378","*print-length*-orig-val__63379","*print-level*-orig-val__63380","*print-meta*-orig-val__63381","*print-namespace-maps*-orig-val__63382","*print-readably*-orig-val__63383","*print-newline*-orig-val__63384","*print-dup*-orig-val__63385","*print-length*-temp-val__63386","*print-level*-temp-val__63387","*print-meta*-temp-val__63388","*print-namespace-maps*-temp-val__63389","*print-readably*-temp-val__63390","*print-newline*-temp-val__63391","*print-dup*-temp-val__63392","cljs.core/print-str","sci.impl.io/println","seq63405","*print-fn*-orig-val__63407","*print-length*-orig-val__63408","*print-level*-orig-val__63409","*print-meta*-orig-val__63410","*print-namespace-maps*-orig-val__63411","*print-readably*-orig-val__63412","*print-newline*-orig-val__63413","*print-dup*-orig-val__63414","*print-fn*-temp-val__63415","*print-length*-temp-val__63416","*print-level*-temp-val__63417","*print-meta*-temp-val__63418","*print-namespace-maps*-temp-val__63419","*print-readably*-temp-val__63420","*print-newline*-temp-val__63421","*print-dup*-temp-val__63422","cljs.core/println","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq63439","G__63440","cljs.core/first","cljs.core/next","G__63441","self__4816__auto__","_","body","sci.impl.utils/allowed-append"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])\n                            print-method])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.records]\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            #?(:cljs [sci.impl.utils :as utils])\n            [sci.impl.vars :as vars]))\n\n#?(:clj\n   (defmulti print-method (fn [x _writer]\n                            (let [t (-> x meta :type)]\n                              (if (and t\n                                       (or (instance? sci.impl.records.SciRecord x)\n                                           (keyword? t)))\n                                t\n                                (class x))))))\n\n#?(:clj\n   (defmethod print-method :default\n     [x writer]\n     (clojure.core/print-method x writer)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn core-dynamic-var\n  \"create a dynamic var with clojure.core :ns meta\"\n  ([name] (core-dynamic-var name nil))\n  ([name init-val] (vars/dynamic-var name init-val {:ns vars/clojure-core-ns})))\n\n(def in (binding [*unrestricted* true]\n          (doto (core-dynamic-var '*in*)\n            (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*err*)\n             (vars/unbind))))\n\n#?(:cljs\n   (def print-fn\n     (binding [*unrestricted* true]\n       (doto (core-dynamic-var '*print-fn*)\n         (vars/unbind)))))\n\n#?(:cljs\n   (def print-err-fn\n     (binding [*unrestricted* true]\n       (doto (core-dynamic-var '*print-err-fn*)\n         (vars/unbind)))))\n\n;; TODO: CLJS print-fn-bodies\n\n(def print-meta\n  (core-dynamic-var '*print-meta* false))\n\n(def print-length (core-dynamic-var '*print-length*))\n(def print-level (core-dynamic-var '*print-level*))\n(def print-namespace-maps (core-dynamic-var '*print-namespace-maps* true))\n(def flush-on-newline (core-dynamic-var '*flush-on-newline* *flush-on-newline*))\n(def print-readably (core-dynamic-var '*print-readably* *print-readably*))\n(def print-dup-var (core-dynamic-var '*print-dup* *print-dup*))\n#?(:cljs (def print-newline (core-dynamic-var '*print-newline* *print-newline*)))\n\n#?(:cljs (defn string-print [x]\n           (binding [*print-fn* @print-fn]\n             (cljs.core/string-print x))) )\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably\n                     *print-dup* @print-dup-var]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-fn* @print-fn\n                     *print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably\n                     *print-newline* @print-newline\n                     *print-dup* @print-dup-var]\n             (apply cljs.core/pr objs))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (binding [*print-fn* @print-fn]\n             (cljs.core/newline))))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when @flush-on-newline\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/prn objs))))\n\n#?(:clj\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* nil\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/print objs))))\n\n#?(:clj\n   (defn print-str\n     \"print to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"print to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline\n               *print-dup* @print-dup-var]\n       (apply cljs.core/println objs))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                   :cljs goog.string.StringBuffer))]\n     #?(:clj\n        (binding [*out* s#]\n          ~@body\n          (str s#))\n        :cljs\n        (binding [*print-newline* true\n                  *print-fn* (fn [x#]\n                               (. s# ~utils/allowed-append x#))]\n          ~@body\n          (str s#)))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}