{"version":3,"sources":["nextjournal/clojure_mode/extensions/eval_region.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.eval-region/uppermost-edge-here","pos","node","or__4223__auto__","cljs.core/iterate","nextjournal.clojure-mode.node/up","cljs.core.take_while","p1__60285#","cljs.core.every_pred","cljs.core/complement","nextjournal.clojure-mode.node/top?","cljs.core._EQ_","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start","cljs.core/last","nextjournal.clojure-mode.extensions.eval-region/main-selection","state","parent__55888__auto__","f__55889__auto__","obj60302","obj60301","js/undefined","var_args","G__60310","nextjournal.clojure-mode.extensions.eval-region/node-at-cursor","js/Error","nextjournal.clojure_mode.extensions.eval_region.node_at_cursor","obj60315","from","G__60318","nextjournal.clojure-mode.node/nearest-touching","p1__60305#","nextjournal.clojure-mode.node/terminal-type?","nextjournal.clojure-mode.node/type","G__60325","nextjournal.clojure_mode.node.children","cljs.core/first","nextjournal.clojure_mode.node.balanced_range","nextjournal.clojure-mode.extensions.eval-region/top-level-node","obj60329","cljs.core/identity","js/nextjournal","js/nextjournal.clojure-mode","js/nextjournal.clojure-mode.extensions","js/nextjournal.clojure-mode.extensions.eval-region","js/nextjournal.clojure-mode.extensions.eval-region.modifier-effect","nextjournal.clojure-mode.extensions.eval-region/modifier-effect","js/module$node_modules$$codemirror$state$dist$index_cjs.StateEffect","js/nextjournal.clojure-mode.extensions.eval-region.modifier-field","nextjournal.clojure-mode.extensions.eval-region/modifier-field","js/module$node_modules$$codemirror$state$dist$index_cjs.StateField","cljs.core/constantly","value","tr","G__60332","p1__60330#","cljs.core.filter","obj60333","nextjournal.clojure-mode.extensions.eval-region/get-modifier-field","p__60334","map__60335","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj60340","obj60341","nextjournal.clojure-mode.extensions.eval-region/set-modifier-field!","view","dispatch","G__60342","p__60347","map__60348","obj60351","obj60354","nextjournal.clojure-mode.extensions.eval-region/mark","spec","to","js/module$node_modules$$codemirror$view$dist$index_cjs.Decoration","nextjournal.clojure-mode.extensions.eval-region/single-mark","range","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec","nextjournal.clojure-mode.extensions.eval-region/mark-spec","js/nextjournal.clojure-mode.extensions.eval-region.mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/mark-spec-highlight","nextjournal.clojure-mode.extensions.eval-region/cursor-range","js/nextjournal.clojure-mode.extensions.eval-region.region-field","nextjournal.clojure-mode.extensions.eval-region/region-field","p__60359","map__60361","obj60369","_value","map__60372","cljs.core/--destructure-map","cljs.core.get","Alt","Shift","Enter","temp__5755__auto__","nextjournal.clojure_mode.node.embedded_QMARK_","nextjournal.clojure_mode.node.within_program_QMARK_","and__4221__auto__","p1__60357#","nextjournal.clojure-mode.util/guard","cljs.core/not","obj60380","nextjournal.clojure-mode.extensions.eval-region/get-region-field","nextjournal.clojure-mode.extensions.eval-region/current-range","G__60398","obj__55881__auto__","f__55882__auto__","p1__60397#","obj60402","nextjournal.clojure-mode.extensions.eval-region/modifier-extension","modifier","handle-enter","p__60415","map__60418","obj60421","cljs.core.assoc","handle-key-event","p__60422","p__60423","map__60428","obj60431","obj60432","obj60433","obj60434","obj60435","map__60429","obj60441","event","altKey","shiftKey","metaKey","controlKey","type","prev","next","G__60444","js/module$node_modules$w3c_keyname$index_cjs.keyName","cljs.core.not_EQ_","handle-backspace","p__60449","map__60450","obj60455","obj60457","map__60459","obj60463","obj60464","G__60472","nextjournal.clojure-mode.util/user-event-annotation","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","js/module$node_modules$$codemirror$view$dist$index_cjs.EditorView","p__60477","map__60478","nextjournal.clojure-mode.extensions.eval-region/extension","nextjournal.clojure-mode.extensions.eval-region/cursor-node-string","G__60479","nextjournal.clojure-mode.util/range-str","clojure.string/blank?","nextjournal.clojure-mode.extensions.eval-region/top-level-string","G__60480"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.eval-region\r\n  (:require\r\n   [\"@codemirror/state\" :as state :refer [StateEffect StateField]]\r\n   [\"@codemirror/view\" :as view :refer [EditorView Decoration keymap]]\r\n   [\"w3c-keyname\" :refer [keyName]]\r\n   [applied-science.js-interop :as j]\r\n   [nextjournal.clojure-mode.util :as u]\r\n   [nextjournal.clojure-mode.node :as n]\r\n   [clojure.string :as str]))\r\n\r\n(defn uppermost-edge-here\r\n  \"Returns node or its highest ancestor that starts or ends at the cursor position.\"\r\n  [pos node]\r\n  (or (->> (iterate n/up node)\r\n           (take-while (every-pred (complement n/top?)\r\n                                   #(or (= pos (n/end %) (n/end node))\r\n                                        (= pos (n/start %) (n/start node)))))\r\n           (last))\r\n      node))\r\n\r\n(defn main-selection [state]\r\n  (-> (j/call-in state [:selection :asSingle])\r\n      (j/get-in [:ranges 0])))\r\n\r\n(defn node-at-cursor\r\n  ([state] (node-at-cursor state (j/get (main-selection state) :from)))\r\n  ([^js state from]\r\n   (some->> (n/nearest-touching state from -1)\r\n            (#(when (or (n/terminal-type? (n/type %))\r\n                        (<= (n/start %) from)\r\n                        (<= (n/end %) from))\r\n                (cond-> %\r\n                  (or (n/top? %)\r\n                      (and (not (n/terminal-type? (n/type %)))\r\n                           (< (n/start %) from (n/end %))))\r\n                  (-> (n/children from -1) first))))\r\n            (uppermost-edge-here from)\r\n            (n/balanced-range state))))\r\n\r\n(defn top-level-node [state]\r\n  (->> (n/nearest-touching state (j/get (main-selection state) :from) -1)\r\n       (iterate n/up)\r\n       (take-while (every-pred identity (complement n/top?)))\r\n       last))\r\n\r\n;; Modifier field\r\n(defonce modifier-effect (.define StateEffect))\r\n(defonce modifier-field\r\n         (.define StateField\r\n                  (j/lit {:create (constantly {})\r\n                          :update (fn [value ^js tr]\r\n                                    (or (some-> (first (filter #(.is ^js % modifier-effect) (.-effects tr)))\r\n                                                (j/get :value))\r\n                                        value))})))\r\n\r\n(defn get-modifier-field [^js state] (.field state modifier-field))\r\n\r\n(j/defn set-modifier-field! [^:js {:as view :keys [dispatch state]} value]\r\n  (dispatch #js{:effects (.of modifier-effect value)\r\n                :userEvent \"evalregion\"}))\r\n\r\n(j/defn mark [spec ^:js {:keys [from to]}]\r\n  (-> (.mark Decoration spec)\r\n      (.range from to)))\r\n\r\n(defn single-mark [spec range]\r\n  (.set Decoration #js[(mark spec range)]))\r\n\r\n(defonce mark-spec (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.14);\"}}))\r\n(defonce mark-spec-highlight (j/lit {:attributes {:style \"background-color: rgba(0, 243, 255, 0.35);\"}}))\r\n\r\n(defn cursor-range [^js state]\r\n  (if (.. state -selection -main -empty)\r\n    (node-at-cursor state)\r\n    (.. state -selection -main)))\r\n\r\n(defonce region-field\r\n  (.define StateField\r\n           (j/lit\r\n            {:create (constantly (.-none Decoration))\r\n             :update (j/fn [_value ^:js {:keys [state]}]\r\n                       (let [{:strs [Alt Shift Enter]} (get-modifier-field state)\r\n                             spec (if Enter mark-spec-highlight mark-spec)]\r\n                         (if-some [range (when (or (n/embedded? state) (n/within-program? state))\r\n                                           (cond (and Alt Shift) (top-level-node state)\r\n                                                 Alt (or (u/guard (main-selection state) #(not (j/get % :empty)))\r\n                                                         (cursor-range state))))]\r\n                           (single-mark spec range)\r\n                           (.-none Decoration))))})))\r\n\r\n\r\n(defn get-region-field [^js state] (.field state region-field))\r\n\r\n(defn current-range [^js state]\r\n  (or (some-> (get-region-field state)\r\n              (j/call :iter)\r\n              (u/guard #(j/get % :value)))\r\n      (.. state -selection -main)))\r\n\r\n(defn modifier-extension\r\n  \"Maintains modifier-state-field, containing a map of {<modifier> true}, including Enter.\"\r\n  [modifier]\r\n  (let [handle-enter (j/fn handle-enter [^:js {:as view :keys [state]}]\r\n                       (set-modifier-field! view (assoc (get-modifier-field state) \"Enter\" true))\r\n                       nil)\r\n        handle-key-event (j/fn [^:js {:as event :keys [altKey shiftKey metaKey controlKey type]}\r\n                                ^:js {:as view :keys [state]}]\r\n                           (let [prev (get-modifier-field state)\r\n                                 next (cond-> {}\r\n                                        altKey (assoc \"Alt\" true)\r\n                                        shiftKey (assoc \"Shift\" true)\r\n                                        metaKey (assoc \"Meta\" true)\r\n                                        controlKey (assoc \"Control\" true)\r\n                                        (and (= \"keydown\" type)\r\n                                             (= \"Enter\" (keyName event)))\r\n                                        (assoc \"Enter\" true))]\r\n                             (when (not= prev next)\r\n                               (set-modifier-field! view next))\r\n                             false))\r\n        handle-backspace (j/fn [^:js {:as view :keys [state dispatch]}]\r\n                           (j/let [^:js {:keys [from to]} (current-range state)]\r\n                             (when (not= from to)\r\n                               (dispatch (j/lit {:changes {:from from :to to :insert \"\"}\r\n                                                 :annotations (u/user-event-annotation \"delete\")})))\r\n                             true))]\r\n    #js[modifier-field\r\n        (.of keymap\r\n             (j/lit [{:key   (str modifier \"-Enter\")\r\n                      :shift handle-enter\r\n                      :run   handle-enter}\r\n                     {:key (str modifier \"-Backspace\")\r\n                      :run handle-backspace\r\n                      :shift handle-backspace}]))\r\n        (.domEventHandlers view/EditorView\r\n                           #js{:keydown handle-key-event\r\n                               :keyup   handle-key-event})]))\r\n\r\n(defn extension [{:keys [modifier]\r\n                  :or   {modifier \"Alt\"}}]\r\n  #js[(modifier-extension modifier)\r\n      region-field\r\n      (.. EditorView -decorations (from region-field))])\r\n\r\n(defn cursor-node-string [^js state]\r\n  (u/guard (some->> (node-at-cursor state)\r\n                    (u/range-str state))\r\n           (complement str/blank?)))\r\n\r\n(defn top-level-string [^js state]\r\n  (u/guard (some->> (top-level-node state)\r\n                    (u/range-str state))\r\n           (complement str/blank?)))\r\n"]}