{"version":3,"sources":["nextjournal/log.cljc"],"mappings":"","names":[],"sourcesContent":["(ns nextjournal.log\r\n  (:refer-clojure :exclude [case])\r\n  #?(:cljs (:require-macros [nextjournal.log]))\r\n  (:require [lambdaisland.glogi :as glogi]\r\n            #?(:clj [io.pedestal.log :as pedestal])))\r\n\r\n\r\n#?(:clj\r\n   (do\r\n\r\n     (defmacro case [& {:keys [cljs clj]}]\r\n       `(if (:ns ~'&env) ~cljs ~clj))\r\n\r\n     (defmacro finest [& keyvals] ;; goog.log\r\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\r\n             :cljs (#'glogi/log-expr &form :finest keyvals)))\r\n\r\n     (defmacro finer [& keyvals] ;; goog.log\r\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\r\n             :cljs (#'glogi/log-expr &form :finer keyvals)))\r\n\r\n     (defmacro trace [& keyvals]\r\n       (case :clj  (#'pedestal/log-expr &form :trace keyvals)\r\n             :cljs (#'glogi/log-expr &form :trace keyvals)))\r\n\r\n     (defmacro fine [& keyvals] ;; goog.log\r\n       (case :clj  (#'pedestal/log-expr &form :debug keyvals)\r\n             :cljs (#'glogi/log-expr &form :fine keyvals)))\r\n\r\n     (defmacro debug [& keyvals]\r\n       (case :clj  (#'pedestal/log-expr &form :debug keyvals)\r\n             :cljs (#'glogi/log-expr &form :debug keyvals)))\r\n\r\n     (defmacro config [& keyvals] ;; goog.log\r\n       (case :clj  (#'pedestal/log-expr &form :info keyvals)\r\n             :cljs (#'glogi/log-expr &form :config keyvals)))\r\n\r\n     (defmacro info [& keyvals]\r\n       (case :clj  (#'pedestal/log-expr &form :info keyvals)\r\n             :cljs (#'glogi/log-expr &form :info keyvals)))\r\n\r\n     (defmacro warn [& keyvals]\r\n       (case :clj  (#'pedestal/log-expr &form :warn keyvals)\r\n             :cljs (#'glogi/log-expr &form :warn keyvals)))\r\n\r\n     (defmacro error [& keyvals]\r\n       (case :clj  (#'pedestal/log-expr &form :error keyvals)\r\n             :cljs (#'glogi/log-expr &form :error keyvals)))\r\n\r\n     (defmacro spy [expr]\r\n       (case :clj `(pedestal/spy ~expr)\r\n             :cljs `(glogi/spy ~expr)))\r\n\r\n     (defmacro with-context [ctx-map & body]\r\n       `(pedestal/with-context ~ctx-map ~@body))\r\n\r\n     (def format-name pedestal/format-name)\r\n     (def counter pedestal/counter)\r\n     (def gauge pedestal/gauge)\r\n     (def histogram pedestal/histogram)\r\n     (def meter pedestal/meter)))\r\n"]}