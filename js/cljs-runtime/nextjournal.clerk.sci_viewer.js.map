{"version":3,"sources":["nextjournal/clerk/sci_viewer.cljs"],"mappings":"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","names":["nextjournal.clerk.sci-viewer/color-classes","selected?","nextjournal.clerk.sci-viewer/value-of","obj","k","e74980","v","obj74981","applied-science.js-interop.impl/wrap-key","js/undefined","js/Error","_","nextjournal.clerk.sci-viewer/obj->clj","x","result","key","cljs.core._EQ_","goog/typeOf","cljs.core.assoc","cljs.core.reduce","goog.object/getKeys","nextjournal.clerk.sci-viewer/nbsp","goog.string/unescapeEntities","p__74985","map__74986","cljs.core/--destructure-map","cljs.core.get","nextjournal.clerk.sci-viewer/js-object-viewer","opts","!expanded-at","path","x'","expanded?","cljs.core/deref","G__74990","nextjournal.clerk.sci-viewer/html","cljs.core.into","cljs.core.comp","cljs.core.map_indexed","idx","nextjournal.clerk.sci-viewer/inspect","cljs.core.update","cljs.core/conj","cljs.core.interpose","cljs.core.repeat","cljs.core/count","cljs.core/keys","nextjournal.clerk.sci-viewer/toc-items","items","p__74991","map__74992","acc","item","content","children","title","nextjournal.markdown.transform/->text","lambdaisland.uri.normalize/normalize-fragment","cljs.core.conj","cljs.core/vec","G__74993","nextjournal.clerk.sci-viewer/dark-mode-toggle","!state","map__74994","dark-mode?","spring","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","nextjournal.ui.components.motion/svg","nextjournal.ui.components.motion/path","nextjournal.ui.components.motion/circle","nextjournal.ui.components.motion/g","nextjournal.clerk.sci-viewer/local-storage-dark-mode-key","nextjournal.clerk.sci-viewer/set-dark-mode!","class-list","js/document.querySelector","nextjournal.ui.components.localstorage/set-item!","nextjournal.clerk.sci-viewer/setup-dark-mode!","map__74995","cljs.core/add-watch","p__74996","map__74997","old","cljs.core.not_EQ_","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.sci-viewer","js/nextjournal.clerk.sci-viewer.!eval-counter","nextjournal.clerk.sci-viewer/!eval-counter","reagent.core.atom","p__75000","map__75001","nextjournal.clerk.sci-viewer/notebook","_doc","xs","toc","with-let75002","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__57349__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init75003","p1__74998#","p1__74999#","res75004","local-storage-key","nextjournal.ui.components.localstorage/get-item","temp__5755__auto__","stored-open?","root-ref-fn","ref-fn","map__75005","md-toc","G__75006","and__4221__auto__","nextjournal.ui.components.navbar/toggle-button","nextjournal.ui.components.icon/menu","nextjournal.ui.components.navbar/panel","nextjournal.ui.components.navbar/navbar","cljs.core.doall","map__75007","viewer-name","nextjournal.clerk.viewer/->viewer","inner-viewer-name","G__75008","nextjournal.clerk.viewer/->value","cljs.core/name","G__75010","cljs.core/Keyword","or__4223__auto__","nextjournal.clerk.viewer/width","G__75013","nextjournal.clerk.sci-viewer/eval-viewer-fn","eval-f","form","e75014","e","cljs.core.ex_info","js/nextjournal.clerk.sci-viewer.!edamame-opts","nextjournal.clerk.sci-viewer/!edamame-opts","cljs.core.atom","cljs.core/seq?","tag","cljs.core.partial","nextjournal.clerk.viewer/->viewer-fn","cljs.core/*eval*","value","nextjournal.clerk.viewer.with_viewer","cljs.core/vector?","G__75045","cljs.core/second","memory-address","nextjournal.clerk.sci-viewer/read-string","s","edamame.core.parse_string","nextjournal.clerk.sci-viewer/opts->query","p1__75070#","cljs.core.map","clojure.string/join","clojure.string.join","nextjournal.clerk.sci-viewer/unreadable-edn-viewer","edn","G__75079","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","nextjournal.clerk.sci-viewer/error-badge","seq75082","self__4817__auto__","cljs.core/seq","nextjournal.clerk.sci-viewer/error-view","error","e75099","clojure.string/split-lines","cljs.core.drop","cljs.core.mapv","clojure.string/trim","data","nextjournal.clerk.sci-viewer/inspect-paginated","nextjournal.clerk.sci-viewer/error-boundary","seq75104","G__75105","cljs.core/first","cljs.core/next","self__4816__auto__","!error","reagent.core.create_class","_info","cljs.core/reset!","_error","temp__5751__auto__","p__75115","map__75116","nextjournal.clerk.sci-viewer/fetch!","blob-id","js/fetch","p1__75113#","p1__75114#","e75126","js/console.error","p__75129","map__75130","nextjournal.clerk.sci-viewer/read-result","string","e75134","p__75138","map__75139","nextjournal.clerk.sci-viewer/result-viewer","fetch-opts","hash","_opts","G__75140","with-let75141","init75142","p1__75137#","res75143","!hash","!desc","!fetch-opts","fetch-fn","more","nextjournal.clerk.viewer/merge-presentations","on-key-down","event","cljs.core/dissoc","on-key-up","js/document.addEventListener","js/document.removeEventListener","nextjournal.view.context/provide","nextjournal.clerk.sci-viewer/toggle-expanded","map__75172","hover-path","prompt-multi-expand?","hover-path-count","hover-path-expanded?","expanded-at","p__75176","vec__75177","cljs.core.nth","cljs.core/update","nextjournal.clerk.sci-viewer/expandable?","nextjournal.clerk.sci-viewer/inspect-children","G__75184","G__75185","cljs.core.fnil","nextjournal.clerk.sci-viewer/expand-style","nextjournal.clerk.sci-viewer/triangle","nextjournal.clerk.sci-viewer/triangle-spacer","nextjournal.clerk.sci-viewer/expand-button","opening-paren","map__75192","multi-expand?","p__75195","map__75196","nextjournal.clerk.sci-viewer/coll-viewer","viewer","G__75197","map__75198","closing-paren","G__75200","cljs.core/list?","nextjournal.devcards/register-devcard*","iter__4622__auto__","s__75205","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__75207","cljs.core/chunk-buffer","i__75206","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75204","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","coll","cljs.core.range","s__75214","b__75216","i__75215","iter__75213","p__75219","map__75223","nextjournal.clerk.sci-viewer/elision-viewer","total","offset","unbounded?","G__75224","nextjournal.view.context/consume","cljs.core/fn?","p__75227","map__75228","nextjournal.clerk.sci-viewer/map-viewer","G__75229","map__75230","G__75231","p__75235","map__75236","nextjournal.clerk.sci-viewer/string-viewer","G__75237","p1__75232#","p__75252","map__75253","nextjournal.clerk.sci-viewer/quoted-string-viewer","G__75256","p1__75249#","cljs.core/some","clojure.string/includes?","nextjournal.clerk.sci-viewer/number-viewer","num","G__75259","js/Number.isNaN","nextjournal.clerk.sci-viewer/sort!","!sort","i","map__75263","sort-key","sort-order","p__75270","p__75271","map__75276","map__75277","nextjournal.clerk.sci-viewer/sort-data","sort-index","head","rows","G__75278","p1__75265#","cljs.core.sort_by","G__75279","cljs.core/val","clojure.string/lower-case","p1__75266#","p2__75267#","p1__75269#","p2__75268#","cljs.core/compare","nextjournal.clerk.sci-viewer/x-icon","nextjournal.clerk.sci-viewer/check-icon","p__75299","vec__75300","nextjournal.clerk.sci-viewer/table-error","G__75303","p__75309","map__75310","nextjournal.clerk.sci-viewer/throwable-viewer","via","trace","G__75311","p__75314","map__75315","_ex","type","message","_trace","cljs.core.pr_str","p__75322","vec__75323","call","_x","file","line","G__75331","nextjournal.clerk.sci-viewer/tagged-value","p__75334","map__75335","nextjournal.clerk.sci_viewer.tagged_value","space?","nextjournal.clerk.sci-viewer/normalize-viewer-meta","cljs.core/meta","fexpr__75336","nextjournal.clerk.sci-viewer/html-viewer","nextjournal.clerk.sci-viewer/reagent-viewer","p1__75338#","p1__75339#","p2__75340#","nextjournal.clerk.sci-viewer/js-viewers","cljs.core/PROTOCOL_SENTINEL","cljs.core/type","G__75348","G__75349","goog/isObject","cljs.core/array?","js/nextjournal.clerk.sci-viewer.!doc","nextjournal.clerk.sci-viewer/!doc","reagent.ratom.atom","js/nextjournal.clerk.sci-viewer.!error","nextjournal.clerk.sci-viewer/!error","js/nextjournal.clerk.sci-viewer.!viewers","nextjournal.clerk.sci-viewer/!viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.sci-viewer/set-viewers!","scope","viewers","nextjournal.clerk.sci-viewer/render-with-viewer","nextjournal.clerk.viewer/viewer-fn?","cljs.core/map?","G__75362","G__75363","G__75364","G__75365","nextjournal.clerk.sci_viewer.error_badge","G__75367","with-let75371","init75372","res75373","js/module$node_modules$react$index.isValidElement","nextjournal.clerk.sci_viewer.inspect","cljs.core.merge","nextjournal.clerk.sci-viewer/in-process-fetch","js/Promise","nextjournal.clerk.viewer.present","with-let75386","init75387","res75392","re_frame.context.subscribe","cljs.core/range","cljs.core/zipmap","p__75407","vec__75408","cljs.core/PersistentHashMap","cljs.core/random-uuid","re_frame.context.reg_sub","p__75411","vec__75412","db","blob-key","id","G__75415","s__75417","b__75419","i__75418","iter__75416","_foo","*print-meta*-orig-val__75420","*print-meta*-temp-val__75421","*print-meta*-orig-val__75422","*print-meta*-temp-val__75423","cljs.core/*print-meta*","nextjournal.clerk.viewer/vl","nextjournal.clerk.viewer/plotly","cljs.core/shuffle","nextjournal.clerk.viewer/tex","nextjournal.clerk.viewer/md","nextjournal.clerk.viewer/code","G__75438","with-let75446","init75447","res75448","c","cljs.core/inc","cljs.core/dec","p1__75454#","G__75460","x__4306__auto__","y__4307__auto__","x__4309__auto__","y__4310__auto__","G__75464","nextjournal.clerk.sci-viewer/root","p__75470","map__75471","nextjournal.clerk.sci-viewer/set-state","state","doc","remount?","cljs.core/contains?","js/document","nextjournal.clerk.viewer/inspect-wrapped-value","nextjournal.clerk.sci-viewer/*viewers*","nextjournal.clerk.viewer/with-viewers","cljs.core/number?","y","nextjournal.clerk.sci-viewer/mount","el","js/document.getElementById","reagent.dom.render","nextjournal.clerk.viewer/table","nextjournal.clerk.sci-viewer/rand-int-seq","n","to","cljs.core.take","cljs.core.repeatedly","cljs.core/rand-int","cljs.core/rand-nth","cljs.core/repeat","p1__75509#","p2__75508#","nextjournal.clerk.sci-viewer/find-named-viewer","cljs.core.juxt","cljs.core/identity","nextjournal.clerk.sci-viewer/clerk-eval","goog/global","p__75510","map__75511","nextjournal.clerk.sci-viewer/katex-viewer","tex-string","inline?","G__75514","nextjournal.viewer.katex.to_html_string","nextjournal.clerk.sci-viewer/html-render","markup","reagent.core.as_element","nextjournal.clerk.viewer/with-viewer","G__75515","cljs.core/PersistentVector","nextjournal.clerk.sci-viewer/mathjax-viewer","nextjournal.viewer.mathjax/viewer","nextjournal.clerk.sci-viewer/code-viewer","nextjournal.viewer.code/viewer","nextjournal.clerk.sci-viewer/plotly-viewer","nextjournal.viewer.plotly/viewer","nextjournal.clerk.sci-viewer/vega-lite-viewer","nextjournal.viewer.vega-lite/viewer","nextjournal.clerk.sci-viewer/expand-icon","nextjournal.clerk.sci-viewer/foldable-code-viewer","code-string","with-let75517","init75519","res75520","!hidden?","p__75524","map__75525","nextjournal.clerk.sci-viewer/url-for","src","cljs.core.dissoc","nextjournal.clerk.sci-viewer/doc-url","sci.core.new_var","nextjournal.clerk.sci-viewer/sci-viewer-namespace","nextjournal.ui.components.d3-require/with","nextjournal.clerk.viewer/col","nextjournal.clerk.viewer/row","js/nextjournal.clerk.sci-viewer.!sci-ctx","nextjournal.clerk.sci-viewer/!sci-ctx","sci.core/init","js/module$node_modules$framer_motion$dist$cjs$index","sci.configs.applied-science.js-interop/namespaces","sci.configs.reagent.reagent/namespaces","nextjournal.clerk.sci-viewer/eval-form","f","sci.core/eval-form","cljs.core/key","p1__75528#","nextjournal.clerk.viewer/process-render-fn","cljs.core/concat","cljs.core/chunk-first"],"sourcesContent":["(ns nextjournal.clerk.sci-viewer\r\n  (:require [\"framer-motion\" :as framer-motion]\r\n            [applied-science.js-interop :as j]\r\n            [cljs.reader]\r\n            [clojure.string :as str]\r\n            [edamame.core :as edamame]\r\n            [goog.object]\r\n            [goog.string :as gstring]\r\n            [lambdaisland.uri.normalize :as uri.normalize]\r\n            [nextjournal.clerk.viewer :as viewer :refer [code md plotly tex table vl row col with-viewer with-viewers]]\r\n            [nextjournal.devcards :as dc]\r\n            [nextjournal.markdown.transform :as md.transform]\r\n            [nextjournal.ui.components.d3-require :as d3-require]\r\n            [nextjournal.ui.components.icon :as icon]\r\n            [nextjournal.ui.components.localstorage :as ls]\r\n            [nextjournal.ui.components.motion :as motion]\r\n            [nextjournal.ui.components.navbar :as navbar]\r\n            [nextjournal.view.context :as view-context]\r\n            [nextjournal.viewer.code :as code]\r\n            [nextjournal.viewer.katex :as katex]\r\n            [nextjournal.viewer.mathjax :as mathjax]\r\n            [nextjournal.viewer.plotly :as plotly]\r\n            [nextjournal.viewer.vega-lite :as vega-lite]\r\n            [re-frame.context :as rf]\r\n            [\"react\" :as react]\r\n            [reagent.core :as r]\r\n            [reagent.dom :as rdom]\r\n            [reagent.ratom :as ratom]\r\n            [sci.configs.applied-science.js-interop :as sci.configs.js-interop]\r\n            [sci.configs.reagent.reagent :as sci.configs.reagent]\r\n            [sci.core :as sci]\r\n            [nextjournal.clerk.viewer :as v]))\r\n\r\n(defn color-classes [selected?]\r\n  {:value-color (if selected? \"white-90\" \"dark-green\")\r\n   :symbol-color (if selected? \"white-90\" \"dark-blue\")\r\n   :prefix-color (if selected? \"white-50\" \"black-30\")\r\n   :label-color (if selected? \"white-90\" \"black-60\")\r\n   :badge-background-color (if selected? \"bg-white-20\" \"bg-black-10\")})\r\n\r\n(declare inspect inspect-paginated reagent-viewer)\r\n\r\n(defn value-of\r\n  \"Safe access to a value at key a js object.\r\n\r\n   Returns `'forbidden` if reading the property would result in a `SecurityError`.\r\n   https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\r\n  [obj k]\r\n  (try\r\n    (let [v (j/get obj k)]\r\n      (.-constructor v) ;; test for SecurityError\r\n      v)\r\n    (catch js/Error ^js _\r\n      'forbidden)))\r\n\r\n(defn obj->clj [x]\r\n  (-> (fn [result key]\r\n        (let [v (aget x key)]\r\n          (if (= \"function\" (goog/typeOf v))\r\n            result\r\n            (assoc result key v))))\r\n      (reduce {} (goog.object/getKeys x))))\r\n\r\n(def nbsp\r\n  (gstring/unescapeEntities \"&nbsp;\"))\r\n\r\n(declare html html-viewer)\r\n\r\n(defn js-object-viewer [x {:as opts :keys [!expanded-at path]}]\r\n  (let [x' (obj->clj x)\r\n        expanded? (get @!expanded-at path)]\r\n    (html [:span.inspected-value.whitespace-nowrap \"#js {\"\r\n           (into [:<>]\r\n                 (comp (map-indexed (fn [idx k]\r\n                                      [:<>\r\n                                       [inspect k (update opts :path conj idx)]\r\n                                       \" \"\r\n                                       [inspect (value-of x k) (update opts :path conj idx)]]))\r\n                       (interpose (if expanded? [:<> [:br] (repeat (inc (count path)) \" \")] \" \")))\r\n                 (keys x')) \"}\"])))\r\n\r\n(defn toc-items [items]\r\n  (reduce\r\n   (fn [acc {:as item :keys [content children]}]\r\n     (if content\r\n       (let [title (md.transform/->text item)]\r\n         (->> {:title title\r\n               :path (str \"#\" (uri.normalize/normalize-fragment title))\r\n               :items (toc-items children)}\r\n              (conj acc)\r\n              vec))\r\n       (toc-items (:children item))))\r\n   []\r\n   items))\r\n\r\n(defn dark-mode-toggle [!state]\r\n  (let [{:keys [dark-mode?]} @!state\r\n        spring {:type :spring :stiffness 200 :damping 10}]\r\n    [:div.relative\r\n     [:button.text-slate-400.hover:text-slate-600.dark:hover:text-white.cursor-pointer\r\n      {:on-click #(swap! !state assoc :dark-mode? (not dark-mode?))}\r\n      (if dark-mode?\r\n        [:> motion/svg\r\n         {:xmlns \"http://www.w3.org/2000/svg\"\r\n          :class \"w-5 h-5 md:w-4 md:h-4\"\r\n          :viewBox \"0 0 50 50\"\r\n          :key \"moon\"}\r\n         [:> motion/path\r\n          {:d \"M 43.81 29.354 C 43.688 28.958 43.413 28.626 43.046 28.432 C 42.679 28.238 42.251 28.198 41.854 28.321 C 36.161 29.886 30.067 28.272 25.894 24.096 C 21.722 19.92 20.113 13.824 21.683 8.133 C 21.848 7.582 21.697 6.985 21.29 6.578 C 20.884 6.172 20.287 6.022 19.736 6.187 C 10.659 8.728 4.691 17.389 5.55 26.776 C 6.408 36.163 13.847 43.598 23.235 44.451 C 32.622 45.304 41.28 39.332 43.816 30.253 C 43.902 29.96 43.9 29.647 43.81 29.354 Z\"\r\n           :fill \"currentColor\"\r\n           :initial \"initial\"\r\n           :animate \"animate\"\r\n           :variants {:initial {:scale 0.6 :rotate 90}\r\n                      :animate {:scale 1 :rotate 0 :transition spring}}}]]\r\n        [:> motion/svg\r\n         {:key \"sun\"\r\n          :class \"w-5 h-5 md:w-4 md:h-4\"\r\n          :viewBox \"0 0 24 24\"\r\n          :fill \"none\"\r\n          :xmlns \"http://www.w3.org/2000/svg\"}\r\n         [:> motion/circle\r\n          {:cx \"11.9998\"\r\n           :cy \"11.9998\"\r\n           :r \"5.75375\"\r\n           :fill \"currentColor\"\r\n           :initial \"initial\"\r\n           :animate \"animate\"\r\n           :variants {:initial {:scale 1.5}\r\n                      :animate {:scale 1 :transition spring}}}]\r\n         [:> motion/g\r\n          {:initial \"initial\"\r\n           :animate \"animate\"\r\n           :variants {:initial {:rotate 45}\r\n                      :animate {:rotate 0 :transition spring}}}\r\n          [:circle {:cx \"3.08982\" :cy \"6.85502\" :r \"1.71143\" :transform \"rotate(-60 3.08982 6.85502)\" :fill \"currentColor\"}]\r\n          [:circle {:cx \"3.0903\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-120 3.0903 17.1436)\" :fill \"currentColor\"}]\r\n          [:circle {:cx \"12\" :cy \"22.2881\" :r \"1.71143\" :fill \"currentColor\"}]\r\n          [:circle {:cx \"20.9101\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-60 20.9101 17.1436)\" :fill \"currentColor\"}]\r\n          [:circle {:cx \"20.9101\" :cy \"6.8555\" :r \"1.71143\" :transform \"rotate(-120 20.9101 6.8555)\" :fill \"currentColor\"}]\r\n          [:circle {:cx \"12\" :cy \"1.71143\" :r \"1.71143\" :fill \"currentColor\"}]]])]]))\r\n\r\n(def local-storage-dark-mode-key \"clerk-darkmode\")\r\n\r\n(defn set-dark-mode! [dark-mode?]\r\n  (let [class-list (.-classList (js/document.querySelector \"html\"))]\r\n    (if dark-mode?\r\n      (.add class-list \"dark\")\r\n      (.remove class-list \"dark\")))\r\n  (ls/set-item! local-storage-dark-mode-key dark-mode?))\r\n\r\n(defn setup-dark-mode! [!state]\r\n  (let [{:keys [dark-mode?]} @!state]\r\n    (add-watch !state ::dark-mode\r\n               (fn [_ _ old {:keys [dark-mode?]}]\r\n                 (when (not= (:dark-mode? old) dark-mode?)\r\n                   (set-dark-mode! dark-mode?))))\r\n    (when dark-mode?\r\n      (set-dark-mode! dark-mode?))))\r\n\r\n(defonce !eval-counter (r/atom 0))\r\n\r\n(defn notebook [{:as _doc xs :blocks :keys [toc]}]\r\n  (r/with-let [local-storage-key \"clerk-navbar\"\r\n               !state (r/atom {:toc (toc-items (:children toc))\r\n                               :md-toc toc\r\n                               :dark-mode? (ls/get-item local-storage-dark-mode-key)\r\n                               :theme {:slide-over \"bg-slate-100 dark:bg-gray-800 font-sans border-r dark:border-slate-900\"}\r\n                               :width 220\r\n                               :mobile-width 300\r\n                               :local-storage-key local-storage-key\r\n                               :open? (if-some [stored-open? (ls/get-item local-storage-key)]\r\n                                        stored-open?\r\n                                        (not= :collapsed (:mode toc)))})\r\n               root-ref-fn #(when % (setup-dark-mode! !state))\r\n               ref-fn #(when % (swap! !state assoc :scroll-el %))]\r\n    (let [{:keys [md-toc]} @!state]\r\n      (when-not (= md-toc toc)\r\n        (swap! !state assoc :toc (toc-items (:children toc)) :md-toc toc :open? (not= :collapsed (:mode toc))))\r\n      (html\r\n       [:div.flex\r\n        {:ref root-ref-fn}\r\n        [:div.fixed.top-2.left-2.md:left-auto.md:right-2.z-10\r\n         [dark-mode-toggle !state]]\r\n        (when (and toc (:mode toc))\r\n          [:<>\r\n           [navbar/toggle-button !state\r\n            [:<>\r\n             [icon/menu {:size 20}]\r\n             [:span.uppercase.tracking-wider.ml-1.font-bold\r\n              {:class \"text-[12px]\"} \"ToC\"]]\r\n            {:class \"z-10 fixed right-2 top-2 md:right-auto md:left-3 md:top-3 text-slate-400 font-sans text-xs hover:underline cursor-pointer flex items-center bg-white dark:bg-gray-900 py-1 px-3 md:p-0 rounded-full md:rounded-none border md:border-0 border-slate-200 dark:border-gray-500 shadow md:shadow-none dark:text-slate-400 dark:hover:text-white\"}]\r\n           [navbar/panel !state [navbar/navbar !state]]])\r\n        [:div.flex-auto.h-screen.overflow-y-auto\r\n         {:ref ref-fn}\r\n         [:div.flex.flex-col.items-center.viewer-notebook.flex-auto\r\n          (doall\r\n           (map-indexed (fn [idx x]\r\n                          (let [{viewer-name :name} (viewer/->viewer x)\r\n                                inner-viewer-name (some-> x viewer/->value viewer/->viewer :name)]\r\n                            ^{:key (str idx \"-\" @!eval-counter)}\r\n                            [:div {:class [\"viewer\"\r\n                                           (when viewer-name (str \"viewer-\" (name viewer-name)))\r\n                                           (when inner-viewer-name (str \"viewer-\" (name inner-viewer-name)))\r\n                                           (case (or (viewer/width x) (case viewer-name (:code :code-folded) :wide :prose))\r\n                                             :wide \"w-full max-w-wide\"\r\n                                             :full \"w-full\"\r\n                                             \"w-full max-w-prose px-8\")]}\r\n                             [inspect x]]))\r\n                        xs))]]]))))\r\n\r\n\r\n(defn eval-viewer-fn [eval-f form]\r\n  (try (eval-f form)\r\n       (catch js/Error e\r\n         (throw (ex-info (str \"error in render-fn: \" (.-message e)) {:render-fn form} e)))))\r\n\r\n(defonce !edamame-opts\r\n  (atom {:all true\r\n         :row-key :line\r\n         :col-key :column\r\n         :location? seq?\r\n         :end-location false\r\n         :read-cond :allow\r\n         :readers\r\n         (fn [tag]\r\n           (or (get {'viewer-fn   (partial eval-viewer-fn viewer/->viewer-fn)\r\n                     'viewer-eval (partial eval-viewer-fn *eval*)} tag)\r\n               (fn [value]\r\n                 (with-viewer :tagged-value\r\n                   {:tag tag\r\n                    :space? (not (vector? value))\r\n                    :value (cond-> value\r\n                             (and (vector? value) (number? (second value)))\r\n                             (update 1 (fn [memory-address]\r\n                                         (with-viewer :number-hex memory-address))))}))))\r\n         :features #{:clj}}))\r\n\r\n\r\n(defn ^:export read-string [s]\r\n  (edamame/parse-string s @!edamame-opts))\r\n\r\n(defn opts->query [opts]\r\n  (->> opts\r\n       (map #(update % 0 name))\r\n       (map (partial str/join \"=\"))\r\n       (str/join \"&\")))\r\n\r\n\r\n\r\n#_(opts->query {:s 12 :num 42})\r\n\r\n(defn unreadable-edn-viewer [edn]\r\n  (html [:span.inspected-value.whitespace-nowrap.cmt-default edn]))\r\n\r\n(defn error-badge [& content]\r\n  [:div.bg-red-50.rounded-sm.text-xs.text-red-400.px-2.py-1.items-center.sans-serif.inline-flex\r\n   [:svg.h-4.w-4.text-red-400 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :aria-hidden \"true\"}\r\n    [:path {:fill-rule \"evenodd\" :d \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" :clip-rule \"evenodd\"}]]\r\n   (into [:div.ml-2.font-bold] content)])\r\n\r\n(defn error-view [error]\r\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-300.not-prose\r\n   [:p.font-mono.text-red-600.dark:text-red-300.font-bold (.-message error)]\r\n   [:pre.text-red-600.dark:text-red-300.w-full.overflow-auto.mt-2\r\n    {:class \"text-[11px] max-h-[155px]\"}\r\n    (try\r\n      (->> (.-stack error)\r\n           str/split-lines\r\n           (drop 1)\r\n           (mapv str/trim)\r\n           (str/join \"\\n\"))\r\n      (catch js/Error _ nil))]\r\n   (when-some [data (.-data error)]\r\n     [:div.mt-2 [inspect-paginated data]])])\r\n\r\n(defn error-boundary [!error & _]\r\n  (r/create-class\r\n   {:constructor (fn [_ _])\r\n    :component-did-catch (fn [_ e _info] (reset! !error e))\r\n    :get-derived-state-from-error (fn [e] (reset! !error e) #js {})\r\n    :reagent-render (fn [_error & children]\r\n                      (if-let [error @!error]\r\n                        (error-view error)\r\n                        (into [:<>] children)))}))\r\n\r\n(defn fetch! [{:keys [blob-id]} opts]\r\n  #_(js/console.log :fetch! blob-id opts)\r\n  (-> (js/fetch (str \"_blob/\" blob-id (when (seq opts)\r\n                                        (str \"?\" (opts->query opts)))))\r\n      (.then #(.text %))\r\n      (.then #(try (read-string %)\r\n                   (catch js/Error e\r\n                     (js/console.error #js {:message \"sci read error\" :blob-id blob-id :code-string % :error e })\r\n                     (unreadable-edn-viewer %))))))\r\n\r\n(defn read-result [{:nextjournal/keys [edn string]} !error]\r\n  (if edn\r\n    (try\r\n      (read-string edn)\r\n      (catch js/Error e\r\n        (reset! !error e)))\r\n    (unreadable-edn-viewer string)))\r\n\r\n(defn result-viewer [{:as result :nextjournal/keys [fetch-opts hash]} _opts]\r\n  (html (r/with-let [!hash (atom hash)\r\n                     !error (atom nil)\r\n                     !desc (r/atom (read-result result !error))\r\n                     !fetch-opts (atom fetch-opts)\r\n                     fetch-fn (when @!fetch-opts\r\n                                (fn [opts]\r\n                                  (.then (fetch! @!fetch-opts opts)\r\n                                         (fn [more]\r\n                                           (swap! !desc viewer/merge-presentations more opts)))))\r\n                     !expanded-at (r/atom (get @!desc :nextjournal/expanded-at {}))\r\n                     on-key-down (fn [event]\r\n                                   (if (.-altKey event)\r\n                                     (swap! !expanded-at assoc :prompt-multi-expand? true)\r\n                                     (swap! !expanded-at dissoc :prompt-multi-expand?)))\r\n                     on-key-up #(swap! !expanded-at dissoc :prompt-multi-expand?)\r\n                     ref-fn #(if %\r\n                               (do\r\n                                 (js/document.addEventListener \"keydown\" on-key-down)\r\n                                 (js/document.addEventListener \"keyup\" on-key-up))\r\n                               (do\r\n                                 (js/document.removeEventListener \"keydown\" on-key-down)\r\n                                 (js/document.removeEventListener \"up\" on-key-up)))]\r\n          (when-not (= hash @!hash)\r\n            ;; TODO: simplify\r\n            (reset! !hash hash)\r\n            (reset! !fetch-opts fetch-opts)\r\n            (reset! !desc (read-result result !error))\r\n            (reset! !error nil))\r\n          [view-context/provide {:fetch-fn fetch-fn}\r\n           [error-boundary\r\n            !error\r\n            [:div.relative\r\n             [:div.overflow-x-auto.overflow-y-hidden\r\n              {:ref ref-fn}\r\n              [inspect {:!expanded-at !expanded-at} @!desc]]]]])))\r\n\r\n(defn toggle-expanded [!expanded-at path event]\r\n  (.preventDefault event)\r\n  (.stopPropagation event)\r\n  (let [{:keys [hover-path prompt-multi-expand?]} @!expanded-at\r\n        hover-path-count (count hover-path)\r\n        hover-path-expanded? (get @!expanded-at path)]\r\n    (if (and hover-path prompt-multi-expand? (= (count path) hover-path-count))\r\n      (swap! !expanded-at (fn [expanded-at]\r\n                            (reduce\r\n                              (fn [acc [path expanded?]]\r\n                                (if (and (vector? path) (= (count path) hover-path-count))\r\n                                  (assoc acc path (not hover-path-expanded?))\r\n                                  (assoc acc path expanded?)))\r\n                              {}\r\n                              expanded-at)))\r\n      (swap! !expanded-at update path not))))\r\n\r\n(defn expandable? [xs]\r\n  (< 1 (count xs)))\r\n\r\n\r\n(defn inspect-children [opts]\r\n  ;; TODO: move update function onto viewer\r\n  (map-indexed (fn [idx x]\r\n                 (inspect (update opts :path (fnil conj []) idx) x))))\r\n\r\n(def expand-style\r\n  [\"cursor-pointer\"\r\n   \"bg-indigo-50\"\r\n   \"hover:bg-indigo-100\"\r\n   \"border-b\"\r\n   \"border-gray-400\"\r\n   \"hover:border-gray-500\"\r\n   \"dark:bg-gray-900\"\r\n   \"dark:hover:bg-slate-700\"\r\n   \"dark:border-slate-600\"\r\n   \"dark:hover:border-slate-500\"])\r\n\r\n(defn triangle [expanded?]\r\n  [:svg {:viewBox \"0 0 100 100\"\r\n         :class (str \"w-[7px] h-[7px] fill-current inline-block transition-all mr-[1px] -mt-[2px] \"\r\n                     (if expanded? \"rotate-180\" \"rotate-90\"))}\r\n   [:polygon {:points \"5.9,88.2 50,11.8 94.1,88.2 \"}]])\r\n\r\n(def triangle-spacer [:span {:class \"inline-block w-[8px]\"}])\r\n\r\n(defn expand-button [!expanded-at opening-paren path]\r\n  (let [expanded? (get @!expanded-at path)\r\n        {:keys [hover-path prompt-multi-expand?]} @!expanded-at\r\n        multi-expand? (and hover-path prompt-multi-expand? (= (count path) (count hover-path)))]\r\n    [:span.group.hover:bg-indigo-100.rounded-sm.hover:shadow.cursor-pointer\r\n     {:class (when multi-expand? \"bg-indigo-100 shadow \")\r\n      :on-click (partial toggle-expanded !expanded-at path)\r\n      :on-mouse-enter #(swap! !expanded-at assoc :hover-path path)\r\n      :on-mouse-leave #(swap! !expanded-at dissoc :hover-path)}\r\n     [:span.text-slate-400.group-hover:text-indigo-700\r\n      {:class (when multi-expand? \"text-indigo-700 \")}\r\n      [triangle expanded?]]\r\n     [:span.group-hover:text-indigo-700 opening-paren]]))\r\n\r\n(defn coll-viewer [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\r\n  (html (let [expanded? (get @!expanded-at path)\r\n              {:keys [opening-paren closing-paren]} viewer]\r\n          [:span.inspected-value.whitespace-nowrap\r\n           {:class (when expanded? \"inline-flex\")}\r\n           [:span\r\n            (if (< 1 (count xs))\r\n              [expand-button !expanded-at opening-paren path]\r\n              [:span opening-paren])\r\n            (into [:<>]\r\n                  (comp (inspect-children opts)\r\n                        (interpose (if expanded? [:<> [:br] triangle-spacer nbsp (when (= 2 (count opening-paren)) nbsp)] \" \")))\r\n                  xs)\r\n            [:span\r\n             (cond->> closing-paren (list? closing-paren) (into [:<>]))]]])))\r\n\r\n(dc/defcard coll-viewer\r\n  (into [:div]\r\n        (for [coll [\r\n                    {:foo (into #{} (range 3))}\r\n                    {:foo {:bar (range 1000)}}\r\n                    [1 [2]]\r\n                    [[1] 2]\r\n                    {:a \"bar\"  :c (range 10)}\r\n                    {:a \"bar\"  :c (range 10) :d 1}\r\n                    ]]\r\n          [:div.mb-3.result-viewer\r\n           [inspect-paginated coll]])))\r\n\r\n(dc/defcard coll-viewer-simple\r\n  \"with a simple `inspect` and no `present` we don't move closing parens to children\"\r\n  (into [:div]\r\n        (for [coll [\r\n                    {:foo (into #{} (range 3))}\r\n                    {:foo {:bar (range 20)}}\r\n                    [1 [2]]\r\n                    [[1] 2]\r\n                    {:a \"bar\"  :c (range 10)}\r\n                    {:a \"bar\"  :c (range 10) :d 1}\r\n                    ]]\r\n          [:div.mb-3.result-viewer\r\n           [inspect-paginated coll]])))\r\n\r\n(defn elision-viewer [{:as fetch-opts :keys [total offset unbounded?]} _]\r\n  (html [view-context/consume :fetch-fn\r\n         (fn [fetch-fn]\r\n           [:span.sans-serif.relative.whitespace-nowrap\r\n            {:style {:border-radius 2 :padding (when (fn? fetch-fn) \"1px 3px\") :font-size 11 :top -1}\r\n             :class (if (fn? fetch-fn)\r\n                      \"cursor-pointer bg-indigo-200 hover:bg-indigo-300 dark:bg-gray-700 dark:hover:bg-slate-600 text-gray-900 dark:text-white\"\r\n                      \"text-gray-400 dark:text-slate-300\")\r\n             :on-click #(when (fn? fetch-fn)\r\n                          (fetch-fn fetch-opts))} (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")])]))\r\n\r\n(defn map-viewer [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\r\n  (html (let [expanded? (get @!expanded-at path)\r\n              {:keys [closing-paren]} viewer]\r\n          [:span.inspected-value.whitespace-nowrap\r\n           {:class (when expanded? \"inline-flex\")}\r\n           [:span\r\n            (if (expandable? xs)\r\n              [expand-button !expanded-at \"{\" path]\r\n              [:span \"{\"])\r\n            (into [:<>]\r\n                  (comp (inspect-children opts)\r\n                        (interpose (if expanded? [:<> [:br] triangle-spacer nbsp #_(repeat (inc (count path)) nbsp)] \" \")))\r\n                  xs)\r\n            (cond->> closing-paren (list? closing-paren) (into [:<>]))]])))\r\n\r\n(defn string-viewer [s {:as opts :keys [path !expanded-at] :or {path []}}]\r\n  (html\r\n   (let [expanded? (get @!expanded-at path)]\r\n     (into [:span {:class (when expanded? \"whitespace-pre\")}]\r\n           (map #(if (string? %)\r\n                   (if expanded?\r\n                     (into [:<>] (interpose [:<> \"\\n \" triangle-spacer] (str/split-lines %)))\r\n                     (into [:<>] (interpose [:span.text-slate-400 \"\u21a9\ufe0e\"] (str/split-lines %))))\r\n                   (inspect opts %)))\r\n           (if (string? s) [s] s)))))\r\n\r\n(defn quoted-string-viewer [s {:as opts :keys [path !expanded-at] :or {path []}}]\r\n  (html [:span.cmt-string.inspected-value.whitespace-nowrap\r\n         (if (some #(and (string? %) (str/includes? % \"\\n\")) (if (string? s) [s] s))\r\n           [expand-button !expanded-at \"\\\"\" path]\r\n           [:span \"\\\"\"])\r\n         (viewer/->value (string-viewer s opts)) \"\\\"\"]))\r\n\r\n(defn number-viewer [num]\r\n  (html [:span.cmt-number.inspected-value\r\n         (if (js/Number.isNaN num) \"NaN\" (str num))]))\r\n\r\n(defn sort! [!sort i k]\r\n  (let [{:keys [sort-key sort-order]} @!sort]\r\n    (reset! !sort {:sort-index i\r\n                   :sort-key k\r\n                   :sort-order (if (= sort-key k) (if (= sort-order :asc) :desc :asc) :asc)})))\r\n\r\n(defn sort-data [{:keys [sort-index sort-order]} {:as data :keys [head rows]}]\r\n  (cond-> data\r\n    head (assoc :rows (->> rows\r\n                           (sort-by #(cond-> (get % sort-index)\r\n                                       (string? val) str/lower-case)\r\n                                    (if (= sort-order :asc) #(compare %1 %2) #(compare %2 %1)))\r\n                           vec))))\r\n\r\n(def x-icon\r\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\r\n   [:path {:fill-rule \"evenodd\" :d \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\r\n\r\n(def check-icon\r\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\r\n   [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" :clip-rule \"evenodd\"}]])\r\n\r\n(defn table-error [[data]]\r\n  ;; currently boxing the value in a vector to retain the type info\r\n  ;; TODO: find a better way to do this\r\n  (html\r\n   [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-400.not-prose\r\n    [:h4.mt-0.uppercase.text-xs.dark:text-red-400.tracking-wide \"Table Error\"]\r\n    [:p.mt-4.font-medium \"Clerk\u2019s table viewer does not recognize the format of your data:\"]\r\n    [:div.mt-2.flex\r\n     [:div.text-red-500.mr-2 x-icon]\r\n     [inspect data]]\r\n    [:p.mt-4.font-medium \"Currently, the following formats are supported:\"]\r\n    [:div.mt-2.flex.items-center\r\n     [:div.text-green-500.mr-2 check-icon]\r\n     [inspect-paginated {:column-1 [1 2]\r\n                         :column-2 [3 4]}]]\r\n    [:div.mt-2.flex.items-center\r\n     [:div.text-green-500.mr-2 check-icon]\r\n     [inspect-paginated [{:column-1 1 :column-2 3} {:column-1 2 :column-2 4}]]]\r\n    [:div.mt-2.flex.items-center\r\n     [:div.text-green-500.mr-2 check-icon]\r\n     [inspect-paginated [[1 3] [2 4]]]]\r\n    [:div.mt-2.flex.items-center\r\n     [:div.text-green-500.mr-2 check-icon]\r\n     [inspect-paginated {:head [:column-1 :column-2]\r\n                         :rows [[1 3] [2 4]]}]]]))\r\n\r\n\r\n(defn throwable-viewer [{:keys [via trace]}]\r\n  (html\r\n   [:div.w-screen.h-screen.overflow-y-auto.bg-gray-100.p-6.text-xs.monospace.flex.flex-col.not-prose\r\n    [:div.rounded-md.shadow-lg.border.border-gray-300.bg-white.max-w-6xl.mx-auto\r\n     (into\r\n      [:div]\r\n      (map\r\n       (fn [{:as _ex :keys [type message data _trace]}]\r\n         [:div.p-4.bg-red-100.border-b.border-gray-300.rounded-t-md\r\n          [:div.font-bold \"Unhandled \" type]\r\n          [:div.font-bold.mt-1 message]\r\n          [:div.mt-1 (pr-str data)]])\r\n       via))\r\n     [:div.py-6\r\n      [:table.w-full\r\n       (into [:tbody]\r\n             (map (fn [[call _x file line]]\r\n                    [:tr.hover:bg-red-100.leading-tight\r\n                     [:td.text-right.px-6 file \":\"]\r\n                     [:td.text-right.pr-6 line]\r\n                     [:td.py-1.pr-6 call]]))\r\n             trace)]]]]))\r\n\r\n(defn tagged-value\r\n  ([tag value] (tagged-value {:space? true} tag value))\r\n  ([{:keys [space?]} tag value]\r\n   [:span.inspected-value.whitespace-nowrap\r\n    [:span.cmt-meta tag] (when space? nbsp) value]))\r\n\r\n(defn normalize-viewer-meta [x]\r\n  (if-let [viewer (-> x meta :nextjournal/viewer)]\r\n    (with-viewer ({:html html-viewer\r\n                   :reagent reagent-viewer} viewer viewer) x)\r\n    x))\r\n\r\n(def js-viewers\r\n  [{:pred #(implements? IDeref %) :render-fn #(tagged-value (-> %1 type pr-str) (inspect (deref %1) %2))}\r\n   {:pred goog/isObject :render-fn js-object-viewer}\r\n   {:pred array? :render-fn (partial coll-viewer {:open [:<> [:span.cmt-meta \"#js \"] \"[\"] :close \"]\"})}])\r\n\r\n\r\n(defonce !doc (ratom/atom nil))\r\n(defonce !error (ratom/atom nil))\r\n(defonce !viewers viewer/!viewers)\r\n\r\n(defn set-viewers! [scope viewers]\r\n  #_(js/console.log :set-viewers! {:scope scope :viewers viewers})\r\n  (swap! !viewers assoc scope (vec viewers))\r\n  'set-viewers!)\r\n\r\n(declare default-viewers)\r\n\r\n(defn render-with-viewer [opts viewer value]\r\n  #_(js/console.log :render-with-viewer {:value value :viewer viewer :opts opts})\r\n  (cond (or (fn? viewer) (viewer/viewer-fn? viewer))\r\n        (viewer value opts)\r\n\r\n        (and (map? viewer) (:render-fn viewer))\r\n        (render-with-viewer opts (:render-fn viewer) value)\r\n\r\n        #_#_ ;; TODO: maybe bring this back\r\n        (keyword? viewer)\r\n        (if-let [{:keys [fetch-opts render-fn]} (viewer/find-named-viewer viewers viewer)]\r\n          (if-not render-fn\r\n            (html (error-badge \"no render function for viewer named \" (str viewer)))\r\n            (render-fn value (assoc opts :fetch-opts fetch-opts)))\r\n          (html (error-badge \"cannot find viewer named \" (str viewer))))\r\n\r\n        :else\r\n        (html (error-badge \"unusable viewer `\" (pr-str viewer) \"`, value `\" (pr-str value) \"`\"))))\r\n\r\n(defn inspect\r\n  ([x]\r\n   (r/with-let [!expanded-at (r/atom (:nextjournal/expanded-at x))]\r\n     [inspect {:!expanded-at !expanded-at} x]))\r\n  ([opts x]\r\n   (if (react/isValidElement x)\r\n     x\r\n     (let [value (viewer/->value x)\r\n           viewer (viewer/->viewer x)]\r\n       #_(prn :inspect value :valid-element? (react/isValidElement value) :viewer (viewer/->viewer x))\r\n       (inspect opts (render-with-viewer (merge opts {:viewer viewer} (:nextjournal/opts x)) viewer value))))))\r\n\r\n(defn in-process-fetch [value opts]\r\n  (.resolve js/Promise (viewer/present value opts)))\r\n\r\n(defn inspect-paginated [value]\r\n  (r/with-let [!state (r/atom nil)]\r\n    (when (not= (:value @!state) value)\r\n      (swap! !state assoc :value value :desc (viewer/present value)))\r\n    [view-context/provide {:fetch-fn (fn [fetch-opts]\r\n                                       (.then (in-process-fetch value fetch-opts)\r\n                                              (fn [more]\r\n                                                (swap! !state update :desc viewer/merge-presentations more))))}\r\n     [inspect (:desc @!state)]]))\r\n\r\n(dc/defcard inspect-paginated-one\r\n  []\r\n  [:div\r\n   (when-let [value @(rf/subscribe [::blobs :map-1])]\r\n     [inspect-paginated value])]\r\n  {::blobs {:vector (vec (range 30))\r\n            :vector-nested [1 [2] 3]\r\n            :vector-nested-taco '[l [l [l [l [\ud83c\udf2e] r] r] r] r]\r\n            :list (range 30)\r\n            :recursive-range (map range (range 100))\r\n            :map-1 {:hello :world}\r\n            :map-vec-val {:hello [:world]}\r\n            :map (zipmap (range 30) (range 30))}})\r\n\r\n(dc/defcard inspect-paginated-more\r\n  \"In process inspect based on description.\"\r\n  []\r\n  [:div\r\n   (map (fn [[blob-id xs]]\r\n          ^{:key blob-id}\r\n          [:div\r\n           [inspect-paginated xs]])\r\n        @(rf/subscribe [::blobs]))]\r\n  {::blobs (hash-map (random-uuid) (vec (range 30))\r\n                     (random-uuid) (range 40)\r\n                     (random-uuid) (zipmap (range 50) (range 50)))})\r\n\r\n(rf/reg-sub ::blobs\r\n            (fn [db [blob-key id]]\r\n              (cond-> (get db blob-key)\r\n                id (get id))))\r\n\r\n(dc/defcard inspect-values\r\n  (into [:div]\r\n        (for [value [123\r\n                     ##NaN\r\n                     'symbol\r\n                     ::keyword\r\n                     \"a string\"\r\n                     nil\r\n                     true\r\n                     false\r\n                     {:some \"map\"}\r\n                     #{:a :set}\r\n                     '[vector of symbols]\r\n                     '(:list :of :keywords)\r\n                     #_#_#js {:js \"object\"}\r\n                     #js [\"a\" \"js\" \"array\"]\r\n                     #_(js/Date.)\r\n                     (random-uuid)\r\n                     (fn a-function [_foo])\r\n                     #_#_#_#_\r\n                     (atom \"an atom\")\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Atom 0x2c42b421 {:status :ready, :val 1}]\r\n                     ^{:nextjournal/tag 'var} ['user/a {:foo :bar}]\r\n                     ^{:nextjournal/tag 'object} ['clojure.lang.Ref 0x73aff8f1 {:status :ready, :val 1}]]]\r\n          [:div.mb-3.result-viewer\r\n           [:pre [:code.inspected-value (binding [*print-meta* true] (pr-str value))]] [:span.inspected-value \" => \"]\r\n           [inspect-paginated value]])))\r\n\r\n\r\n(declare inspect)\r\n\r\n;; TODO\r\n#_\r\n(dc/defcard viewer-reagent-atom\r\n  [inspect (r/atom {:hello :world})])\r\n\r\n#_ ;; commented out because recursive window prop will cause a loop\r\n(dc/defcard viewer-js-window []\r\n  [inspect js/window])\r\n\r\n(dc/defcard viewer-vega-lite\r\n  [inspect-paginated\r\n   (vl {:width 650\r\n        :height 400\r\n        :data\r\n        {:url \"https://vega.github.io/vega-datasets/data/us-10m.json\"\r\n         :format\r\n         {:type \"topojson\" :feature \"counties\"}}\r\n        :transform\r\n        [{:lookup \"id\"\r\n          :from\r\n          {:data {:url \"https://vega.github.io/vega-datasets/data/unemployment.tsv\"}\r\n           :key \"id\"\r\n           :fields [\"rate\"]}}]\r\n        :projection {:type \"albersUsa\"}\r\n        :mark \"geoshape\"\r\n        :encoding\r\n        {:color {:field \"rate\" :type \"quantitative\"}}})])\r\n\r\n(dc/defcard viewer-plolty\r\n  [inspect-paginated\r\n   (plotly\r\n    {:data [{:y (shuffle (range 10)) :name \"The Federation\"}\r\n            {:y (shuffle (range 10)) :name \"The Empire\"}]})])\r\n\r\n(dc/defcard viewer-latex\r\n  [inspect-paginated (tex \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")])\r\n\r\n(dc/defcard viewer-mathjax\r\n  [inspect-paginated\r\n   (with-viewer :mathjax\r\n     \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")])\r\n\r\n(dc/defcard viewer-markdown\r\n  [inspect-paginated (md \"### Hello Markdown\\n\\n* a bullet point\")])\r\n\r\n(dc/defcard viewer-code\r\n  [inspect-paginated (code \"(defn the-answer\r\n  \\\"to all questions\\\"\r\n  []\r\n  (inc #_ #readme/as :ignore 41)\")])\r\n\r\n(dc/defcard viewer-hiccup\r\n  [inspect (html [:h1 \"Hello Hiccup \ud83d\udc4b\"])])\r\n\r\n(dc/defcard viewer-reagent-component\r\n  \"A simple counter component in reagent using `reagent.core/with-let`.\"\r\n  [inspect-paginated\r\n   (with-viewer :reagent\r\n     (fn []\r\n       (r/with-let [c (r/atom 0)]\r\n         [:<>\r\n          [:h2 \"Count: \" @c]\r\n          [:button.rounded.bg-blue-500.text-white.py-2.px-4.font-bold.mr-2 {:on-click #(swap! c inc)} \"increment\"]\r\n          [:button.rounded.bg-blue-500.text-white.py-2.px-4.font-bold {:on-click #(swap! c dec)} \"decrement\"]])))])\r\n\r\n;; TODO add svg viewer\r\n\r\n(dc/defcard progress-bar\r\n  \"Show how to use a function as a viewer, supports both one and two artity versions.\"\r\n  [:div\r\n   [inspect (with-viewer\r\n              #(html\r\n                [:div.relative.pt-1\r\n                 [:div.overflow-hidden.h-2.mb-4-text-xs.flex.rounded.bg-blue-200\r\n                  [:div.shadow-none.flex.flex-col.text-center.whitespace-nowrap.text-white.bg-blue-500\r\n                   {:style {:width (-> %\r\n                                       (* 100)\r\n                                       int\r\n                                       (max 0)\r\n                                       (min 100)\r\n                                       (str \"%\"))}}]]])\r\n              0.33)]\r\n   [inspect (with-viewer\r\n              (fn [v _opts] (html\r\n                             [:div.relative.pt-1\r\n                              [:div.overflow-hidden.h-2.mb-4-text-xs.flex.rounded.bg-blue-200\r\n                               [:div.shadow-none.flex.flex-col.text-center.whitespace-nowrap.text-white.bg-blue-500\r\n                                {:style {:width (-> v\r\n                                                    (* 100)\r\n                                                    int\r\n                                                    (max 0)\r\n                                                    (min 100)\r\n                                                    (str \"%\"))}}]]]))\r\n              0.35)]])\r\n\r\n\r\n\r\n(defn root []\r\n  [:<>\r\n   [inspect @!doc]\r\n   (when @!error\r\n     [:div.fixed.top-0.left-0.w-full.h-full\r\n      [inspect @!error]])])\r\n\r\n(declare mount)\r\n\r\n(defn ^:export set-state [{:as state :keys [doc error remount?]}]\r\n  (when remount?\r\n    (swap! !eval-counter inc))\r\n  (when (contains? state :doc)\r\n    (reset! !doc doc))\r\n  (reset! !error error)\r\n  (when-some [title (-> doc viewer/->value :title)]\r\n    (set! (.-title js/document) title)))\r\n\r\n(dc/defcard eval-viewer\r\n  \"Viewers that are lists are evaluated using sci.\"\r\n  [inspect (with-viewer (viewer/->viewer-fn '(fn [x] (v/html [:h3 \"Ohai, \" x \"! \ud83d\udc4b\"]))) \"Hans\")])\r\n\r\n(dc/defcard notebook\r\n  \"Shows how to display a notebook document\"\r\n  [doc]\r\n  [inspect-paginated (with-viewer :clerk/notebook @doc)]\r\n  {::dc/class \"p-0\"\r\n   ::dc/state\r\n   {:blocks\r\n    (map viewer/inspect-wrapped-value\r\n         [(with-viewer :markdown \"# Hello Markdown\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum velit nulla, sodales eu lorem ut, tincidunt consectetur diam. Donec in scelerisque risus. Suspendisse potenti. Nunc non hendrerit odio, at malesuada erat. Aenean rutrum quam sed velit mollis imperdiet. Sed lacinia quam eget tempor tempus. Mauris et leo ac odio condimentum facilisis eu sed nibh. Morbi sed est sit amet risus blandit ullam corper. Pellentesque nisi metus, feugiat sed velit ut, dignissim finibus urna.\")\r\n          (code \"(shuffle (range 10))\")\r\n          (with-viewer :clerk/code-block {:text \"(+ 1 2 3)\"})\r\n          (md \"# And some more\\n And some more [markdown](https://daringfireball.net/projects/markdown/).\")\r\n          (code \"(shuffle (range 10))\")\r\n          (md \"## Some math \\n This is a formula.\")\r\n          (tex \"G_{\\\\mu\\\\nu}\\\\equiv R_{\\\\mu\\\\nu} - {\\\\textstyle 1 \\\\over 2}R\\\\,g_{\\\\mu\\\\nu} = {8 \\\\pi G \\\\over c^4} T_{\\\\mu\\\\nu}\")\r\n          (plotly {:data [{:y (shuffle (range 10)) :name \"The Federation\"}\r\n                          {:y (shuffle (range 10)) :name \"The Empire\"}]})])}})\r\n\r\n(def ^:dynamic *viewers* nil)\r\n\r\n(dc/defcard inspect-rule-30-sci\r\n  []\r\n  [inspect-paginated\r\n   (viewer/with-viewers\r\n    [{:pred number?\r\n      :render-fn (viewer/->viewer-fn '#(v/html [:div.inline-block {:style {:width 16 :height 16}\r\n                                                                   :class (if (pos? %) \"bg-black\" \"bg-white border-solid border-2 border-\r\nblack\")}]))}\r\n     {:pred vector? :render-fn (viewer/->viewer-fn '#(v/html (into [:div.flex.inline-flex] (v/inspect-children %2) %1)))}\r\n     {:pred list? :render-fn (viewer/->viewer-fn '#(v/html (into [:div.flex.flex-col] (v/inspect-children %2) %1)))}]\r\n    '([0 1 0] [1 0 1]))])\r\n\r\n(dc/defcard clj-long\r\n  []\r\n  [inspect-paginated\r\n   '({:verts [[-0.5 -0.5] [0.5 -0.5] [0.5 0.5] [-0.5 0.5]],\r\n      :invert? true}\r\n     {:verts\r\n      [[-0.32999999999999996 -0.5]\r\n       [-0.3383203922298239 -0.44746711095625896]\r\n       [-0.36246711095625894 -0.40007650711027953]\r\n       [-0.40007650711027953 -0.36246711095625894]\r\n       [-0.4474671109562589 -0.3383203922298239]\r\n       [-0.5 -0.32999999999999996]\r\n       [-0.5525328890437411 -0.3383203922298239]\r\n       [-0.5999234928897205 -0.36246711095625894]\r\n       [-0.6375328890437411 -0.40007650711027953]\r\n       [-0.6616796077701761 -0.4474671109562589]\r\n       [-0.67 -0.5]\r\n       [-0.6616796077701761 -0.5525328890437411]\r\n       [-0.6375328890437411 -0.5999234928897205]\r\n       [-0.5999234928897205 -0.6375328890437411]\r\n       [-0.5525328890437411 -0.6616796077701761]\r\n       [-0.5 -0.67]\r\n       [-0.44746711095625896 -0.6616796077701761]\r\n       [-0.4000765071102796 -0.6375328890437411]\r\n       [-0.36246711095625894 -0.5999234928897205]\r\n       [-0.3383203922298239 -0.5525328890437411]],\r\n      :invert? true}\r\n     {:verts\r\n      [[0.67 0.5]\r\n       [0.6616796077701761 0.5525328890437411]\r\n       [0.6375328890437411 0.5999234928897205]\r\n       [0.5999234928897205 0.6375328890437411]\r\n       [0.5525328890437411 0.6616796077701761]\r\n       [0.5 0.67]\r\n       [0.44746711095625896 0.6616796077701761]\r\n       [0.4000765071102796 0.6375328890437411]\r\n       [0.36246711095625894 0.5999234928897205]\r\n       [0.3383203922298239 0.5525328890437411]\r\n       [0.32999999999999996 0.5]\r\n       [0.3383203922298239 0.4474671109562589]\r\n       [0.36246711095625894 0.4000765071102796]\r\n       [0.40007650711027953 0.36246711095625894]\r\n       [0.4474671109562589 0.3383203922298239]\r\n       [0.49999999999999994 0.32999999999999996]\r\n       [0.552532889043741 0.3383203922298239]\r\n       [0.5999234928897204 0.36246711095625894]\r\n       [0.6375328890437411 0.40007650711027953]\r\n       [0.6616796077701761 0.4474671109562589]],\r\n      :invert? true}\r\n     {:verts\r\n      [[-0.32999999999999996 0.5]\r\n       [-0.3383203922298239 0.5525328890437411]\r\n       [-0.36246711095625894 0.5999234928897205]\r\n       [-0.40007650711027953 0.6375328890437411]\r\n       [-0.4474671109562589 0.6616796077701761]\r\n       [-0.5 0.67]\r\n       [-0.5525328890437411 0.6616796077701761]\r\n       [-0.5999234928897205 0.6375328890437411]\r\n       [-0.6375328890437411 0.5999234928897205]\r\n       [-0.6616796077701761 0.5525328890437411]\r\n       [-0.67 0.5]\r\n       [-0.6616796077701761 0.4474671109562589]\r\n       [-0.6375328890437411 0.4000765071102796]\r\n       [-0.5999234928897205 0.36246711095625894]\r\n       [-0.5525328890437411 0.3383203922298239]\r\n       [-0.5 0.32999999999999996]\r\n       [-0.44746711095625896 0.3383203922298239]\r\n       [-0.4000765071102796 0.36246711095625894]\r\n       [-0.36246711095625894 0.40007650711027953]\r\n       [-0.3383203922298239 0.4474671109562589]],\r\n      :invert? true}\r\n     {:verts\r\n      [[0.67 -0.5]\r\n       [0.6616796077701761 -0.44746711095625896]\r\n       [0.6375328890437411 -0.40007650711027953]\r\n       [0.5999234928897205 -0.36246711095625894]\r\n       [0.5525328890437411 -0.3383203922298239]\r\n       [0.5 -0.32999999999999996]\r\n       [0.44746711095625896 -0.3383203922298239]\r\n       [0.4000765071102796 -0.36246711095625894]\r\n       [0.36246711095625894 -0.40007650711027953]\r\n       [0.3383203922298239 -0.4474671109562589]\r\n       [0.32999999999999996 -0.5]\r\n       [0.3383203922298239 -0.5525328890437411]\r\n       [0.36246711095625894 -0.5999234928897205]\r\n       [0.40007650711027953 -0.6375328890437411]\r\n       [0.4474671109562589 -0.6616796077701761]\r\n       [0.49999999999999994 -0.67]\r\n       [0.552532889043741 -0.6616796077701761]\r\n       [0.5999234928897204 -0.6375328890437411]\r\n       [0.6375328890437411 -0.5999234928897205]\r\n       [0.6616796077701761 -0.5525328890437411]],\r\n      :invert? true})])\r\n\r\n\r\n(dc/defcard clj-small\r\n  []\r\n  (let [x '({:verts [[-0.5 -0.5] [0.5 -0.5] [0.5 0.5] [-0.5 0.5]],\r\n             :invert? true}\r\n            {:verts\r\n             [[0.67 -0.5]\r\n              [0.6616796077701761 -0.44746711095625896]\r\n              [0.6375328890437411 -0.40007650711027953]],\r\n             :invert? true})\r\n        y '({:verts [[-0.5 -0.5] [0.5 -0.5] [0.5 0.5] [-0.5 0.5]],\r\n             :invert? true})]\r\n    [:<>\r\n     [:div.mb-4\r\n      [inspect-paginated '{1 \u25cf 2 \u25a0 3 \u25b2}]]\r\n     [:div.mb-4\r\n      [inspect-paginated {[[[[1 2]]]] [1 2]}]]\r\n\r\n     [:div\r\n      {:style {:margin-right -12}}\r\n      [:div.mb-4.overflow-x-hidden\r\n       [inspect-paginated x]]]]))\r\n\r\n(defn ^:export ^:dev/after-load mount []\r\n  (when-let [el (js/document.getElementById \"clerk\")]\r\n    #_(rdom/unmount-component-at-node el)\r\n    (rdom/render [root] el)))\r\n\r\n(dc/defcard table [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state [[1 2 \"ab\"]\r\n               [4 5 \"cd\"]]})\r\n\r\n(dc/defcard table-incomplete [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state [[1 2 3]\r\n               [4]]})\r\n\r\n(dc/defcard table-col-headers [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state {:a [1 2 3]\r\n               :b [4 5 6]}})\r\n\r\n(dc/defcard table-col-headers-incomplete [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state {:a [1 2 3]\r\n               :b [4]}})\r\n\r\n(dc/defcard table-row-headers [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state [{:a 1 :b 2 :c 3}\r\n               {:a 4 :b 5 :c 6}]})\r\n\r\n(dc/defcard table-row-headers-incomplete [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state [{:a 1 :b 2 :c 3}\r\n               {:a 4}]})\r\n\r\n(dc/defcard table-error [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state #{1 2 3 4}})\r\n\r\n(dc/when-enabled\r\n (defn rand-int-seq [n to]\r\n   (take n (repeatedly #(rand-int to)))))\r\n\r\n(declare lazy-inspect-in-process)\r\n\r\n(dc/defcard table-long [state]\r\n  [inspect-paginated (with-viewer :table @state)]\r\n  {::dc/state (let [n 20]\r\n                {:species (repeat n \"Adelie\")\r\n                 :island (repeat n \"Biscoe\")\r\n                 :culmen-length-mm (rand-int-seq n 50)\r\n                 :culmen-depth-mm (rand-int-seq n 30)\r\n                 :flipper-length-mm (rand-int-seq n 200)\r\n                 :body-mass-g (rand-int-seq n 5000)\r\n                 :sex (take n (repeatedly #(rand-nth [:female :male])))})})\r\n\r\n(dc/defcard table-elided-string [state]\r\n  [inspect-paginated (viewer/table @state)]\r\n  {::dc/state (repeat 3 (map (comp str/join (partial repeat 200)) [\"a\" \"b\" \"c\"]))})\r\n\r\n(dc/defcard table-paginated-map-of-seq [state]\r\n  [:div\r\n   (when-let [xs @(rf/subscribe [::blobs])]\r\n     [inspect-paginated (viewer/table xs)])]\r\n  {::blobs (let [n 60]\r\n             {:species (repeat n \"Adelie\")\r\n              :island (repeat n \"Biscoe\")\r\n              :culmen-length-mm (rand-int-seq n 50)\r\n              :culmen-depth-mm (rand-int-seq n 30)\r\n              :flipper-length-mm (rand-int-seq n 200)\r\n              :body-mass-g (rand-int-seq n 5000)\r\n              :sex (take n (repeatedly #(rand-nth [:female :male])))})})\r\n\r\n(dc/defcard table-paginated-vec [state]\r\n  [:div\r\n   (when-let [xs @(rf/subscribe [::blobs])]\r\n     [inspect-paginated (viewer/table xs)])]\r\n  {::blobs (mapv  #(conj %2 (str \"#\" (inc %1))) (range) (repeat 60 [\"Adelie\" \"Biscoe\" 50 30 200 5000 :female]))})\r\n\r\n(defn find-named-viewer [viewers viewer-name]\r\n  (get (into {} (map (juxt :name identity)) viewers) viewer-name))\r\n\r\n(defn clerk-eval [form]\r\n  (.ws_send ^js goog/global (pr-str form)))\r\n\r\n(defn katex-viewer [tex-string {:keys [inline?]}]\r\n  (html (katex/to-html-string tex-string (j/obj :displayMode (not inline?)))))\r\n\r\n(defn html-render [markup]\r\n  (r/as-element\r\n   (if (string? markup)\r\n     [:span {:dangerouslySetInnerHTML {:__html markup}}]\r\n     markup)))\r\n\r\n(def html-viewer\r\n  {:render-fn html-render})\r\n\r\n(def html\r\n  (partial with-viewer html-viewer))\r\n\r\n(defn reagent-viewer [x]\r\n  (r/as-element (cond-> x (fn? x) vector)))\r\n\r\n(def mathjax-viewer (comp normalize-viewer-meta mathjax/viewer))\r\n(def code-viewer (comp normalize-viewer-meta code/viewer))\r\n(def plotly-viewer (comp normalize-viewer-meta plotly/viewer))\r\n(def vega-lite-viewer (comp normalize-viewer-meta vega-lite/viewer))\r\n\r\n(def expand-icon\r\n  [:svg {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :width 12 :height 12}\r\n   [:path {:fill-rule \"evenodd\" :d \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\r\n\r\n(defn foldable-code-viewer [code-string]\r\n  (r/with-let [!hidden? (r/atom true)]\r\n    (html (if @!hidden?\r\n            [:div.w-full.max-w-wide.sans-serif {:style {:background \"var(--gray-panel-color)\"}}\r\n             [:button.mx-auto.flex.items-center.rounded-sm.cursor-pointer.bg-indigo-200.hover:bg-indigo-300.leading-none\r\n              {:style {:font-size \"11px\" :padding \"1px 3px\"}\r\n               :on-click #(swap! !hidden? not)}\r\n              expand-icon \" Show code\u2026\"]]\r\n            [:div.viewer-code.relative {:style {:margin-top 0}}\r\n             [inspect (code-viewer code-string)]\r\n             [:button.sans-serif.mx-auto.flex.items-center.rounded-t-sm.cursor-pointer.bg-indigo-200.hover:bg-indigo-300.leading-none.absolute.bottom-0\r\n              {:style {:font-size \"11px\" :padding \"1px 3px\" :left \"50%\" :transform \"translateX(-50%)\"}\r\n               :on-click #(swap! !hidden? not)}\r\n              [:span {:style {:transform \"rotate(180deg)\"}} expand-icon] \" Hide code\u2026\"]]))))\r\n\r\n\r\n(defn url-for [{:as src :keys [blob-id]}]\r\n  (if (string? src)\r\n    src\r\n    (str \"/_blob/\" blob-id (when-let [opts (seq (dissoc src :blob-id))]\r\n                             (str \"?\" (opts->query opts))))))\r\n\r\n(def ^{:doc \"Stub implementation to be replaced during static site generation. Clerk is only serving one page currently.\"}\r\n  doc-url\r\n  (sci/new-var 'doc-url (fn [x] (str \"#\" x))))\r\n\r\n(dc/defcard inspected-sci-var [inspect-paginated (var doc-url)])\r\n\r\n(def sci-viewer-namespace\r\n  {'inspect inspect\r\n   'inspect-paginated inspect-paginated\r\n   'result-viewer result-viewer\r\n   'coll-viewer coll-viewer\r\n   'map-viewer map-viewer\r\n   'elision-viewer elision-viewer\r\n   'tagged-value tagged-value\r\n   'inspect-children inspect-children\r\n   'set-viewers! set-viewers!\r\n   'string-viewer string-viewer\r\n   'quoted-string-viewer quoted-string-viewer\r\n   'number-viewer number-viewer\r\n   'table-error table-error\r\n   'with-d3-require d3-require/with\r\n   'clerk-eval clerk-eval\r\n   'consume-view-context view-context/consume\r\n\r\n   'throwable-viewer throwable-viewer\r\n   'notebook-viewer notebook\r\n   'katex-viewer katex-viewer\r\n   'mathjax-viewer mathjax-viewer\r\n   'code-viewer code-viewer\r\n   'foldable-code-viewer foldable-code-viewer\r\n   'plotly-viewer plotly-viewer\r\n   'vega-lite-viewer vega-lite-viewer\r\n   'reagent-viewer reagent-viewer\r\n   'unreadable-edn-viewer unreadable-edn-viewer\r\n\r\n   'doc-url doc-url\r\n   'url-for url-for\r\n   'read-string read-string\r\n\r\n   ;; clerk viewer API\r\n   'code code\r\n   'col col\r\n   'html html-render\r\n   'md md\r\n   'plotly plotly\r\n   'row row\r\n   'table table\r\n   'tex tex\r\n   'vl vl\r\n   'with-viewer with-viewer\r\n   'with-viewers with-viewers})\r\n\r\n(defonce !sci-ctx\r\n  (atom (sci/init {:async? true\r\n                   :disable-arity-checks true\r\n                   :classes {'js goog/global\r\n                             'framer-motion framer-motion\r\n                             :allow :all}\r\n                   :aliases {'j 'applied-science.js-interop\r\n                             'reagent 'reagent.core\r\n                             'v 'nextjournal.clerk.sci-viewer}\r\n                   :namespaces (merge {'nextjournal.clerk.sci-viewer sci-viewer-namespace}\r\n                                      sci.configs.js-interop/namespaces\r\n                                      sci.configs.reagent/namespaces)})))\r\n\r\n(defn eval-form [f]\r\n  (sci/eval-form @!sci-ctx f))\r\n\r\n(set! *eval* eval-form)\r\n\r\n(swap! viewer/!viewers (fn [viewers]\r\n                         (-> (into {} (map (juxt key (comp #(into [] (map viewer/process-render-fn) %)  val))) viewers)\r\n                             (update :root concat js-viewers))))\r\n"]}