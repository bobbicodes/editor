{"version":3,"sources":["nextjournal/clojure_mode/extensions/close_brackets.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.extensions.close-brackets/in-string?","state","pos","G__60300","fexpr__60299","nextjournal.clojure-mode.node/name","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.extensions.close-brackets/escaped?","cljs.core._EQ_","x__4306__auto__","y__4307__auto__","nextjournal.clojure-mode.extensions.close-brackets/backspace-backoff","from","to","and__4221__auto__","G__60312","nextjournal.clojure-mode.node/node|","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/line-comment?","clojure.string/blank?","nextjournal.clojure-mode.util/line-content-at","nextjournal.clojure_mode.util.deletion","p__60336","map__60338","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj60343","js/undefined","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace","doc","range","obj60346","obj60345","obj60344","nextjournal.clojure_mode.util.update_ranges","nextjournal.clojure-mode.util/user-event-annotation","p__60349","map__60352","obj60375","obj60376","obj60378","head","empty","anchor","map__60379","obj60394","obj60395","nextjournal.clojure-mode.util/from-to","node|","parent","or__4223__auto__","cljs.core/not","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure-mode.node/left-edge?","nextjournal.clojure-mode.node/right-edge?","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/start-edge?","nextjournal.clojure-mode.node/same-edge?","nextjournal.clojure-mode.node/start","nextjournal.clojure-mode.node/empty?","nextjournal.clojure-mode.node/up","nextjournal.clojure-mode.extensions.close-brackets/coll-pairs","nextjournal.clojure-mode.extensions.close-brackets/handle-open","open","close","p__60403","map__60405","obj60407","obj60408","obj60409","obj60410","obj60413","nextjournal.clojure_mode.util.insertion","nextjournal.clojure-mode.extensions.close-brackets/handle-close","key-name","p__60437","map__60438","obj60442","obj60443","obj60445","obj60447","unbalanced","G__60462","nextjournal.clojure-mode.node/ancestors","cljs.core.filter","cljs.core.every_pred","nextjournal.clojure-mode.node/coll?","cljs.core/complement","cljs.core/first","closing","G__60465","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/closed-by","G__60466","temp__5753__auto__","close-node-end","cursor","nextjournal.clojure-mode.node/terminal-cursor","nextjournal.clojure-mode.node/right-edge-type?","p__60468","map__60469","obj60471","nextjournal.clojure-mode.extensions.close-brackets/handle-backspace-cmd","view","nextjournal.clojure-mode.util/dispatch-some","nextjournal.clojure-mode.extensions.close-brackets/handle-open-cmd","p__60489","map__60490","obj60492","nextjournal.clojure-mode.extensions.close-brackets/handle-close-cmd","p__60497","map__60498","obj60506","nextjournal.clojure-mode.extensions.close-brackets/guard-scope","cmd","p__60523","map__60531","obj60533","nextjournal.clojure_mode.node.embedded_QMARK_","nextjournal.clojure_mode.node.within_program_QMARK_","nextjournal.clojure-mode.extensions.close-brackets/extension","js/module$node_modules$$codemirror$state$dist$index_cjs.Prec","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","p__60534","map__60535","obj60538"],"sourcesContent":["(ns nextjournal.clojure-mode.extensions.close-brackets\r\n  (:require [\"w3c-keyname\" :refer [keyName]]\r\n            [\"@codemirror/view\" :as view]\r\n            [\"@codemirror/state\" :refer [EditorState\r\n                                         EditorSelection\r\n                                         Transaction\r\n                                         CharCategory\r\n                                         Extension\r\n                                         Prec]]\r\n            [applied-science.js-interop :as j]\r\n            [nextjournal.clojure-mode.node :as n]\r\n            [nextjournal.clojure-mode.util :as u :refer [from-to]]\r\n            [clojure.string :as str]))\r\n\r\n(defn in-string? [state pos]\r\n  (#{\"StringContent\" \"String\"} (n/name (n/tree state pos))))\r\n\r\n(defn escaped? [state pos]\r\n  (= \\\\ (.. state -doc (slice (max 0 (dec pos)) pos) toString)))\r\n\r\n(defn backspace-backoff [state from to]\r\n  (if\r\n   ;; handle line-comments (backspace should not drag forms up into line comments)\r\n   (and\r\n    ;; we are directly in front of a line-comment\r\n    (some-> (n/node| state (dec from)) (u/guard n/line-comment?))\r\n    ;; current line is blank\r\n    (not (str/blank? (u/line-content-at state from))))\r\n    {:cursor (dec from)}\r\n    (u/deletion from to)))\r\n\r\n(j/defn handle-backspace\r\n  \"- skips over closing brackets\r\n   - when deleting an opening bracket of an empty list, removes both brackets\"\r\n  [^:js {:as ^EditorState state :keys [doc]}]\r\n  (when-not (and (= 1 (.. state -selection -ranges -length))\r\n                 (let [^js range (j/get-in state [:selection :ranges 0])]\r\n                   (and (.-empty range) (= 0 (.-from range)))))\r\n    (u/update-ranges state\r\n      #js{:annotations (u/user-event-annotation \"delete\")}\r\n      (j/fn [^:js {:as range :keys [head empty anchor]}]\r\n        (j/let [^:js {:as range from :from to :to} (from-to head anchor)\r\n                ^js node| (.resolveInner (n/tree state) from -1) ;; node immediately to the left of cursor\r\n                ^js parent (.-parent node|)]\r\n          (cond\r\n\r\n            (or (not empty)                                 ;; selection\r\n                (= \"StringContent\" (n/name (n/tree state from -1))) ;; inside a string\r\n                (and parent (not (n/balanced? parent)) (n/left-edge? node|))) ;; unbalanced left-paren\r\n            (u/deletion from to)\r\n\r\n            ;; entering right edge of collection - skip\r\n            (and (n/right-edge? node|) (== from (n/end parent)))\r\n            {:cursor (dec from)}\r\n\r\n            ;; inside left edge of collection - remove or stop\r\n            (and (or (n/start-edge? node|)\r\n                     (n/same-edge? node|)) (== (n/start node|) (n/start parent)))\r\n            (if (n/empty? (n/up node|))\r\n              ;; remove empty collection\r\n              {:cursor  (n/start parent)\r\n               :changes [(from-to (n/start parent) (n/end parent))]}\r\n              ;; stop cursor at inner-left of collection\r\n              {:cursor from})\r\n\r\n            :else (backspace-backoff state from to)))))))\r\n\r\n(def coll-pairs {\"(\" \")\"\r\n                 \"[\" \"]\"\r\n                 \"{\" \"}\"\r\n                 \\\" \\\"})\r\n\r\n(defn handle-open [^EditorState state ^string open]\r\n  (let [^string close (coll-pairs open)]\r\n    (u/update-ranges state\r\n      #js{:annotations (u/user-event-annotation \"input\")}\r\n      (j/fn [^:js {:keys [from to head anchor empty]}]\r\n        (cond\r\n          (in-string? state from)\r\n          (if (= open \\\")\r\n            (u/insertion head \"\\\\\\\"\")\r\n            (u/insertion from to open))\r\n          ;; allow typing escaped bracket\r\n          (escaped? state from)\r\n          (u/insertion from to open)\r\n          :else\r\n          (if empty\r\n            {:changes {:insert (str open close)\r\n                       :from   head}\r\n             :cursor  (+ head (count open))}\r\n            ;; wrap selections with brackets\r\n            {:changes [{:insert open :from from}\r\n                       {:insert close :from to}]\r\n             :from-to [(+ anchor (count open)) (+ head (count open))]}))))))\r\n\r\n(defn handle-close [state key-name]\r\n  (u/update-ranges state\r\n    #js{:annotations (u/user-event-annotation \"input\")}\r\n    (j/fn [^:js {:as range :keys [empty head from to]}]\r\n      (if (or (in-string? state from)\r\n              (escaped? state from))\r\n        (u/insertion from to key-name)\r\n        (when empty\r\n          (or\r\n           ;; close unbalanced (open) collection\r\n           (let [unbalanced (some->\r\n                             (n/tree state head -1)\r\n                             (n/ancestors)\r\n                             (->> (filter (every-pred n/coll? (complement n/balanced?))))\r\n                             first)\r\n                 closing (some-> unbalanced n/down n/closed-by)\r\n                 pos (some-> unbalanced n/end)]\r\n             (when (and closing (= closing key-name))\r\n               {:changes {:from   pos\r\n                          :insert closing}\r\n                :cursor  (inc pos)}))\r\n\r\n           ;; jump to next closing bracket\r\n           (when-let [close-node-end\r\n                      (when-let [^js cursor (-> state n/tree\r\n                                                (n/terminal-cursor head 1))]\r\n                        (loop []\r\n                          (if (n/right-edge-type? (.-type cursor))\r\n                            (n/end cursor)\r\n                            (when (.next cursor)\r\n                              (recur)))))]\r\n             {:cursor close-node-end})\r\n           ;; no-op\r\n           {:cursor head}\r\n           #_(u/insertion head key-name)))))))\r\n\r\n(j/defn handle-backspace-cmd [^:js {:as view :keys [state]}]\r\n  (u/dispatch-some view (handle-backspace state)))\r\n\r\n(defn handle-open-cmd [key-name]\r\n  (j/fn [^:js {:as view :keys [state]}]\r\n    (u/dispatch-some view (handle-open state key-name))))\r\n\r\n(defn handle-close-cmd [key-name]\r\n  (j/fn [^:js {:as view :keys [state]}]\r\n    (u/dispatch-some view (handle-close state key-name))))\r\n\r\n(defn guard-scope\r\n  \"Command -> Command\r\n\r\n  Guards command for it to be triggered from within the right scope, does nothing and propagates key otherwise\"\r\n  [cmd]\r\n  (j/fn [^:js {:as view :keys [state]}]\r\n    (if (or (n/embedded? state) (n/within-program? state))\r\n      (cmd view)\r\n      false)))\r\n\r\n(defn extension []\r\n  (.high Prec\r\n         (.of view/keymap\r\n              (j/lit\r\n               [{:key \"Backspace\"\r\n                 :run (guard-scope\r\n                       (j/fn [^:js {:as view :keys [state]}]\r\n                         (u/dispatch-some view (handle-backspace state))))}\r\n                {:key \"(\" :run (guard-scope (handle-open-cmd \"(\"))}\r\n                {:key \"[\" :run (guard-scope (handle-open-cmd \"[\"))}\r\n                {:key \"{\" :run (guard-scope (handle-open-cmd \"{\"))}\r\n                {:key \\\" :run  (guard-scope (handle-open-cmd \\\"))}\r\n                {:key \\) :run  (guard-scope (handle-close-cmd \\)))}\r\n                {:key \\] :run  (guard-scope (handle-close-cmd \\]))}\r\n                {:key \\} :run  (guard-scope (handle-close-cmd \\}))}]))))\r\n"]}