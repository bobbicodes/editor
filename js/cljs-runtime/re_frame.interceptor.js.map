{"version":3,"sources":["re_frame/interceptor.cljc"],"mappings":"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","names":["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__59310","map__59311","cljs.core/--destructure-map","cljs.core.get","seq59289","self__4817__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5753__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4223__auto__","G__59313","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq59320","G__59321","cljs.core/first","cljs.core/next","G__59322","G__59323","self__4816__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__59329","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq59331","G__59332","G__59333","G__59334","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","temp__5751__auto__","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","re-frame.interceptor/context","frame","event","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__59233__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"],"sourcesContent":["(ns re-frame.interceptor\r\n  (:require [re-frame.loggers :refer [console]]\r\n            [re-frame.interop :refer [empty-queue debug-enabled?]]\r\n            [re-frame.trace :as trace :include-macros true]\r\n            [clojure.set :as set]))\r\n\r\n\r\n(def mandatory-interceptor-keys #{:id :after :before})\r\n\r\n(defn interceptor?\r\n  [m]\r\n  (and (map? m)\r\n       (= mandatory-interceptor-keys (-> m keys set))))\r\n\r\n(defn ->interceptor\r\n  \"Create an interceptor from named arguments\"\r\n  [& {:as m :keys [id before after]}]\r\n  (when debug-enabled?\r\n    (when-let [unknown-keys (seq (set/difference\r\n                                  (-> m keys set)\r\n                                  mandatory-interceptor-keys))]\r\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\r\n  {:id     (or id :unnamed)\r\n   :before before\r\n   :after  after })\r\n\r\n;; -- Effect Helpers  -----------------------------------------------------------------------------\r\n\r\n(defn get-effect\r\n  ([context]\r\n   (:effects context))\r\n  ([context key]\r\n   (get-in context [:effects key]))\r\n  ([context key not-found]\r\n   (get-in context [:effects key] not-found)))\r\n\r\n(defn assoc-effect\r\n  [context key value]\r\n  (assoc-in context [:effects key] value))\r\n\r\n(defn update-effect\r\n  [context key f & args]\r\n  (apply update-in context [:effects key] f args))\r\n\r\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\r\n\r\n(defn get-coeffect\r\n  ([context]\r\n   (:coeffects context))\r\n  ([context key]\r\n   (get-in context [:coeffects key]))\r\n  ([context key not-found]\r\n   (get-in context [:coeffects key] not-found)))\r\n\r\n(defn assoc-coeffect\r\n  [context key value]\r\n  (assoc-in context [:coeffects key] value))\r\n\r\n(defn update-coeffect\r\n  [context key f & args]\r\n  (apply update-in context [:coeffects key] f args))\r\n\r\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\r\n\r\n\r\n(defn- invoke-interceptor-fn\r\n  [context interceptor direction]\r\n  (if-let [f (get interceptor direction)]\r\n    (f context)\r\n    context))\r\n\r\n\r\n(defn- invoke-interceptors\r\n  \"Loop over all interceptors, calling `direction` function on each,\r\n  threading the value of `context` through every call.\r\n\r\n  `direction` is one of `:before` or `:after`.\r\n\r\n  Each iteration, the next interceptor to process is obtained from\r\n  context's `:queue`. After they are processed, interceptors are popped\r\n  from `:queue` and added to `:stack`.\r\n\r\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n  contain all interceptors processed.\r\n\r\n  Returns updated `context`. Ie. the `context` which has been threaded\r\n  through all interceptor functions.\r\n\r\n  Generally speaking, an interceptor's `:before` function will (if present)\r\n  add to a `context's` `:coeffects`, while it's `:after` function\r\n  will modify the `context`'s `:effects`.  Very approximately.\r\n\r\n  But because all interceptor functions are given `context`, and can\r\n  return a modified version of it, the way is clear for an interceptor\r\n  to introspect the stack or queue, or even modify the queue\r\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\r\n  ([context direction]\r\n   (loop [context context]\r\n     (let [queue (:queue context)]        ;; future interceptors\r\n       (if (empty? queue)\r\n         context\r\n         (let [interceptor (peek queue)   ;; next interceptor to call\r\n               stack (:stack context)]    ;; already completed interceptors\r\n           (recur (-> context\r\n                      (assoc :queue (pop queue)\r\n                             :stack (conj stack interceptor))\r\n                      (invoke-interceptor-fn interceptor direction)))))))))\r\n\r\n\r\n(defn enqueue\r\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\r\n  Returns the updated `context`.\r\n\r\n  In an advanced case, this function could allow an interceptor to add new\r\n  interceptors to the `:queue` of a context.\"\r\n  [context interceptors]\r\n  (update context :queue\r\n          (fnil into empty-queue)\r\n          interceptors))\r\n\r\n\r\n(defn- context\r\n  \"Create a fresh context\"\r\n  ([frame event interceptors]\r\n   (-> {:frame frame}\r\n       (assoc-coeffect :event event)\r\n       (enqueue interceptors)))\r\n  #_([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\r\n     (-> (context event interceptors)\r\n         (assoc-coeffect :db db))))\r\n\r\n\r\n(defn- change-direction\r\n  \"Called on completion of `:before` processing, this function prepares/modifies\r\n   `context` for the backwards sweep of processing in which an interceptor\r\n   chain's `:after` fns are called.\r\n\r\n  At this point in processing, the `:queue` is empty and `:stack` holds all\r\n  the previously run interceptors. So this function enables the backwards walk\r\n  by priming `:queue` with what's currently in `:stack`\"\r\n  [context]\r\n  (-> context\r\n      (dissoc :queue)\r\n      (enqueue (:stack context))))\r\n\r\n\r\n(defn execute\r\n  \"Executes the given chain (coll) of interceptors.\r\n\r\n   Each interceptor has this form:\r\n       {:before  (fn [context] ...)     ;; returns possibly modified context\r\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n\r\n   Walks the queue of iterceptors from beginning to end, calling the\r\n   `:before` fn on each, then reverse direction and walk backwards,\r\n   calling the `:after` fn on each.\r\n\r\n   The last interceptor in the chain presumably wraps an event\r\n   handler fn. So the overall goal of the process is to \\\"handle\r\n   the given event\\\".\r\n\r\n   Thread a `context` through all calls. `context` has this form:\r\n\r\n     {:coeffects {:event [:a-query-id :some-param]\r\n                  :db    <original contents of app-db>}\r\n      :effects   {:db    <new value for app-db>\r\n                  :dispatch  [:an-event-id :param1]}\r\n      :queue     <a collection of further interceptors>\r\n      :stack     <a collection of interceptors already walked>}\r\n\r\n   `context` has `:coeffects` and `:effects` which, if this was a web\r\n   server, would be somewhat anologous to `request` and `response`\r\n   respectively.\r\n\r\n   `coeffects` will contain data like `event` and the initial\r\n   state of `db` -  the inputs required by the event handler\r\n   (sitting presumably on the end of the chain), while handler-returned\r\n   side effects are put into `:effects` including, but not limited to,\r\n   new values for `db`.\r\n\r\n   The first few interceptors in a chain will likely have `:before`\r\n   functions which \\\"prime\\\" the `context` by adding the event, and\r\n   the current state of app-db into `:coeffects`. But interceptors can\r\n   add whatever they want to `:coeffects` - perhaps the event handler needs\r\n   some information from localstore, or a random number, or access to\r\n   a DataScript connection.\r\n\r\n   Equally, some interceptors in the chain will have `:after` fn\r\n   which can process the side effects accumulated into `:effects`\r\n   including but, not limited to, updates to app-db.\r\n\r\n   Through both stages (before and after), `context` contains a `:queue`\r\n   of interceptors yet to be processed, and a `:stack` of interceptors\r\n   already done.  In advanced cases, these values can be modified by the\r\n   functions through which the context is threaded.\"\r\n  [frame event-v interceptors]\r\n  (trace/merge-trace!\r\n   {:tags {:interceptors interceptors}})\r\n  (-> (context frame event-v interceptors)\r\n      (invoke-interceptors :before)\r\n      change-direction\r\n      (invoke-interceptors :after)))\r\n"]}