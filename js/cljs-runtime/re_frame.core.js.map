{"version":3,"sources":["re_frame/core.cljc"],"mappings":"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","names":["re-frame.core/->interceptor","re-frame.interceptor/->interceptor","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/get-coeffect","re-frame.interceptor/get-coeffect","re-frame.core/get-effect","re-frame.interceptor/get-effect","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/default-frame","re-frame.frame/make-frame","re-frame.fx/register-built-in!","re-frame.cofx/register-built-in!","re-frame.core/dispatch","cljs.core.partial","re-frame.frame/dispatch","re-frame.core/dispatch-sync","re-frame.frame/dispatch-sync","re-frame.core/reg-sub-raw","query-id","handler-fn","frame","query-v","G__59794","G__59795","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-frame.core/reg-sub","seq59796","G__59797","cljs.core/first","cljs.core/next","self__4816__auto__","args","re-frame.core/subscribe","re-frame.frame/subscribe","re-frame.core/clear-sub","re-frame.frame/clear-sub","re-frame.core/clear-subscriptions-cache!","re-frame.subs/-clear","re-frame.core/reg-fx","re-frame.frame/reg-fx","re-frame.core/clear-fx","re-frame.frame/clear-fx","re-frame.core/reg-cofx","re-frame.frame/reg-cofx","re-frame.core/inject-cofx","re-frame.frame/inject-cofx","re-frame.core/clear-cofx","re-frame.frame/clear-cofx","re-frame.core/reg-event-db","re-frame.frame/reg-event-db","re-frame.core/reg-event-fx","re-frame.frame/reg-event-fx","re-frame.core/reg-event-ctx","re-frame.frame/reg-event-ctx","re-frame.core/clear-event","re-frame.frame/clear-event","re-frame.core/set-loggers!","re-frame.loggers/set-loggers!","re-frame.core/console","re-frame.loggers/console","re-frame.core/make-restore-fn","re-frame.frame/make-restore-fn","re-frame.core/purge-event-queue","re-frame.router/purge","G__59801","re-frame.core/add-post-event-callback","js/Error","f","re_frame.core.add_post_event_callback","id","re-frame.router/add-post-event-callback","re-frame.core/remove-post-event-callback","re-frame.router/remove-post-event-callback"],"sourcesContent":["(ns re-frame.core\r\n  (:require [re-frame.events :as events]\r\n            [re-frame.subs :as subs]\r\n            [re-frame.frame :as frame]\r\n            [re-frame.interop :as interop]\r\n            [re-frame.fx :as fx]\r\n            [re-frame.cofx :as cofx]\r\n            [re-frame.router :as router]\r\n            [re-frame.loggers :as loggers]\r\n            [re-frame.registry :as reg]\r\n            [re-frame.interceptor :as interceptor]\r\n            [re-frame.std-interceptors :as std-interceptors]))\r\n\r\n;; -- API ---------------------------------------------------------------------\r\n;;\r\n;; This namespace represents the re-frame API\r\n;;\r\n;; Below, you'll see we've used this technique:\r\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\r\n;;\r\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\r\n;; via a `def` in this namespace.\r\n;;\r\n;; Turns out, this approach makes it hard:\r\n;;   - to auto-generate API docs\r\n;;   - for IDEs to provide code completion on functions in the API\r\n;;\r\n;; Which is annoying. But there are pros and cons and we haven't\r\n;; yet revisited the decision.  To compensate, we've added more nudity\r\n;; to the docs.\r\n;;\r\n\r\n;; -- interceptor related\r\n;; useful if you are writing your own interceptors\r\n(def ->interceptor   interceptor/->interceptor)\r\n(def enqueue         interceptor/enqueue)\r\n(def get-coeffect    interceptor/get-coeffect)\r\n(def get-effect      interceptor/get-effect)\r\n(def assoc-effect    interceptor/assoc-effect)\r\n(def assoc-coeffect  interceptor/assoc-coeffect)\r\n\r\n\r\n;; --  standard interceptors\r\n(def debug       std-interceptors/debug)\r\n(def path        std-interceptors/path)\r\n(def enrich      std-interceptors/enrich)\r\n(def trim-v      std-interceptors/trim-v)\r\n(def after       std-interceptors/after)\r\n(def on-changes  std-interceptors/on-changes)\r\n\r\n;; XXX move API functions up to this core level - to enable code completion and docs\r\n;; XXX on figwheel reload, is there a way to not get the re-registration messages.\r\n\r\n;; Export API wrapping `default-frame` singleton ---\r\n\r\n(def default-frame (frame/make-frame))\r\n\r\n(fx/register-built-in! default-frame)\r\n(cofx/register-built-in! default-frame)\r\n\r\n(def dispatch (partial frame/dispatch default-frame))\r\n(def dispatch-sync (partial frame/dispatch-sync default-frame))\r\n\r\n(defn reg-sub-raw [query-id handler-fn]\r\n  (frame/reg-sub-raw\r\n   default-frame\r\n   query-id\r\n   (fn [frame query-v]\r\n     (handler-fn (:app-db frame) query-v))))\r\n\r\n;; some slight weirdness here because protocols don't support variadic functions\r\n(defn reg-sub [query-id & args]\r\n  (frame/reg-sub default-frame query-id args))\r\n\r\n(def subscribe (partial frame/subscribe default-frame))\r\n(def clear-sub (partial frame/clear-sub default-frame))\r\n(def clear-subscriptions-cache! (partial subs/-clear (:subs-cache default-frame)))\r\n\r\n(def reg-fx (partial frame/reg-fx default-frame))\r\n(def clear-fx (partial frame/clear-fx default-frame))\r\n\r\n(def reg-cofx (partial frame/reg-cofx default-frame))\r\n(def inject-cofx (partial frame/inject-cofx default-frame))\r\n(def clear-cofx (partial frame/clear-cofx default-frame))\r\n\r\n(def reg-event-db (partial frame/reg-event-db default-frame))\r\n(def reg-event-fx (partial frame/reg-event-fx default-frame))\r\n(def reg-event-ctx (partial frame/reg-event-ctx default-frame))\r\n(def clear-event (partial frame/clear-event default-frame))\r\n\r\n;; --  logging ----------------------------------------------------------------\r\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\r\n;; By default, these functions map directly to the js/console implementations,\r\n;; but you can override with your own fns (set or subset).\r\n;; Example Usage:\r\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\r\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\r\n(def set-loggers! loggers/set-loggers!)\r\n\r\n;; If you are writing an extension to re-frame, like perhaps\r\n;; an effects handler, you may want to use re-frame logging.\r\n;;\r\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\r\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\r\n(def console loggers/console)\r\n\r\n\r\n;; -- unit testing ------------------------------------------------------------\r\n\r\n(defn make-restore-fn\r\n  \"Checkpoints the state of re-frame and returns a function which, when\r\n  later called, will restore re-frame to that checkpointed state.\r\n\r\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\"\r\n  []\r\n  (frame/make-restore-fn default-frame))\r\n\r\n(defn purge-event-queue\r\n  \"Remove all events queued for processing\"\r\n  []\r\n  (router/purge (:event-queue default-frame)))\r\n\r\n;; -- Event Processing Callbacks  ---------------------------------------------\r\n\r\n(defn add-post-event-callback\r\n  \"Registers a function `f` to be called after each event is processed\r\n   `f` will be called with two arguments:\r\n    - `event`: a vector. The event just processed.\r\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\r\n\r\n   This is useful in advanced cases like:\r\n     - you are implementing a complex bootstrap pipeline\r\n     - you want to create your own handling infrastructure, with perhaps multiple\r\n       handlers for the one event, etc.  Hook in here.\r\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\r\n\r\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\r\n  be used at \\\"remove time\\\" to get rid of the right callback.\"\r\n  ([f]\r\n   (add-post-event-callback f f))   ;; use f as its own identifier\r\n  ([id f]\r\n   (router/add-post-event-callback (:event-queue default-frame) id f)))\r\n\r\n\r\n(defn remove-post-event-callback\r\n  [id]\r\n  (router/remove-post-event-callback (:event-queue default-frame) id))\r\n"]}