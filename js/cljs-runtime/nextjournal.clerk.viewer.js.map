{"version":3,"sources":["nextjournal/clerk/viewer.cljc"],"mappings":"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","names":["this__4472__auto__","k__4473__auto__","this__4474__auto__","k58299","else__4475__auto__","G__58303","cljs.core/Keyword","form","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__58304","vec__58305","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__58298","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this58300","other58301","cljs.core._EQ_","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__58308","this__4480__auto__","k__4481__auto__","pred__58310","cljs.core/keyword-identical?","expr__58311","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","nextjournal.clerk.viewer/ViewerEval","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__58302","extmap__4512__auto__","G__58315","cljs.core/record?","nextjournal.clerk.viewer/->ViewerEval","nextjournal.clerk.viewer/map->ViewerEval","k58319","G__58329","f","p__58330","vec__58333","G__58318","this58320","other58321","G__58352","pred__58353","expr__58354","unused__11876__auto__","self__","G__58356","js/Error","args58326","cljs.core/aclone","nextjournal.clerk.viewer/ViewerFn","G__58323","G__58359","nextjournal.clerk.viewer/->ViewerFn","nextjournal.clerk.viewer/map->ViewerFn","this","x","fexpr__58357","y","fexpr__58358","nextjournal.clerk.viewer/viewer-fn?","nextjournal.clerk.viewer/viewer-eval?","nextjournal.clerk.viewer/->viewer-fn","cljs.core/eval","nextjournal.clerk.viewer/->viewer-eval","nextjournal.clerk.viewer/wrapped-value?","and__4221__auto__","cljs.core/map?","e58362","_e","var_args","G__58368","nextjournal.clerk.viewer/ensure-wrapped","v","nextjournal.clerk.viewer.ensure_wrapped","nextjournal.clerk.viewer/->value","nextjournal.clerk.viewer/->viewer","nextjournal.clerk.viewer/->viewers","nextjournal.clerk.viewer/width","nextjournal.clerk.viewer/normalize-viewer-opts","opts","cljs.core.ex_info","clojure.set/rename-keys","nextjournal.clerk.viewer/normalize-viewer","viewer","cljs.core/Symbol","cljs.core/seq?","cljs.core/fn?","G__58380","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.viewer.with_viewer","viewer-opts","cljs.core.merge","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","nextjournal.clerk.viewer/with-viewer-extracting-opts","seq58381","G__58382","cljs.core/first","cljs.core/next","self__4816__auto__","opts+items","cljs.core/not","cljs.core/rest","cljs.core/sequential?","cljs.core.apply","cljs.core.partial","nextjournal.clerk.viewer/with-viewers","viewers","nextjournal.clerk.viewer/rpad-vec","length","padding","cljs.core/vec","cljs.core.take","cljs.core.repeat","nextjournal.clerk.viewer/missing-pred","nextjournal.clerk.viewer/normalize-seq-of-seq","s","max-count","cljs.core/max-key","p1__58386#","cljs.core.mapv","nextjournal.clerk.viewer/normalize-seq-of-map","ks","cljs.core.mapcat","cljs.core/keys","cljs.core.distinct","m","p1__58387#","nextjournal.clerk.viewer/normalize-map-of-seq","m*","p__58397","vec__58398","acc","k","cljs.core.range","cljs.core/val","cljs.core.comp","i","p1__58394#","cljs.core.get_in","p__58401","map__58402","cljs.core/--destructure-map","nextjournal.clerk.viewer/normalize-seq-to-vec","head","rows","G__58403","nextjournal.clerk.viewer/use-headers","map__58405","table","cljs.core.update","nextjournal.clerk.viewer/normalize-table-data","data","cljs.core/vals","nextjournal.clerk.viewer/demunge-ex-data","ex-data","traces","p1__58409#","cljs.core/demunge","cljs.core/pr-str","nextjournal.clerk.viewer/inspect-fn","p1__58410#","nextjournal.clerk.viewer/when-wrapped","G__58411","nextjournal.clerk.viewer/inspect-wrapped-value","wrapped-value","G__58412","nextjournal.clerk.viewer/apply-viewers","nextjournal.clerk.viewer/process-wrapped-value","nextjournal.clerk.viewer/mark-presented","nextjournal.clerk.viewer/mark-preserve-keys","nextjournal.clerk.viewer/fetch-all","_opts","_xs","G__58420","nextjournal.clerk.viewer/get-safe","p1__58418#","key","nextjournal.clerk.viewer.get_safe","map","e58422","nextjournal.clerk.viewer/var-from-def?","nextjournal.clerk.viewer/datafied?","nextjournal.clerk.viewer/with-md-viewer","map__58423","node","type","cljs.core.keyword","cljs.core/name","nextjournal.clerk.viewer/into-markup","markup","p__58425","map__58426","p__58427","map__58428","text","content","G__58429","p1__58424#","G__58430","w","p__58431","map__58432","nextjournal.clerk.viewer/apply-viewer-unwrapping-var-from-def","result","value","map__58433","transform-fn","cljs.core/deref","cljs.core/var?","nextjournal.clerk.viewer/get-default-viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.viewer/default-viewers","G__58436","nextjournal.clerk.viewer/get-viewers","scope","nextjournal.clerk.viewer.get_viewers","or__4223__auto__","fexpr__58437","nextjournal.clerk.viewer/hide-result-viewer","_","nextjournal.clerk.viewer/result-hidden?","p__58440","map__58441","nextjournal.clerk.viewer/->display","code-cell","ns?","map__58442","visibility","result?","fold?","code?","nextjournal.clerk.viewer/update-viewers","select-fn->update-fn","p__58446","vec__58447","pred","update-fn","G__58450","G__58456","nextjournal.clerk.viewer/add-viewers","added-viewers","nextjournal.clerk.viewer.add_viewers","nextjournal.clerk.viewer/table-missing-viewer","nextjournal.clerk.viewer/table-markup-viewer","nextjournal.clerk.viewer/table-head-viewer","nextjournal.clerk.viewer/table-body-viewer","nextjournal.clerk.viewer/table-row-viewer","nextjournal.clerk.viewer/update-table-viewers","p1__58457#","p1__58458#","p1__58459#","cljs.core/string?","cljs.core/number?","nextjournal.clerk.viewer/update-val","seq58464","G__58465","args","cljs.core/update","p1__58467#","nextjournal.clerk.viewer/markdown-viewers","p__58474","map__58475","heading-level","lambdaisland.uri.normalize/normalize-fragment","nextjournal.markdown.transform/->text","p1__58468#","p1__58469#","p1__58470#","p__58477","map__58478","attrs","p1__58472#","nextjournal.markdown.transform/table-alignment","p1__58473#","p__58482","map__58483","nextjournal.clerk.viewer/char-viewer","cljs.core/char?","nextjournal.clerk.viewer/string-viewer","nextjournal.clerk.viewer/number-viewer","nextjournal.clerk.viewer/number-hex-viewer","nextjournal.clerk.viewer/symbol-viewer","cljs.core/symbol?","nextjournal.clerk.viewer/keyword-viewer","cljs.core/keyword?","nextjournal.clerk.viewer/nil-viewer","cljs.core/nil?","nextjournal.clerk.viewer/boolean-viewer","cljs.core/boolean?","nextjournal.clerk.viewer/map-entry-viewer","cljs.core/map-entry?","nextjournal.clerk.viewer/var-from-def-viewer","nextjournal.clerk.viewer/read+inspect-viewer","nextjournal.clerk.viewer/vector-viewer","nextjournal.clerk.viewer/set-viewer","cljs.core/set?","nextjournal.clerk.viewer/sequential-viewer","nextjournal.clerk.viewer/map-viewer","nextjournal.clerk.viewer/var->symbol","sci.impl.vars/var?","sci.impl.vars/toSymbol","cljs.core.symbol","nextjournal.clerk.viewer/var-viewer","cljs.core.some_fn","nextjournal.clerk.viewer/throwable-viewer","e","clojure.datafy/datafy","p1__58498#","nextjournal.clerk.viewer/ideref-viewer","cljs.core/IDeref","r","cljs.core/type","temp__5751__auto__","deref-as-map","js/cljs","js/cljs.core","js/cljs.core.deref-as-map","cljs.core/Var","cljs.core/deref-as-map","nextjournal.clerk.viewer/regex-viewer","cljs.core/regexp?","regex","nextjournal.clerk.viewer/fallback-viewer","cljs.core/constantly","p1__58509#","cljs.core.pr_str","nextjournal.clerk.viewer/elision-viewer","nextjournal.clerk.viewer/katex-viewer","nextjournal.clerk.viewer/mathjax-viewer","nextjournal.clerk.viewer/html-viewer","clojure.walk/postwalk","nextjournal.clerk.viewer/plotly-viewer","nextjournal.clerk.viewer/vega-lite-viewer","nextjournal.clerk.viewer/markdown-viewer","p1__58510#","G__58513","nextjournal.markdown/parse","nextjournal.clerk.viewer/code-viewer","clojure.string/trim","sb__4760__auto__","goog.string/StringBuffer","*print-newline*-orig-val__58517","cljs.core/*print-newline*","*print-fn*-orig-val__58518","cljs.core/*print-fn*","*print-newline*-temp-val__58519","*print-fn*-temp-val__58520","x__4761__auto__","cljs.pprint.pprint","nextjournal.clerk.viewer/code-folded-viewer","*print-newline*-orig-val__58526","*print-fn*-orig-val__58527","*print-newline*-temp-val__58528","*print-fn*-temp-val__58529","nextjournal.clerk.viewer/reagent-viewer","nextjournal.clerk.viewer/row-viewer","nextjournal.clerk.viewer/col-viewer","nextjournal.clerk.viewer/table-viewer","map__58538","p1__58535#","G__58539","cljs.core/cons","cljs.core.map","nextjournal.clerk.viewer/present","nextjournal.clerk.viewer/table-error-viewer","nextjournal.clerk.viewer/code-block-viewer","p__58546","map__58547","nextjournal.clerk.viewer/tagged-value-viewer","cljs.core.update_in","nextjournal.clerk.viewer/result-viewer","nextjournal.clerk.viewer/notebook-viewer","nextjournal.clerk.viewer/buffered-image-viewer","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.viewer","js/nextjournal.clerk.viewer.!viewers","reagent.ratom.atom","nextjournal.clerk.viewer/rank-val","val","cljs.core/reduce-kv","res","idx","cljs.core/ifn?","cljs.core/reduced","nextjournal.clerk.viewer/resilient-compare","a","b","e58555","cljs.core/compare","nextjournal.clerk.viewer/ensure-sorted","xs","cljs.core/sorted?","cljs.core.sort_by","cljs.core.sort","nextjournal.clerk.viewer/find-viewer","select-fn","cljs.core.filter","nextjournal.clerk.viewer/find-named-viewer","viewer-name","nextjournal.clerk.viewer/viewer-for","temp__5753__auto__","selected-viewer","p__58558","map__58559","G__58561","nextjournal.clerk.viewer/ensure-wrapped-with-viewers","nextjournal.clerk.viewer.ensure_wrapped_with_viewers","cljs.core/*ns*","x-viewers","nextjournal.clerk.viewer/->opts","cljs.core/select-keys","nextjournal.clerk.viewer/apply-viewers*","cljs.core/empty?","map__58576","render-fn","transformed-value","G__58577","wrapped-value'","G__58578","nextjournal.clerk.viewer/count-viewers","p1__58581#","G__58582","nextjournal.clerk.viewer/bounded-count-opts","n","limit","total","e58583","cljs.core/bounded-count","G__58586","p__58587","map__58588","nextjournal.clerk.viewer/drop+take-xf","offset","G__58589","cljs.core.drop","cljs.core/int?","p__58590","map__58591","nextjournal.clerk.viewer/process-render-fn","G__58592","nextjournal.clerk.viewer/process-viewer","nextjournal.clerk.viewer/make-elision","fetch-opts","nextjournal.clerk.viewer/find-elision","desc","p1__58600#","cljs.core/tree-seq","G__58601","nextjournal.clerk.viewer/->fetch-opts","nextjournal.clerk.viewer/get-elision","map__58603","path","nextjournal.clerk.viewer/get-fetch-opts-n","p__58604","map__58605","nextjournal.clerk.viewer/inherit-opts","path-segment","cljs.core.fnil","cljs.core/conj","p__58607","map__58608","nextjournal.clerk.viewer/present+paginate-children","preserve-keys?","!budget","budget","map__58609","map__58610","paginate?","fetch-opts'","G__58613","cljs.core/min","children","p__58614","vec__58615","G__58618","nextjournal.clerk.viewer/present*","cljs.core/identity","cljs.core.map_indexed","G__58619","cljs.core.remove","elision","unbounded?","new-offset","G__58620","cljs.core/peek","G__58621","cljs.core.conj","p__58623","map__58624","nextjournal.clerk.viewer/present+paginate-string","map__58625","x__4309__auto__","y__4310__auto__","G__58626","cljs.core.subs","p__58628","map__58629","current-path","map__58630","presented?","descend?","p1__58627#","cljs.core.swap_BANG_","x__4306__auto__","y__4307__auto__","G__58636","cljs.core/associative?","cljs.core/seqable?","nextjournal.clerk.viewer/assign-content-lengths","map__58644","map__58645","name","opening-paren","closing-paren","elision-content-length","cljs.core/+","p1__58642#","p1__58643#","p__58647","p__58648","map__58652","map__58653","nextjournal.clerk.viewer/compute-expanded-at","state","indents","expanded-at","prev-type","content-length","max-length","expanded?","state'","nextjournal.clerk.viewer/assign-expanded-at","G__58661","G__58668","nextjournal.clerk.viewer.present","G__58670","cljs.core.atom","nextjournal.clerk.viewer/assign-closing-parens","nextjournal.clerk.viewer/desc->values","cljs.core/with-meta","cljs.core/coll?","G__58686","cljs.core/empty","nextjournal.clerk.viewer/path-to-value","cljs.core.interleave","nextjournal.clerk.viewer/merge-presentations","root","more","map__58689","path-from-value","path-from-more","cljs.core.not_EQ_","cljs.core/pop","G__58691","nextjournal.clerk.viewer.assign_closing_parens","closing-parens","closing","non-leaf?","defer-closing?","cljs.core/last","G__58694","cljs.core/dissoc","G__58709","G__58711","nextjournal.clerk.viewer/reset-viewers!","nextjournal.clerk.viewer.reset_viewers_BANG_","fexpr__58740","cljs.core/assoc","nextjournal.clerk.viewer/add-viewers!","nextjournal.clerk.viewer/html","nextjournal.clerk.viewer/md","nextjournal.clerk.viewer/plotly","nextjournal.clerk.viewer/vl","nextjournal.clerk.viewer/table","nextjournal.clerk.viewer/row","nextjournal.clerk.viewer/col","nextjournal.clerk.viewer/tex","nextjournal.clerk.viewer/hide-result","nextjournal.clerk.viewer/notebook","nextjournal.clerk.viewer/code","nextjournal.clerk.viewer/doc-url","nextjournal.clerk.viewer/eval-cljs-result-viewer","nextjournal.clerk.viewer/eval-cljs-str","code-string","nextjournal.clerk.viewer/example-viewer","p__58766","map__58767","nextjournal.clerk.viewer/examples-viewer","examples"],"sourcesContent":["(ns nextjournal.clerk.viewer\r\n  (:require [clojure.string :as str]\r\n            [clojure.pprint :as pprint]\r\n            [clojure.datafy :as datafy]\r\n            [clojure.set :as set]\r\n            [clojure.walk :as w]\r\n            #?@(:clj [[clojure.repl :refer [demunge]]\r\n                      [nextjournal.clerk.config :as config]\r\n                      [nextjournal.clerk.analyzer :as analyzer]]\r\n                :cljs [[reagent.ratom :as ratom]\r\n                       [sci.impl.vars :as sci.vars]])\r\n            [nextjournal.markdown :as md]\r\n            [nextjournal.markdown.transform :as md.transform]\r\n            [lambdaisland.uri.normalize :as uri.normalize])\r\n  #?(:clj (:import (clojure.lang IDeref)\r\n                   (java.lang Throwable)\r\n                   (java.awt.image BufferedImage)\r\n                   (javax.imageio ImageIO)\r\n                   (java.util Base64))))\r\n\r\n(defrecord ViewerEval [form])\r\n\r\n(defrecord ViewerFn [form #?(:cljs f)]\r\n  #?@(:cljs [IFn\r\n             (-invoke [this x] ((:f this) x))\r\n             (-invoke [this x y] ((:f this) x y))]))\r\n\r\n\r\n(defn viewer-fn? [x]\r\n  (instance? ViewerFn x))\r\n\r\n(defn viewer-eval? [x]\r\n  (instance? ViewerEval x))\r\n\r\n(defn ->viewer-fn [form]\r\n  (map->ViewerFn {:form form #?@(:cljs [:f (eval form)])}))\r\n\r\n(defn ->viewer-eval [form]\r\n  (map->ViewerEval {:form form}))\r\n\r\n#?(:clj\r\n   (defmethod print-method ViewerFn [v ^java.io.Writer w]\r\n     (.write w (str \"#viewer-fn \" (pr-str `~(:form v))))))\r\n\r\n#?(:clj\r\n   (defmethod print-method ViewerEval [v ^java.io.Writer w]\r\n     (.write w (str \"#viewer-eval \" (pr-str `~(:form v))))))\r\n\r\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\r\n    (read-string (pr-str (->viewer-fn '(fn [x] x)))))\r\n#_(binding [*data-readers* {'viewer-fn ->viewer-fn}]\r\n    (read-string (pr-str (->viewer-fn 'number?))))\r\n\r\n(comment\r\n  (def num? (form->fn+form 'number?))\r\n  (num? 42)\r\n  (:form num?)\r\n  (pr-str num?))\r\n\r\n(defn wrapped-value?\r\n  \"Tests if `x` is a map containing a `:nextjournal/value`.\"\r\n  [x]\r\n  (and (map? x) ;; can throw for `sorted-map`\r\n       (try (contains? x :nextjournal/value)\r\n            (catch #?(:clj Exception :cljs js/Error) _e false))))\r\n\r\n(defn ensure-wrapped\r\n  \"Ensures `x` is wrapped in a map under a `:nextjournal/value` key.\"\r\n  ([x] (if (wrapped-value? x) x {:nextjournal/value x}))\r\n  ([x v] (-> x ensure-wrapped (assoc :nextjournal/viewer v))))\r\n\r\n#_(ensure-wrapped 123)\r\n#_(ensure-wrapped {:nextjournal/value 456})\r\n\r\n(defn ->value\r\n  \"Takes `x` and returns the `:nextjournal/value` from it, or otherwise `x` unmodified.\"\r\n  [x]\r\n  (if (wrapped-value? x)\r\n    (:nextjournal/value x)\r\n    x))\r\n\r\n#_(->value (with-viewer :code '(+ 1 2 3)))\r\n#_(->value 123)\r\n\r\n(defn ->viewer\r\n  \"Returns the `:nextjournal/viewer` for a given wrapped value `x`, `nil` otherwise.\"\r\n  [x]\r\n  (when (wrapped-value? x)\r\n    (:nextjournal/viewer x)))\r\n\r\n\r\n#_(->viewer (with-viewer :code '(+ 1 2 3)))\r\n#_(->viewer \"123\")\r\n\r\n(defn ->viewers\r\n  \"Returns the `:nextjournal/viewers` for a given wrapped value `x`, `nil` otherwise.\"\r\n  [x]\r\n  (when (wrapped-value? x)\r\n    (:nextjournal/viewers x)))\r\n\r\n(defn width\r\n  \"Returns the `:nextjournal/width` for a given wrapped value `x`, `nil` otherwise.\"\r\n  [x]\r\n  (when (wrapped-value? x)\r\n    (:nextjournal/width x)))\r\n\r\n\r\n(defn normalize-viewer-opts [opts]\r\n  (when-not (map? opts)\r\n    (throw (ex-info \"normalize-viewer-opts not passed `map?` opts\" {:opts opts})))\r\n  (set/rename-keys opts {:nextjournal.clerk/viewer :nextjournal/viewer\r\n                         :nextjournal.clerk/viewers :nextjournal/viewers\r\n                         :nextjournal.clerk/opts :nextjournal/opts\r\n                         :nextjournal.clerk/width :nextjournal/width}))\r\n\r\n(defn normalize-viewer [viewer]\r\n  (cond (keyword? viewer) viewer\r\n        (map? viewer) viewer\r\n        (or (symbol? viewer) (seq? viewer) #?(:cljs (fn? viewer))) {:render-fn viewer}\r\n        #?@(:clj [(fn? viewer) {:transform-fn viewer}])\r\n        :else (throw (ex-info \"cannot normalize viewer\" {:viewer viewer}))))\r\n\r\n#_(normalize-viewer '#(v/html [:h3 \"Hello \" % \"!\"]))\r\n#_(normalize-viewer :latex)\r\n#_(normalize-viewer {:render-fn '#(v/html [:h3 \"Hello \" % \"!\"]) :transform-fn identity})\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; public api\r\n\r\n(defn with-viewer\r\n  \"Wraps the given value `x` and associates it with the given `viewer`. Takes an optional second `viewer-opts` arg.\"\r\n  ([viewer x] (with-viewer viewer nil x))\r\n  ([viewer viewer-opts x]\r\n   (merge (when viewer-opts (normalize-viewer-opts viewer-opts))\r\n          (-> x\r\n              ensure-wrapped\r\n              (assoc :nextjournal/viewer (normalize-viewer viewer))))))\r\n\r\n;; TODO: Think of a better name\r\n(defn with-viewer-extracting-opts [viewer & opts+items]\r\n  ;; TODO: maybe support sequantial & viewer-opts?\r\n  (cond\r\n    (and (map? (first opts+items)) (not (wrapped-value? (first opts+items))))\r\n    (with-viewer viewer (first opts+items) (rest opts+items))\r\n\r\n    (and (sequential? (first opts+items)) (= 1 (count opts+items)))\r\n    (apply (partial with-viewer viewer) opts+items)\r\n\r\n    :else\r\n    (with-viewer viewer opts+items)))\r\n\r\n#_(with-viewer :latex \"x^2\")\r\n#_(with-viewer '#(v/html [:h3 \"Hello \" % \"!\"]) \"x^2\")\r\n\r\n(defn with-viewers\r\n  \"Binds viewers to types, eg {:boolean view-fn}\"\r\n  [viewers x]\r\n  (-> x\r\n      ensure-wrapped\r\n      (assoc :nextjournal/viewers viewers)))\r\n\r\n#_(->> \"x^2\" (with-viewer :latex) (with-viewers [{:name :latex :render-fn :mathjax}]))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; table viewer normalization\r\n\r\n(defn rpad-vec [v length padding]\r\n  (vec (take length (concat v (repeat padding)))))\r\n\r\n(def missing-pred\r\n  :nextjournal/missing)\r\n\r\n(defn normalize-seq-of-seq [s]\r\n  (let [max-count (count (apply max-key count s))]\r\n    {:rows (mapv #(rpad-vec (->value %) max-count missing-pred) s)}))\r\n\r\n(defn normalize-seq-of-map [s]\r\n  (let [ks (->> s (mapcat keys) distinct vec)]\r\n    {:head ks\r\n     :rows (mapv (fn [m] (mapv #(get m % missing-pred) ks)) s)}))\r\n\r\n\r\n(defn normalize-map-of-seq [m]\r\n  (let [ks (-> m keys vec)\r\n        m* (if (seq? (get m (first ks)))\r\n             (reduce (fn [acc [k s]] (assoc acc k (vec s))) {} m)\r\n             m)]\r\n    {:head ks\r\n     :rows (->> (range (count (val (apply max-key (comp count val) m*))))\r\n                (mapv (fn [i] (mapv #(get-in m* [% i] missing-pred) ks))))}))\r\n\r\n(defn normalize-seq-to-vec [{:keys [head rows]}]\r\n  (cond-> {:rows (vec rows)}\r\n    head (assoc :head (vec head))))\r\n\r\n(defn use-headers [s]\r\n  (let [{:as table :keys [rows]} (normalize-seq-of-seq s)]\r\n    (-> table\r\n        (assoc :head (first rows))\r\n        (update :rows rest))))\r\n\r\n\r\n(defn normalize-table-data [data]\r\n  (cond\r\n    (and (map? data) (-> data :rows sequential?)) (normalize-seq-to-vec data)\r\n    (and (map? data) (sequential? (first (vals data)))) (normalize-map-of-seq data)\r\n    (and (sequential? data) (map? (first data))) (normalize-seq-of-map data)\r\n    (and (sequential? data) (sequential? (first data))) (normalize-seq-of-seq data)\r\n    :else nil))\r\n\r\n(defn demunge-ex-data [ex-data]\r\n  (update ex-data :trace (fn [traces] (mapv #(update % 0 (comp demunge pr-str)) traces))))\r\n\r\n#_(demunge-ex-data (datafy/datafy (ex-info \"foo\" {:bar :baz})))\r\n\r\n(declare present present* !viewers apply-viewers apply-viewers* ensure-wrapped-with-viewers process-viewer process-wrapped-value default-viewers find-named-viewer)\r\n\r\n(defn inspect-fn []  #?(:clj (->viewer-eval 'v/inspect) :cljs (eval 'v/inspect)))\r\n\r\n(defn when-wrapped [f] #(cond-> % (wrapped-value? %) f))\r\n\r\n(defn inspect-wrapped-value [wrapped-value]\r\n  [(inspect-fn) (-> wrapped-value apply-viewers process-wrapped-value)])\r\n\r\n#_(w/postwalk (when-wrapped inspect-wrapped-value) [1 2 {:a [3 (with-viewer :latex \"\\\\alpha\")]} 4])\r\n\r\n(defn mark-presented [wrapped-value]\r\n  (assoc wrapped-value :nextjournal/presented? true))\r\n\r\n(defn mark-preserve-keys [wrapped-value]\r\n  (assoc wrapped-value :nextjournal/preserve-keys? true))\r\n\r\n(defn fetch-all [_opts _xs]\r\n  (throw (ex-info \"`fetch-all` is deprecated, please use a `:transform-fn` with `mark-presented` instead.\" {})))\r\n\r\n(defn get-safe\r\n  ([key] #(get-safe % key))\r\n  ([map key]\r\n   (when (map? map)\r\n     (try (get map key) ;; can throw for e.g. sorted-map\r\n          (catch #?(:clj Exception :cljs js/Error) _e nil)))))\r\n\r\n(def var-from-def?\r\n  (get-safe :nextjournal.clerk/var-from-def))\r\n\r\n(def datafied?\r\n  (get-safe :nextjournal.clerk/datafied))\r\n\r\n(defn with-md-viewer [wrapped-value]\r\n  (let [{:as node :keys [type]} (->value wrapped-value)]\r\n    (when-not type\r\n      (throw (ex-info \"no type given for with-md-viewer\" {:wrapped-value wrapped-value})))\r\n    (with-viewer (keyword \"nextjournal.markdown\" (name type)) wrapped-value)))\r\n\r\n(defn into-markup [markup]\r\n  (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\r\n    (-> (with-viewer {:name :html- :render-fn 'v/html} wrapped-value)\r\n        mark-presented\r\n        (update :nextjournal/value\r\n                (fn [{:as node :keys [text content]}]\r\n                  (into (cond-> markup (fn? markup) (apply [node]))\r\n                        (cond text [text]\r\n                              content (mapv #(-> (with-md-viewer %)\r\n                                                 (assoc :nextjournal/viewers viewers)\r\n                                                 (apply-viewers)\r\n                                                 (as-> w\r\n                                                     (if (= :html- (:name (->viewer w)))\r\n                                                       (->value w)\r\n                                                       [(inspect-fn) (process-wrapped-value w)])))\r\n                                            content))))))))\r\n\r\n#?(:clj\r\n   (defn ->edn [x]\r\n     (binding [*print-namespace-maps* false]\r\n       (pr-str x))))\r\n\r\n#_(->edn {:nextjournal/value :foo})\r\n\r\n#?(:clj\r\n   (defn base64-encode-value [{:as result :nextjournal/keys [content-type]}]\r\n     (update result :nextjournal/value (fn [data] (str \"data:\" content-type \";base64, \"\r\n                                                       (.encodeToString (Base64/getEncoder) data))))))\r\n\r\n(defn apply-viewer-unwrapping-var-from-def [{:as result :nextjournal/keys [value viewer]}]\r\n  (if viewer\r\n    (let [{:keys [transform-fn]} (and (map? viewer) viewer)\r\n          value (if (and (not transform-fn) (get value :nextjournal.clerk/var-from-def))\r\n                  (-> value :nextjournal.clerk/var-from-def deref)\r\n                  value)]\r\n      (assoc result :nextjournal/value (if (or (var? viewer) (fn? viewer))\r\n                                         (viewer value)\r\n                                         {:nextjournal/value value\r\n                                          :nextjournal/viewer (normalize-viewer viewer)})))\r\n    result))\r\n\r\n#_(apply-viewer-unwrapping-var-from-def {:nextjournal/value [:h1 \"hi\"] :nextjournal/viewer :html})\r\n#_(apply-viewer-unwrapping-var-from-def {:nextjournal/value [:h1 \"hi\"] :nextjournal/viewer (resolve 'nextjournal.clerk/html)})\r\n\r\n#?(:clj\r\n   (defn extract-blobs [lazy-load? blob-id presentd-result]\r\n     (w/postwalk #(cond-> %\r\n                    (and (get % :nextjournal/content-type) lazy-load?)\r\n                    (assoc :nextjournal/value {:blob-id blob-id :path (:path %)})\r\n                    (and (get % :nextjournal/content-type) (not lazy-load?))\r\n                    base64-encode-value)\r\n                 presentd-result)))\r\n\r\n(defn get-default-viewers []\r\n  (:default @!viewers default-viewers))\r\n\r\n(defn get-viewers\r\n  ([scope] (get-viewers scope nil))\r\n  ([scope value]\r\n   (or (when value (->viewers value))\r\n       (when scope (@!viewers scope))\r\n       (get-default-viewers))))\r\n\r\n#_(get-viewers nil nil)\r\n\r\n#?(:clj\r\n   (defn ->result [{:keys [inline-results?]} {:as result :nextjournal/keys [value blob-id viewers]}]\r\n     (let [lazy-load? (and (not inline-results?) blob-id)\r\n           presented-result (extract-blobs lazy-load? blob-id (present (ensure-wrapped-with-viewers (or viewers (get-viewers *ns*)) value)))\r\n           opts-from-form-meta (select-keys result [:nextjournal/width :nextjournal/opts])]\r\n       (merge {:nextjournal/viewer :clerk/result\r\n               :nextjournal/value (cond-> (try {:nextjournal/edn (->edn (merge presented-result opts-from-form-meta))}\r\n                                               (catch Throwable _e\r\n                                                 {:nextjournal/string (pr-str value)}))\r\n                                    (-> presented-result ->viewer :name)\r\n                                    (assoc :nextjournal/viewer (select-keys (->viewer presented-result) [:name]))\r\n\r\n                                    lazy-load?\r\n                                    (assoc :nextjournal/fetch-opts {:blob-id blob-id}\r\n                                           :nextjournal/hash (analyzer/->hash-str [blob-id presented-result opts-from-form-meta])))}\r\n              (dissoc presented-result :nextjournal/value :nextjournal/viewer :nextjournal/viewers)\r\n              ;; TODO: consider dropping this. Still needed by notebook-viewer fn to read :nextjournal/width option on result blocks\r\n              opts-from-form-meta))))\r\n\r\n(def hide-result-viewer\r\n  {:name :hide-result :transform-fn (fn [_] nil)})\r\n\r\n(defn result-hidden? [result]\r\n  (contains? #{:hide-result hide-result-viewer} (-> result ->value ->viewer)))\r\n\r\n(defn ->display [{:as code-cell :keys [result ns?]}]\r\n  (let [{:nextjournal.clerk/keys [visibility]} result\r\n        result? (and (contains? code-cell :result)\r\n                     (not (result-hidden? result))\r\n                     (not (contains? visibility :hide-ns))\r\n                     (not (and ns? (contains? visibility :hide))))\r\n        fold? (and (not (contains? visibility :hide-ns))\r\n                   (or (contains? visibility :fold)\r\n                       (contains? visibility :fold-ns)))\r\n        code? (or fold? (contains? visibility :show))]\r\n    {:result? result? :fold? fold? :code? code?}))\r\n\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:fold :hide-ns}}})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:fold-ns}}})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:hide}} :ns? false})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:fold}} :ns? true})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:fold}} :ns? false})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:hide} :nextjournal/value {:nextjournal/viewer :hide-result}} :ns? false})\r\n#_(->display {:result {:nextjournal.clerk/visibility #{:hide}} :ns? true})\r\n\r\n#?(:clj\r\n   (defn with-block-viewer [doc {:as cell :keys [type]}]\r\n     (case type\r\n       :markdown [(with-viewer :markdown (:doc cell))]\r\n       :code (let [{:as cell :keys [result]} (update cell :result apply-viewer-unwrapping-var-from-def)\r\n                   {:as display-opts :keys [code? result?]} (->display cell)]\r\n               (cond-> []\r\n                 code?\r\n                 (conj (with-viewer :clerk/code-block\r\n                         ;; TODO: display analysis could be merged into cell earlier\r\n                         (-> cell (merge display-opts) (dissoc :result))))\r\n                 result?\r\n                 (conj (->result doc result)))))))\r\n\r\n(defn update-viewers [viewers select-fn->update-fn]\r\n  (reduce (fn [viewers [pred update-fn]]\r\n            (mapv (fn [viewer]\r\n                    (cond-> viewer\r\n                      (pred viewer) update-fn)) viewers))\r\n          viewers\r\n          select-fn->update-fn))\r\n\r\n#_(update-viewers default-viewers {:fetch-opts #(dissoc % :fetch-opts)})\r\n\r\n(defn add-viewers\r\n  ([added-viewers] (add-viewers (get-default-viewers) added-viewers))\r\n  ([viewers added-viewers] (into (vec added-viewers) viewers)))\r\n\r\n(def table-missing-viewer {:pred #{:nextjournal/missing} :render-fn '(fn [x] (v/html [:<>]))})\r\n\r\n(def table-markup-viewer\r\n  {:name :table/markup\r\n   :render-fn '(fn [head+body opts]\r\n                 (v/html (into [:table.text-xs.sans-serif.text-gray-900.dark:text-white.not-prose] (v/inspect-children opts) head+body)))})\r\n\r\n(def table-head-viewer\r\n  {:name :table/head\r\n   :render-fn '(fn [header-row {:as opts :keys [path number-col?]}]\r\n                 (v/html [:thead.border-b.border-gray-300.dark:border-slate-700\r\n                          (into [:tr]\r\n                                (map-indexed (fn [i {:as header-cell :nextjournal/keys [value]}]\r\n                                               (let [title (when (or (string? value) (keyword? value) (symbol? value))\r\n                                                             value)]\r\n                                                 [:th.relative.pl-6.pr-2.py-1.align-bottom.font-medium\r\n                                                  (cond-> {:class (when (number-col? i) \"text-right\")} title (assoc :title title))\r\n                                                  [:div.flex.items-center (v/inspect opts header-cell)]]))) header-row)]))})\r\n\r\n(def table-body-viewer\r\n  {:name :table/body :fetch-opts {:n 20}\r\n   :render-fn '(fn [rows opts] (v/html (into [:tbody] (map-indexed (fn [idx row] (v/inspect (update opts :path conj idx) row))) rows)))})\r\n\r\n(def table-row-viewer\r\n  {:name :table/row\r\n   :render-fn '(fn [row {:as opts :keys [path number-col?]}]\r\n                 (v/html (into [:tr.hover:bg-gray-200.dark:hover:bg-slate-700\r\n                                {:class (if (even? (peek path)) \"bg-black/5 dark:bg-gray-800\" \"bg-white dark:bg-gray-900\")}]\r\n                               (map-indexed (fn [idx cell] [:td.pl-6.pr-2.py-1 (when (number-col? idx) {:class \"text-right\"}) (v/inspect opts cell)])) row)))})\r\n\r\n(defn update-table-viewers [viewers]\r\n  (-> viewers\r\n      (update-viewers {(comp #{string?} :pred) #(assoc % :render-fn (quote v/string-viewer))\r\n                       (comp #{number?} :pred) #(assoc % :render-fn '(fn [x] (v/html [:span.tabular-nums (if (js/Number.isNaN x) \"NaN\" (str x))])))\r\n                       (comp #{:elision} :name) #(assoc % :render-fn '(fn [{:as fetch-opts :keys [total offset unbounded?]} {:keys [num-cols]}]\r\n                                                                        (v/html\r\n                                                                         [v/consume-view-context :fetch-fn (fn [fetch-fn]\r\n                                                                                                             [:tr.border-t.dark:border-slate-700\r\n                                                                                                              [:td.text-center.py-1\r\n                                                                                                               {:col-span num-cols\r\n                                                                                                                :class (if (fn? fetch-fn)\r\n                                                                                                                         \"bg-indigo-50 hover:bg-indigo-100 dark:bg-gray-800 dark:hover:bg-slate-700 cursor-pointer\"\r\n                                                                                                                         \"text-gray-400 text-slate-500\")\r\n                                                                                                                :on-click (fn [_] (when (fn? fetch-fn)\r\n                                                                                                                                    (fetch-fn fetch-opts)))}\r\n                                                                                                               (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")]])])))})\r\n      (add-viewers [table-missing-viewer\r\n                    table-markup-viewer\r\n                    table-head-viewer\r\n                    table-body-viewer\r\n                    table-row-viewer])))\r\n\r\n#?(:clj (def utc-date-format ;; from `clojure.instant/thread-local-utc-date-format`\r\n          (doto (java.text.SimpleDateFormat. \"yyyy-MM-dd'T'HH:mm:ss.SSS-00:00\")\r\n            (.setTimeZone (java.util.TimeZone/getTimeZone \"GMT\")))))\r\n\r\n#?(:clj\r\n   (defn datafy-scope [scope]\r\n     (cond\r\n       (instance? clojure.lang.Namespace scope) {:namespace (-> scope str keyword)}\r\n       (keyword? scope) scope\r\n       :else (throw (ex-info (str \"Unsupported scope \" scope) {:scope scope})))))\r\n\r\n#_(datafy-scope *ns*)\r\n#_(datafy-scope #'datafy-scope)\r\n\r\n(defn update-val [f & args]\r\n  (fn [wrapped-value] (apply update wrapped-value :nextjournal/value f args)))\r\n\r\n#_((update-val + 1) {:nextjournal/value 41})\r\n\r\n(def markdown-viewers\r\n  [{:name :nextjournal.markdown/doc :transform-fn (into-markup [:div.viewer-markdown])}\r\n\r\n   ;; blocks\r\n   {:name :nextjournal.markdown/heading\r\n    :transform-fn (into-markup\r\n                   (fn [{:as node :keys [heading-level]}]\r\n                     [(str \"h\" heading-level) {:id (uri.normalize/normalize-fragment (md.transform/->text node))}]))}\r\n   {:name :nextjournal.markdown/image :transform-fn #(with-viewer :html [:img.inline (-> % ->value :attrs)])}\r\n   {:name :nextjournal.markdown/blockquote :transform-fn (into-markup [:blockquote])}\r\n   {:name :nextjournal.markdown/paragraph :transform-fn (into-markup [:p])}\r\n   {:name :nextjournal.markdown/plain :transform-fn (into-markup [:<>])}\r\n   {:name :nextjournal.markdown/ruler :transform-fn (into-markup [:hr])}\r\n   {:name :nextjournal.markdown/code\r\n    :transform-fn (fn [wrapped-value] (with-viewer :html\r\n                                        [:div.viewer-code (with-viewer :code\r\n                                                            (md.transform/->text (->value wrapped-value)))]))}\r\n\r\n   ;; marks\r\n   {:name :nextjournal.markdown/em :transform-fn (into-markup [:em])}\r\n   {:name :nextjournal.markdown/strong :transform-fn (into-markup [:strong])}\r\n   {:name :nextjournal.markdown/monospace :transform-fn (into-markup [:code])}\r\n   {:name :nextjournal.markdown/strikethrough :transform-fn (into-markup [:s])}\r\n   {:name :nextjournal.markdown/link :transform-fn (into-markup #(vector :a (:attrs %)))}\r\n   {:name :nextjournal.markdown/internal-link :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\r\n   {:name :nextjournal.markdown/hashtag :transform-fn (into-markup #(vector :a {:href (str \"#\" (:text %))}))}\r\n\r\n   ;; inlines\r\n   {:name :nextjournal.markdown/text :transform-fn (into-markup [:span])}\r\n   {:name :nextjournal.markdown/softbreak :transform-fn (fn [_] (with-viewer :html [:span \" \"]))}\r\n   #?(:clj {:name :nextjournal.markdown/inline :transform-fn (comp eval read-string md.transform/->text)})\r\n\r\n   ;; formulas\r\n   {:name :nextjournal.markdown/formula :transform-fn (comp :text ->value) :render-fn '(fn [tex] (v/katex-viewer tex {:inline? true}))}\r\n   {:name :nextjournal.markdown/block-formula :transform-fn (comp :text ->value) :render-fn 'v/katex-viewer}\r\n\r\n   ;; lists\r\n   {:name :nextjournal.markdown/bullet-list :transform-fn (into-markup [:ul])}\r\n   {:name :nextjournal.markdown/numbered-list :transform-fn (into-markup [:ol])}\r\n   {:name :nextjournal.markdown/todo-list :transform-fn (into-markup [:ul.contains-task-list])}\r\n   {:name :nextjournal.markdown/list-item :transform-fn (into-markup [:li])}\r\n   {:name :nextjournal.markdown/todo-item\r\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:li [:input {:type \"checkbox\" :default-checked (:checked attrs)}]]))}\r\n\r\n   ;; tables\r\n   {:name :nextjournal.markdown/table :transform-fn (into-markup [:table])}\r\n   {:name :nextjournal.markdown/table-head :transform-fn (into-markup [:thead])}\r\n   {:name :nextjournal.markdown/table-body :transform-fn (into-markup [:tbody])}\r\n   {:name :nextjournal.markdown/table-row :transform-fn (into-markup [:tr])}\r\n   {:name :nextjournal.markdown/table-header\r\n    :transform-fn (into-markup #(vector :th {:style (md.transform/table-alignment (:attrs %))}))}\r\n   {:name :nextjournal.markdown/table-data\r\n    :transform-fn (into-markup #(vector :td {:style (md.transform/table-alignment (:attrs %))}))}\r\n\r\n   ;; ToC via [[TOC]] placeholder ignored\r\n   {:name :nextjournal.markdown/toc :transform-fn (into-markup [:div.toc])}\r\n\r\n   ;; sidenotes\r\n   {:name :nextjournal.markdown/sidenote\r\n    :transform-fn (into-markup (fn [{:keys [attrs]}] [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (-> attrs :ref inc)]]))}\r\n   {:name :nextjournal.markdown/sidenote-ref\r\n    :transform-fn (into-markup [:sup.sidenote-ref])}])\r\n\r\n(def char-viewer\r\n  {:pred char? :render-fn '(fn [c] (v/html [:span.cmt-string.inspected-value \"\\\\\" c]))})\r\n\r\n(def string-viewer\r\n  {:pred string? :render-fn (quote v/quoted-string-viewer) :fetch-opts {:n 80}})\r\n\r\n(def number-viewer\r\n  {:pred number? :render-fn (quote v/number-viewer)})\r\n\r\n(def number-hex-viewer\r\n  {:name :number-hex :render-fn '(fn [num] (v/number-viewer (str \"0x\" (.toString (js/Number. num) 16))))})\r\n\r\n(def symbol-viewer\r\n  {:pred symbol? :render-fn '(fn [x] (v/html [:span.cmt-keyword.inspected-value (str x)]))})\r\n\r\n(def keyword-viewer\r\n  {:pred keyword? :render-fn '(fn [x] (v/html [:span.cmt-atom.inspected-value (str x)]))})\r\n\r\n(def nil-viewer\r\n  {:pred nil? :render-fn '(fn [_] (v/html [:span.cmt-default.inspected-value \"nil\"]))})\r\n\r\n(def boolean-viewer\r\n  {:pred boolean? :render-fn '(fn [x] (v/html [:span.cmt-bool.inspected-value (str x)]))})\r\n\r\n(def map-entry-viewer\r\n  {:pred map-entry? :name :map-entry :render-fn '(fn [xs opts] (v/html (into [:<>] (comp (v/inspect-children opts) (interpose \" \")) xs))) :fetch-opts {:n 2}})\r\n\r\n(def var-from-def-viewer\r\n  {:pred var-from-def? :transform-fn (update-val (comp deref :nextjournal.clerk/var-from-def))})\r\n\r\n(def read+inspect-viewer\r\n  {:name :read+inspect :render-fn '(fn [x] (try (v/html [v/inspect-paginated (v/read-string x)])\r\n                                                (catch js/Error _e\r\n                                                  (v/unreadable-edn-viewer x))))})\r\n\r\n(def vector-viewer\r\n  {:pred vector? :render-fn 'v/coll-viewer :opening-paren \"[\" :closing-paren \"]\" :fetch-opts {:n 20}})\r\n\r\n(def set-viewer\r\n  {:pred set? :render-fn 'v/coll-viewer :opening-paren \"#{\" :closing-paren \"}\" :fetch-opts {:n 20}})\r\n\r\n(def sequential-viewer\r\n  {:pred sequential? :render-fn 'v/coll-viewer :opening-paren \"(\" :closing-paren \")\" :fetch-opts {:n 20}})\r\n\r\n(def map-viewer\r\n  {:pred map? :name :map :render-fn 'v/map-viewer :opening-paren \"{\" :closing-paren \"}\" :fetch-opts {:n 10}})\r\n\r\n#?(:cljs (defn var->symbol [v] (if (sci.vars/var? v) (sci.vars/toSymbol v) (symbol v))))\r\n\r\n(def var-viewer\r\n  {:pred (some-fn var? #?(:cljs sci.vars/var?)) :transform-fn (comp #?(:cljs var->symbol :clj symbol) ->value) :render-fn '(fn [x] (v/html [:span.inspected-value [:span.cmt-meta \"#'\" (str x)]]))})\r\n\r\n(def throwable-viewer\r\n  {:pred (fn [e] (instance? #?(:clj Throwable :cljs js/Error) e))\r\n   :name :error :render-fn (quote v/throwable-viewer) :transform-fn (comp mark-presented (update-val (comp demunge-ex-data datafy/datafy)))})\r\n\r\n(def buffered-image-viewer #?(:clj {:pred #(instance? BufferedImage %)\r\n                                    :transform-fn (fn [{image :nextjournal/value}]\r\n                                                    (let [stream (java.io.ByteArrayOutputStream.)\r\n                                                          w (.getWidth image)\r\n                                                          h (.getHeight image)\r\n                                                          r (float (/ w h))]\r\n                                                      (ImageIO/write image \"png\" stream)\r\n                                                      (-> {:nextjournal/value (.toByteArray stream)\r\n                                                           :nextjournal/content-type \"image/png\"\r\n                                                           :nextjournal/width (if (and (< 2 r) (< 900 w)) :full :wide)}\r\n                                                          mark-presented)))\r\n                                    :render-fn '(fn [blob] (v/html [:figure.flex.flex-col.items-center.not-prose [:img {:src (v/url-for blob)}]]))}))\r\n\r\n(def ideref-viewer\r\n  {:pred #(instance? IDeref %)\r\n   :transform-fn (fn [wrapped-value] (with-viewer :tagged-value\r\n                                       {:tag \"object\"\r\n                                        :value (let [r (->value wrapped-value)]\r\n                                                 (vector (type r)\r\n                                                         #?(:clj (with-viewer :number-hex (System/identityHashCode r)))\r\n                                                         (if-let [deref-as-map (resolve 'clojure.core/deref-as-map)]\r\n                                                           (deref-as-map r)\r\n                                                           r)))}))})\r\n\r\n(def regex-viewer\r\n  {:pred #?(:clj (partial instance? java.util.regex.Pattern) :cljs regexp?)\r\n   :transform-fn (fn [wrapped-value] (with-viewer :tagged-value {:tag \"\" :value (let [regex (->value wrapped-value)]\r\n                                                                                  #?(:clj (.pattern regex) :cljs (.-source regex)))}))})\r\n\r\n(def fallback-viewer\r\n  {:pred (constantly :true) :transform-fn (update-val #(with-viewer :read+inspect (pr-str %)))})\r\n\r\n(def elision-viewer\r\n  {:name :elision :render-fn (quote v/elision-viewer) :transform-fn mark-presented})\r\n\r\n(def katex-viewer\r\n  {:name :latex :render-fn (quote v/katex-viewer) :transform-fn mark-presented})\r\n\r\n(def mathjax-viewer\r\n  {:name :mathjax :render-fn (quote v/mathjax-viewer) :transform-fn mark-presented})\r\n\r\n(def html-viewer\r\n  {:name :html\r\n   :render-fn (quote v/html)\r\n   :transform-fn (comp mark-presented\r\n                       (update-val (partial w/postwalk (when-wrapped inspect-wrapped-value))))})\r\n\r\n(def plotly-viewer\r\n  {:name :plotly :render-fn (quote v/plotly-viewer) :transform-fn mark-presented})\r\n\r\n(def vega-lite-viewer\r\n  {:name :vega-lite :render-fn (quote v/vega-lite-viewer) :transform-fn mark-presented})\r\n\r\n(def markdown-viewer\r\n  {:name :markdown :transform-fn (fn [wrapped-value]\r\n                                   (-> wrapped-value\r\n                                       mark-presented\r\n                                       (update :nextjournal/value #(cond->> % (string? %) md/parse))\r\n                                       (update :nextjournal/viewers add-viewers markdown-viewers)\r\n                                       (with-md-viewer)))})\r\n\r\n(def code-viewer\r\n  {:name :code :render-fn (quote v/code-viewer) :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (str/trim (with-out-str (pprint/pprint v)))))))})\r\n\r\n(def code-folded-viewer\r\n  {:name :code-folded :render-fn (quote v/foldable-code-viewer) :transform-fn (comp mark-presented (update-val (fn [v] (if (string? v) v (with-out-str (pprint/pprint v))))))})\r\n\r\n(def reagent-viewer\r\n  {:name :reagent :render-fn (quote v/reagent-viewer) :transform-fn mark-presented})\r\n\r\n(def row-viewer\r\n  {:name :row :render-fn '(fn [items opts]\r\n                            (let [item-count (count items)]\r\n                              (v/html (into [:div {:class \"md:flex md:flex-row md:gap-4 not-prose\"\r\n                                                   :style opts}]\r\n                                            (map (fn [item]\r\n                                                   [:div.flex.items-center.justify-center.flex-auto\r\n                                                    (v/inspect opts item)])) items))))})\r\n\r\n(def col-viewer\r\n  {:name :col :render-fn '(fn [items opts]\r\n                            (v/html (into [:div {:class \"md:flex md:flex-col md:gap-4 clerk-grid not-prose\"\r\n                                                 :style opts}]\r\n                                          (map (fn [item]\r\n                                                 [:div.flex.items-center.justify-center\r\n                                                  (v/inspect opts item)])) items)))})\r\n\r\n(def table-viewer\r\n  {:name :table\r\n   :transform-fn (fn [wrapped-value]\r\n                   (if-let [{:keys [head rows]} (normalize-table-data (->value wrapped-value))]\r\n                     (-> wrapped-value\r\n                         (assoc :nextjournal/viewer :table/markup)\r\n                         (update :nextjournal/width #(or % :wide))\r\n                         (update :nextjournal/viewers update-table-viewers)\r\n                         (assoc :nextjournal/opts {:num-cols (count (or head (first rows)))\r\n                                                   :number-col? (if (seq (first rows)) (mapv number? (first rows)) {})})\r\n                         (assoc :nextjournal/value (cond->> []\r\n                                                     (seq rows) (cons (with-viewer :table/body (map (partial with-viewer :table/row) rows)))\r\n                                                     head (cons (with-viewer :table/head head)))))\r\n                     (-> wrapped-value\r\n                         mark-presented\r\n                         (assoc :nextjournal/width :wide)\r\n                         (assoc :nextjournal/value [(present wrapped-value)])\r\n                         (assoc :nextjournal/viewer {:render-fn 'v/table-error}))))})\r\n\r\n(def table-error-viewer\r\n  {:name :table-error :render-fn (quote v/table-error) :fetch-opts {:n 1}})\r\n\r\n(def code-block-viewer\r\n  {:name :clerk/code-block :transform-fn (fn [{:as wrapped-value :nextjournal/keys [value]}]\r\n                                           (-> wrapped-value\r\n                                               (assoc :nextjournal/viewer (if (:fold? value) :code-folded :code))\r\n                                               (update :nextjournal/value :text)))})\r\n\r\n(def tagged-value-viewer\r\n  {:name :tagged-value :render-fn '(fn [{:keys [tag value space?]}] (v/html (v/tagged-value {:space? space?} (str \"#\" tag) [v/inspect-paginated value])))\r\n   :transform-fn (fn [wrapped-value]\r\n                   (-> wrapped-value\r\n                       (update-in [:nextjournal/value :value] present)\r\n                       mark-presented))})\r\n(def result-viewer\r\n  {:name :clerk/result :render-fn (quote v/result-viewer) :transform-fn mark-presented})\r\n\r\n#?(:clj\r\n   (defn process-blocks [viewers {:as doc :keys [ns]}]\r\n     (-> doc\r\n         (update :blocks (partial into [] (comp (mapcat (partial with-block-viewer doc))\r\n                                                (map (comp process-wrapped-value\r\n                                                           apply-viewers*\r\n                                                           (partial ensure-wrapped-with-viewers viewers))))))\r\n         (select-keys [:blocks :toc :title])\r\n         (cond-> ns (assoc :scope (datafy-scope ns))))))\r\n\r\n(def notebook-viewer\r\n  {:name :clerk/notebook\r\n   :render-fn (quote v/notebook-viewer)\r\n   :transform-fn #?(:cljs mark-presented\r\n                    :clj  (fn [{:as wrapped-value :nextjournal/keys [viewers]}]\r\n                            (-> wrapped-value\r\n                                (update :nextjournal/value (partial process-blocks viewers))\r\n                                mark-presented)))})\r\n\r\n(def default-viewers\r\n  ;; maybe make this a sorted-map\r\n  [char-viewer\r\n   string-viewer\r\n   number-viewer\r\n   number-hex-viewer\r\n   symbol-viewer\r\n   keyword-viewer\r\n   nil-viewer\r\n   boolean-viewer\r\n   map-entry-viewer\r\n   var-from-def-viewer\r\n   read+inspect-viewer\r\n   vector-viewer\r\n   set-viewer\r\n   sequential-viewer\r\n   map-viewer\r\n   var-viewer\r\n   throwable-viewer\r\n   buffered-image-viewer\r\n   ideref-viewer\r\n   regex-viewer\r\n   fallback-viewer\r\n   elision-viewer\r\n   katex-viewer\r\n   mathjax-viewer\r\n   html-viewer\r\n   plotly-viewer\r\n   vega-lite-viewer\r\n   markdown-viewer\r\n   code-viewer\r\n   code-folded-viewer\r\n   reagent-viewer\r\n   row-viewer\r\n   col-viewer\r\n   table-viewer\r\n   table-error-viewer\r\n   code-block-viewer\r\n   tagged-value-viewer\r\n   result-viewer\r\n   notebook-viewer\r\n   hide-result-viewer])\r\n\r\n(defonce\r\n  ^{:doc \"atom containing a map of and per-namespace viewers or `:defaults` overridden viewers.\"}\r\n  !viewers\r\n  (#?(:clj atom :cljs ratom/atom) {}))\r\n\r\n#_(reset! !viewers {})\r\n\r\n;; heavily inspired by code from Thomas Heller in shadow-cljs, see\r\n;; https://github.com/thheller/shadow-cljs/blob/1708acb21bcdae244b50293d17633ce35a78a467/src/main/shadow/remote/runtime/obj_support.cljc#L118-L144\r\n\r\n(defn rank-val [val]\r\n  (reduce-kv (fn [res idx pred]\r\n               (if (and (ifn? pred) (pred val)) (reduced idx) res))\r\n             -1\r\n             (into [] (map :pred) default-viewers)))\r\n\r\n(defn resilient-compare [a b]\r\n  (try\r\n    (compare a b)\r\n    (catch #?(:clj Exception :cljs js/Error) _e\r\n      (compare (rank-val a) (rank-val b)))))\r\n\r\n(defn ensure-sorted [xs]\r\n  (cond\r\n    (sorted? xs) xs\r\n    (map? xs) (sort-by first resilient-compare xs)\r\n    (set? xs) (sort resilient-compare xs)\r\n    :else xs))\r\n\r\n\r\n(defn find-viewer [viewers select-fn]\r\n  (first (filter select-fn viewers)))\r\n\r\n#_(find-viewer default-viewers (comp #{string?} :pred))\r\n#_(find-viewer default-viewers (comp #{:elision} :name))\r\n\r\n(defn find-named-viewer [viewers viewer-name]\r\n  (find-viewer viewers (comp #{viewer-name} :name)))\r\n\r\n#_(find-named-viewer default-viewers :elision)\r\n\r\n(defn viewer-for [viewers x]\r\n  (or (when-let [selected-viewer (->viewer x)]\r\n        (if (keyword? selected-viewer)\r\n          (or (find-named-viewer viewers selected-viewer)\r\n              (throw (ex-info (str \"cannot find viewer named \" selected-viewer)\r\n                              {:selected-viewer selected-viewer :viewers viewers})))\r\n          selected-viewer))\r\n      (find-viewer viewers (let [v (->value x)]\r\n                             (fn [{:keys [pred]}]\r\n                               (and (ifn? pred) (pred v)))))\r\n      (throw (ex-info (str \"cannot find matching viewer for value\")\r\n                      {:value (->value x) :viewers viewers :x x}))))\r\n\r\n#_(viewer-for default-viewers [1 2 3])\r\n#_(viewer-for default-viewers {:nextjournal/value [1 2 3]})\r\n#_(viewer-for default-viewers 42)\r\n#_(viewer-for default-viewers (with-viewer :html [:h1 \"Hello Hiccup\"]))\r\n#_(viewer-for default-viewers (with-viewer {:transform-fn identity} [:h1 \"Hello Hiccup\"]))\r\n\r\n(defn ensure-wrapped-with-viewers\r\n  ([x] (ensure-wrapped-with-viewers (get-viewers *ns*) x))\r\n  ([viewers x]\r\n   (-> x\r\n       ensure-wrapped\r\n       (update :nextjournal/viewers (fn [x-viewers] (or x-viewers viewers))))))\r\n\r\n#_(ensure-wrapped-with-viewers 42)\r\n#_(ensure-wrapped-with-viewers {:nextjournal/value 42 :nextjournal/viewers [:boo]})\r\n\r\n(defn ->opts [wrapped-value]\r\n  (select-keys wrapped-value [:nextjournal/width :nextjournal/opts :!budget :budget :path :current-path :offset]))\r\n\r\n(defn apply-viewers* [wrapped-value]\r\n  (when (empty? (->viewers wrapped-value))\r\n    (throw (ex-info \"cannot apply empty viewers\" {:wrapped-value wrapped-value})))\r\n  (let [viewers (->viewers wrapped-value)\r\n        {:as viewer :keys [render-fn transform-fn]} (viewer-for viewers wrapped-value)\r\n        transformed-value (ensure-wrapped-with-viewers viewers\r\n                                                       (cond-> (dissoc wrapped-value :nextjournal/viewer)\r\n                                                         transform-fn transform-fn))\r\n        wrapped-value' (cond-> transformed-value\r\n                         (-> transformed-value ->value wrapped-value?)\r\n                         (merge (->value transformed-value)))]\r\n    (if (and transform-fn (not render-fn))\r\n      (recur wrapped-value')\r\n      (-> wrapped-value'\r\n          (assoc :nextjournal/viewer viewer)\r\n          (merge (->opts wrapped-value))))))\r\n\r\n(defn apply-viewers [x]\r\n  (apply-viewers* (ensure-wrapped-with-viewers x)))\r\n\r\n#_(apply-viewers 42)\r\n#_(apply-viewers {:one :two})\r\n#_(apply-viewers {:one :two})\r\n#_(apply-viewers [1 2 3])\r\n#_(apply-viewers (range 3))\r\n#_(apply-viewers (clojure.java.io/file \"notebooks\"))\r\n#_(apply-viewers (md \"# Hello\"))\r\n#_(apply-viewers (html [:h1 \"hi\"]))\r\n#_(apply-viewers (with-viewer :elision {:remaining 10 :count 30 :offset 19}))\r\n#_(apply-viewers (with-viewer (->Form '(fn [name] (html [:<> \"Hello \" name]))) \"James\"))\r\n#_(apply-viewers (with-viewers [{:pred (constantly true) :render-fn '(fn [x] [:h1 \"hi\"])}] 42))\r\n\r\n(defn count-viewers\r\n  \"Helper function to walk a given `x` and replace the viewers with their counts. Useful for debugging.\"\r\n  [x]\r\n  (w/postwalk #(if (wrapped-value? %)\r\n                 (cond-> (dissoc % :!budget)\r\n                   (:nextjournal/viewers %)\r\n                   (-> #_%\r\n                       (update :nextjournal/viewers count)\r\n                       (set/rename-keys {:nextjournal/viewers :nextjournal/viewers-count})))\r\n                 %) x))\r\n\r\n(defn bounded-count-opts [n xs]\r\n  (when-not (number? n)\r\n    (throw (ex-info \"n must be a number?\" {:n n :xs xs})))\r\n  (let [limit (+ n #?(:clj config/*bounded-count-limit* :cljs 10000))\r\n        total (try (bounded-count limit xs)\r\n                   (catch #?(:clj Exception :cljs js/Error) _\r\n                     nil))]\r\n    (cond-> {}\r\n      total (assoc :total total)\r\n      (or (not total) (= total limit)) (assoc :unbounded? true))))\r\n\r\n#_(bounded-count-opts 20 (range))\r\n#_(bounded-count-opts 20 (range 3234567))\r\n\r\n(defn drop+take-xf\r\n  \"Takes a map with optional `:n` and `:offset` and returns a transducer that drops `:offset` and takes `:n`.\"\r\n  [{:keys [n offset]\r\n    :or {offset 0}}]\r\n  (cond-> (drop offset)\r\n    (int? n)\r\n    (comp (take n))))\r\n\r\n#_(sequence (drop+take-xf {:n 10}) (range 100))\r\n#_(sequence (drop+take-xf {:n 10 :offset 10}) (range 100))\r\n#_(sequence (drop+take-xf {}) (range 9))\r\n\r\n\r\n(declare assign-closing-parens)\r\n\r\n(defn process-render-fn [{:as viewer :keys [render-fn]}]\r\n  (cond-> viewer\r\n    (and render-fn (not (viewer-fn? render-fn)))\r\n    (update :render-fn ->viewer-fn)))\r\n\r\n(defn process-viewer [viewer]\r\n  (if-not (map? viewer)\r\n    viewer\r\n    (-> viewer\r\n        (dissoc :pred :transform-fn :update-viewers-fn)\r\n        process-render-fn)))\r\n\r\n#_(process-viewer {:render-fn '(v/html [:h1]) :transform-fn mark-presented})\r\n\r\n(defn process-wrapped-value [wrapped-value]\r\n  (-> wrapped-value\r\n      (select-keys [:nextjournal/viewer :nextjournal/value :nextjournal/width :nextjournal/content-type :nextjournal/opts :path :offset :n])\r\n      (update :nextjournal/viewer process-viewer)))\r\n\r\n#_(process-wrapped-value (apply-viewers 42))\r\n\r\n(defn make-elision [viewers fetch-opts]\r\n  (->> (with-viewer :elision fetch-opts)\r\n       (ensure-wrapped-with-viewers viewers)\r\n       apply-viewers\r\n       process-wrapped-value))\r\n\r\n#_(make-elision default-viewers {:n 20})\r\n\r\n(defn find-elision [desc]\r\n  (->value (first (filter (comp #{:elision} :name :nextjournal/viewer)\r\n                          (tree-seq (some-fn map? vector?) #(cond-> % (map? %) vals) desc)))))\r\n\r\n(defn ->fetch-opts [wrapped-value]\r\n  (merge (-> wrapped-value ->viewer :fetch-opts)\r\n         (select-keys wrapped-value [:path :offset])))\r\n\r\n(defn get-elision [wrapped-value]\r\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)]\r\n    (merge fetch-opts (bounded-count-opts n (->value wrapped-value)))))\r\n\r\n#_(get-elision (present (range)))\r\n#_(get-elision (present \"abc\"))\r\n#_(get-elision (present (str/join (repeat 1000 \"abc\"))))\r\n\r\n(defn get-fetch-opts-n [wrapped-value]\r\n  (-> wrapped-value ->fetch-opts :n))\r\n\r\n(defn inherit-opts [{:as wrapped-value :nextjournal/keys [viewers]} value path-segment]\r\n  (-> (ensure-wrapped-with-viewers viewers value)\r\n      (merge (->opts wrapped-value))\r\n      (dissoc :offset)\r\n      (update :path (fnil conj []) path-segment)\r\n      (update :current-path (fnil conj []) path-segment)))\r\n\r\n(defn present+paginate-children [{:as wrapped-value :nextjournal/keys [viewers preserve-keys?] :keys [!budget budget]}]\r\n  (let [{:as fetch-opts :keys [path offset n]} (->fetch-opts wrapped-value)\r\n        xs (->value wrapped-value)\r\n        paginate? (and (number? n) (not preserve-keys?))\r\n        fetch-opts' (cond-> fetch-opts\r\n                      (and paginate? !budget (not (map-entry? xs)))\r\n                      (update :n min @!budget))\r\n        children (if preserve-keys?\r\n                   (into {} (map (fn [[k v]] [k (present* (inherit-opts wrapped-value v k))])) xs)\r\n                   (into []\r\n                         (comp (if paginate? (drop+take-xf fetch-opts') identity)\r\n                               (map-indexed (fn [i x] (present* (inherit-opts wrapped-value x (+ i (or offset 0))))))\r\n                               (remove nil?))\r\n                         (ensure-sorted xs)))\r\n        {:as elision :keys [total unbounded?]} (and paginate? (get-elision wrapped-value))\r\n        new-offset (when paginate? (or (some-> children peek :path peek inc) 0))]\r\n    (cond-> children\r\n      (and paginate? (or unbounded? (< new-offset total)))\r\n      (conj (let [fetch-opts (assoc elision :offset new-offset)]\r\n              (make-elision viewers fetch-opts))))))\r\n\r\n(defn present+paginate-string [{:as wrapped-value :nextjournal/keys [viewers viewer value]}]\r\n  (let [{:as elision :keys [n total path offset]} (and (-> viewer :fetch-opts :n)\r\n                                                       (get-elision wrapped-value))]\r\n    (if (and n (< n total))\r\n      (let [new-offset (min (+ (or offset 0) n) total)]\r\n        (cond-> [(subs value (or offset 0) new-offset)]\r\n          (pos? (- total new-offset)) (conj (let [fetch-opts (-> elision\r\n                                                                 (assoc :offset new-offset :replace-path (conj path new-offset)))]\r\n                                              (make-elision viewers fetch-opts)))\r\n          true ensure-wrapped))\r\n      value)))\r\n\r\n\r\n(defn ^:private present* [{:as wrapped-value\r\n                           :keys [path current-path !budget]\r\n                           :nextjournal/keys [viewers]}]\r\n  (when (empty? viewers)\r\n    (throw (ex-info \"cannot present* with empty viewers\" {:wrapped-value wrapped-value})))\r\n  (let [{:as wrapped-value :nextjournal/keys [viewers presented?]} (apply-viewers* wrapped-value)\r\n        descend? (< (count current-path)\r\n                    (count path))\r\n        xs (->value wrapped-value)]\r\n    #_(prn :xs xs :type (type xs) :path path :current-path current-path :descend? descend?)\r\n    (when (and !budget (not descend?) (not presented?))\r\n      (swap! !budget #(max (dec %) 0)))\r\n    (-> (merge (->opts wrapped-value)\r\n               (with-viewer (->viewer wrapped-value)\r\n                 (cond presented?\r\n                       wrapped-value\r\n\r\n                       descend? ;; TODO: can this be unified, simplified, or even dropped in favor of continuation?\r\n                       (let [idx (first (drop (count current-path) path))]\r\n                         (present* (-> (ensure-wrapped-with-viewers\r\n                                        viewers\r\n                                        (cond (and (map? xs) (keyword? idx)) (get xs idx)\r\n                                              (or (map? xs) (set? xs)) (nth (seq (ensure-sorted xs)) idx)\r\n                                              (associative? xs) (get xs idx)\r\n                                              (sequential? xs) (nth xs idx)))\r\n                                       (merge (->opts wrapped-value))\r\n                                       (update :current-path (fnil conj []) idx))))\r\n\r\n                       (string? xs)\r\n                       (present+paginate-string wrapped-value)\r\n\r\n                       (and xs (seqable? xs))\r\n                       (present+paginate-children wrapped-value)\r\n\r\n                       :else ;; leaf value\r\n                       xs)))\r\n        process-wrapped-value)))\r\n\r\n(defn assign-content-lengths [wrapped-value]\r\n  (w/postwalk\r\n   (fn [x]\r\n     (if-let [value (and (wrapped-value? x) (:nextjournal/value x))]\r\n       (let [{:nextjournal/keys [viewer]} x\r\n             {:keys [name opening-paren closing-paren]} viewer\r\n             elision-content-length 6]\r\n         (assoc x\r\n                :content-length\r\n                (cond\r\n                  (or (nil? value) (char? value) (string? value) (keyword? value) (symbol? value) (number? value))\r\n                  (count (pr-str value))\r\n                  (contains? #{:elision} name)\r\n                  elision-content-length\r\n                  (contains? #{:map-entry} name)\r\n                  (reduce + 1 (map #(:content-length % 0) value))\r\n                  (vector? value)\r\n                  (->> value\r\n                       (map #(:content-length % 0))\r\n                       (reduce + (+ (count opening-paren) (count closing-paren)))\r\n                       (+ (dec (count value))))\r\n                  :else 0)\r\n                :type name))\r\n       x))\r\n   wrapped-value))\r\n\r\n(defn compute-expanded-at [{:as state :keys [indents expanded-at prev-type]}\r\n                           {:nextjournal/keys [value]\r\n                            :keys [content-length path type]\r\n                            :or {content-length 0}}]\r\n  (let [max-length (- 80 (reduce + 0 indents))\r\n        expanded? (< max-length content-length)\r\n        state' (assoc state\r\n                      :expanded-at (assoc expanded-at path expanded?)\r\n                      #_(if expanded?\r\n                          (assoc expanded-at path true)\r\n                          expanded-at)\r\n                      :prev-type type\r\n                      :indents (conj\r\n                                (->> indents (take (count path)) vec)\r\n                                (cond\r\n                                  (contains? #{:map-entry} prev-type) (or content-length 0)\r\n                                  (vector? value) 2\r\n                                  :else 1)))]\r\n    (if (vector? value)\r\n      (reduce compute-expanded-at state' value)\r\n      state')))\r\n\r\n(defn assign-expanded-at [wrapped-value]\r\n  (cond-> wrapped-value\r\n    (:content-length wrapped-value)\r\n    (assoc :nextjournal/expanded-at\r\n           (:expanded-at (compute-expanded-at {:indents [] :expanded-at {}} wrapped-value)))))\r\n\r\n(comment\r\n  (-> (compute-expanded-at\r\n       {:indents [] :expanded-at {}}\r\n       (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))\r\n      :expanded-at\r\n      keys\r\n      sort)\r\n  (= (count \"[1 2 [1 [2] 3] 4 5]\")\r\n     (:content-length (assign-content-lengths (present [1 2 [1 [2] 3] 4 5]))))\r\n  (= (count \"{:a-vector [1 2 3] :a-list (123 234 345) :a-set #{1 2 3 4}}\")\r\n     (:content-length (assign-content-lengths (present {:a-vector [1 2 3] :a-list '(123 234 345) :a-set #{1 2 3 4}}))))\r\n  ;; Check for elisions as well\r\n  (assign-content-lengths (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)})))\r\n\r\n(defn present\r\n  \"Returns a subset of a given `value`.\"\r\n  ([x] (present x {}))\r\n  ([x opts]\r\n   (-> (ensure-wrapped-with-viewers x)\r\n       (merge {:!budget (atom (:budget opts 200))\r\n               :path (:path opts [])\r\n               :current-path (:current-path opts [])}\r\n              opts)\r\n       present*\r\n       assign-closing-parens)))\r\n\r\n(comment\r\n  (present [\\a \\b])\r\n  (present [42])\r\n  (-> (present (range 100)) ->value peek)\r\n  (present {:hello [1 2 3]})\r\n  (present {:one [1 2 3] 1 2 3 4})\r\n  (present [1 2 [1 [2] 3] 4 5])\r\n  (present (clojure.java.io/file \"notebooks\"))\r\n  (present {:viewers [{:pred sequential? :render-fn pr-str}]} (range 100))\r\n  (present (map vector (range)))\r\n  (present (subs (slurp \"/usr/share/dict/words\") 0 1000))\r\n  (present (plotly {:data [{:z [[1 2 3] [3 2 1]] :type \"surface\"}]}))\r\n  (present [(with-viewer :html [:h1 \"hi\"])])\r\n  (present (with-viewer :html [:ul (for [x (range 3)] [:li x])]))\r\n  (present (range))\r\n  (present {1 [2]})\r\n  (present (with-viewer '(fn [name] (html [:<> \"Hello \" name])) \"James\"))\r\n  (present {:foo (vec (repeat 2 {:baz (range 30) :fooze (range 40)})) :bar (range 20)}))\r\n\r\n(defn desc->values\r\n  \"Takes a `description` and returns its value. Inverse of `present`. Mostly useful for debugging.\"\r\n  [desc]\r\n  (let [x (->value desc)\r\n        viewer-name (-> desc ->viewer :name)]\r\n    (cond (= viewer-name :elision) (with-meta '\u2026 x)\r\n          (coll? x) (into (case viewer-name\r\n                            ;; TODO: fix table viewer\r\n                            (:map :table) {}\r\n                            (or (empty x) []))\r\n                          (map desc->values)\r\n                          x)\r\n          :else x)))\r\n\r\n#_(desc->values (present [1 [2 {:a :b} 2] 3 (range 100)]))\r\n#_(desc->values (present (table (mapv vector (range 30)))))\r\n#_(desc->values (present (with-viewer :table (normalize-table-data (repeat 60 [\"Adelie\" \"Biscoe\" 50 30 200 5000 :female])))))\r\n\r\n(defn path-to-value [path]\r\n  (conj (interleave path (repeat :nextjournal/value)) :nextjournal/value))\r\n\r\n(defn merge-presentations [root more elision]\r\n  (update-in root\r\n             (path-to-value (:path elision))\r\n             (fn [value]\r\n               (let [{:keys [offset path]} (-> value peek :nextjournal/value)\r\n                     path-from-value (conj path offset)\r\n                     path-from-more (or (:replace-path elision) ;; string case, TODO find a better way to unify\r\n                                        (-> more :nextjournal/value first :path))]\r\n                 (when (not= path-from-value path-from-more)\r\n                   (throw (ex-info \"paths mismatch\" {:path-from-value path-from-value :path-from-more path-from-more :root root :more more :path-to-value (path-to-value (:path more)) :value value})))\r\n                 (into (pop value) (:nextjournal/value more))))))\r\n\r\n\r\n(defn assign-closing-parens\r\n  ([node] (assign-closing-parens '() node))\r\n  ([closing-parens node]\r\n   (let [value (->value node)\r\n         viewer (->viewer node)\r\n         closing (:closing-paren viewer)\r\n         non-leaf? (and (vector? value) (wrapped-value? (first value)))\r\n         defer-closing? (and non-leaf?\r\n                             (or (-> value last :nextjournal/viewer :closing-paren) ;; the last element can carry parens\r\n                                 (and (= :map-entry (-> value last :nextjournal/viewer :name)) ;; the last element is a map entry whose value can carry parens\r\n                                      (-> value last :nextjournal/value last :nextjournal/viewer :closing-paren))))]\r\n     (cond-> (cond\r\n               (not closing) node\r\n               defer-closing? (update node :nextjournal/viewer dissoc :closing-paren)\r\n               :else (update-in node [:nextjournal/viewer :closing-paren] cons closing-parens))\r\n       non-leaf? (update :nextjournal/value\r\n                         (fn [xs]\r\n                           (into []\r\n                                 (map-indexed (fn [i x]\r\n                                                (assign-closing-parens (if (and defer-closing? (= (dec (count xs)) i))\r\n                                                                         (cond->> closing-parens closing (cons closing))\r\n                                                                         '())\r\n                                                                       x)))\r\n                                 xs)))))))\r\n\r\n(defn reset-viewers!\r\n  ([viewers] (reset-viewers! *ns* viewers))\r\n  ([scope viewers]\r\n   (assert (or (#{:default} scope)\r\n               #?(:clj (instance? clojure.lang.Namespace scope))))\r\n   (swap! !viewers assoc scope viewers)))\r\n\r\n(defn add-viewers! [viewers]\r\n  (reset-viewers! *ns* (add-viewers (get-default-viewers) viewers))\r\n  viewers)\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; public convenience api\r\n(def html         (partial with-viewer html-viewer))\r\n(def md           (partial with-viewer markdown-viewer))\r\n(def plotly       (partial with-viewer plotly-viewer))\r\n(def vl           (partial with-viewer vega-lite-viewer))\r\n(def table        (partial with-viewer table-viewer))\r\n(def row          (partial with-viewer-extracting-opts row-viewer))\r\n(def col          (partial with-viewer-extracting-opts col-viewer))\r\n(def tex          (partial with-viewer katex-viewer))\r\n(def hide-result  (partial with-viewer hide-result-viewer))\r\n(def notebook     (partial with-viewer (:name notebook-viewer)))\r\n(def code         (partial with-viewer code-viewer))\r\n(defn doc-url [path]\r\n  (->viewer-eval (list 'v/doc-url path)))\r\n\r\n(def eval-cljs-result-viewer\r\n  {:transform-fn mark-presented\r\n   :render-fn '(fn [x]\r\n                 (v/html (v/inspect-paginated x)))})\r\n\r\n(defn eval-cljs-str [code-string]\r\n  ;; NOTE: this relies on implementation details on how SCI code is evaluated\r\n  ;; and will change in a future version of Clerk\r\n  (with-viewer eval-cljs-result-viewer\r\n    (-> (->viewer-eval (list 'binding '[*ns* *ns*]\r\n                             (list 'load-string code-string)))\r\n        (assoc :remount? true))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;; examples\r\n(def example-viewer\r\n  {:transform-fn (fn [{:as wrapped-value :nextjournal/keys [viewers] :keys [path current-path]}]\r\n                   (-> wrapped-value\r\n                       mark-preserve-keys\r\n                       (assoc :nextjournal/viewer {:render-fn '(fn [{:keys [form val]} opts]\r\n                                                                 (v/html [:div.flex.flex-wrap\r\n                                                                          {:class \"py-[7px]\"}\r\n                                                                          [:div [:div.bg-slate-100.px-2.rounded\r\n                                                                                 (v/inspect opts form)]]\r\n                                                                          [:div.flex.mt-1\r\n                                                                           [:div.mx-2.font-sans.text-xs.text-slate-500 {:class \"mt-[2px]\"} \"\u21d2\"]\r\n                                                                           (v/inspect opts val)]]))})\r\n                       (update-in [:nextjournal/value :form] code)))})\r\n\r\n(def examples-viewer\r\n  {:transform-fn (update-val (fn [examples]\r\n                               (mapv (partial with-viewer example-viewer) examples)))\r\n   :render-fn '(fn [examples opts]\r\n                 (v/html (into [:div.border-l-2.border-slate-300.pl-4\r\n                                [:div.uppercase.tracking-wider.text-xs.font-sans.text-slate-500.mt-4.mb-2 \"Examples\"]]\r\n                               (v/inspect-children opts) examples)))})\r\n"]}