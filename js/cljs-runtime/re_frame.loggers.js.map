{"version":3,"sources":["re_frame/loggers.cljc"],"mappings":";AAYA;;;;;;AAAeA,2BAKb,6CAAA,2CAAA,8EAAA,gFAAA,mFAAA,oFAAA,8IAAA,3iBAACC,4IAA0B,AAACC,iBAAsBC,8DACvB,AAACC,kBAAsBD,gEACvB,AAACE,mBAAsBF,iEACvB,AAACG,mBAAsBH,+DACvB,kBAAI,AAASA,eACX,AAACI,mBAAsBJ,SACvB,AAACD,iBAAsBC,uEACzB,mEAAA,jDAAI,AAAYA,kBACd,AAACK,sBAAyBL;AAD5B,AAAA;;AAW7B,AAAA,2BAAA,mCAAAM,9DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,gEAAA,hEAAME,2EACHM,MAAQC;AADX,AAEE,GAAQ,0BAAA,AAAAE,1BAACC,0CAAWzB,0BAAQqB;AAA5B;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,4HAAA,KAAA,/GAAmC,CAAA,wFAAiDF;;;AACpF,OAACK,8CAAM,iBAAAC,WAAA,AAAAH,gBAAQxB;AAAR,AAAA,kFAAA2B,4BAAAA,tGAACN,sCAAAA,gDAAAA;KAAgBC;;;AAH1B,CAAA,mDAAA,nDAAMP;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAMA;;;;qCAAA,rCAAMY,kFAGHC;AAHH,AAIE,GAAS,AAACC,uBAAO,AAACC,qDAAW,AAACC,cAAI,AAACC,eAAKJ,cAAc,cAAA,eAAA,AAAAL,gBAAKxB,/BAAQiC,dAAKD;AAAxE;AAAA,AAAA,MAAA,KAAAT,MAAA,CAAA,kBAAA,8BAAA,KAAA;;;AACA,OAACW,mDAAMlC,yBAAQmC,gBAAMN;;AAEvB;;;+BAAA,/BAAMO;AAAN,AAAA,OAAAZ,gBAGGxB","names":["re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq58260","G__58261","cljs.core/first","cljs.core/next","self__4816__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__58263","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","re-frame.loggers/get-loggers"],"sourcesContent":["(ns re-frame.loggers\r\n  (:require [clojure.set :refer [difference]]\r\n            #?@(:clj [[clojure.string :as str]\r\n                      [clojure.tools.logging :as log]])))\r\n\r\n#?(:clj (defn log [level & args]\r\n          (log/log level (if (= 1 (count args))\r\n                           (first args)\r\n                           (str/join \" \" args)))))\r\n\r\n\r\n;; XXX should loggers be put in the registrar ??\r\n(def ^:private loggers\r\n  \"Holds the current set of logging functions.\r\n   By default, re-frame uses the functions provided by js/console.\r\n   Use `set-loggers!` to change these defaults\r\n  \"\r\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\r\n                  :warn      (js/console.warn.bind  js/console)\r\n                  :error     (js/console.error.bind js/console)\r\n                  :debug     (js/console.debug.bind js/console)\r\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\r\n                               (js/console.group.bind js/console)\r\n                               (js/console.log.bind   js/console))\r\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\r\n                               (js/console.groupEnd.bind js/console)\r\n                               #())})\r\n        ;; clojure versions\r\n        #?(:clj {:log      (partial log :info)\r\n                 :warn     (partial log :warn)\r\n                 :error    (partial log :error)\r\n                 :debug    (partial log :debug)\r\n                 :group    (partial log :info)\r\n                 :groupEnd  #()})))\r\n\r\n(defn console\r\n  [level & args]\r\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\r\n  (apply (level @loggers) args))\r\n\r\n\r\n(defn set-loggers!\r\n  \"Change the set (or a subset) of logging functions used by re-frame.\r\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\r\n  [new-loggers]\r\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\r\n  (swap! loggers merge new-loggers))\r\n\r\n(defn get-loggers\r\n  \"Get the current logging functions used by re-frame.\"\r\n  []\r\n  @loggers)\r\n"]}