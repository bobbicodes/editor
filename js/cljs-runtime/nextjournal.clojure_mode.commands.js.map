{"version":3,"sources":["nextjournal/clojure_mode/commands.cljs"],"mappings":"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","names":["nextjournal.clojure-mode.commands/view-command","f","p__60546","map__60547","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj60549","js/undefined","obj60550","state","dispatch","G__60551","nextjournal.clojure-mode.commands/scoped-view-command","p__60552","map__60553","obj60555","obj60556","nextjournal.clojure_mode.node.within_program_QMARK_","G__60557","nextjournal.clojure-mode.commands/unwrap*","nextjournal.clojure_mode.util.update_ranges","p__60558","map__60559","obj60561","obj60562","obj60563","range","from","to","empty","temp__5753__auto__","nearest-balanced-coll","G__60564","nextjournal.clojure_mode.node.tree","nextjournal.clojure-mode.node/closest","nextjournal.clojure-mode.node/coll?","nextjournal.clojure-mode.util/guard","nextjournal.clojure-mode.node/balanced?","nextjournal.clojure_mode.node.from_to","nextjournal.clojure-mode.node/down","nextjournal.clojure-mode.node/down-last","nextjournal.clojure-mode.commands/copy-to-clipboard!","text","focus-el","obj60565","js/document","input-el","js/document.createElement","obj60566","obj60567","js/document.execCommand","nextjournal.clojure-mode.commands/kill*","p__60572","map__60573","obj60575","obj60576","obj60577","node","parent","p1__60570#","or__4223__auto__","nextjournal.clojure-mode.node/string?","nextjournal.clojure-mode.node/top?","line-end","next-children","nextjournal.clojure_mode.node.children","last-child-on-line","G__60578","cljs.core.take_while","p1__60571#","cljs.core.every_pred","nextjournal.clojure-mode.node/start","cljs.core/last","content","nextjournal.clojure_mode.node.string","content-from","cljs.core.subs","next-newline","nextjournal.clojure-mode.node/end","nextjournal.clojure-mode.node/end-edge?","G__60586","cljs.core/first","nextjournal.clojure-mode.util/node-js?","nextjournal.clojure-mode.util/from-to","nextjournal.clojure-mode.commands/enter-and-indent*","ctx","nextjournal.clojure-mode.extensions.formatting/make-indent-context","p__60589","map__60590","obj60595","obj60596","obj60598","indent-at","G__60600","cljs.core.some_fn","nextjournal.clojure-mode.node/inner-span","indent","nextjournal.clojure-mode.extensions.formatting/get-indentation","insertion","nextjournal.clojure-mode.extensions.formatting/spaces","nextjournal.clojure-mode.commands/nav-position","dir","G__60603","p1__60602#","obj60607","applied-science.js-interop.impl/wrap-key","G__60609","js/Error","nextjournal.clojure-mode.selections/constrain","nextjournal.clojure-mode.commands/nav","p__60610","map__60611","obj60613","obj60614","obj60615","obj60616","G__60618","nextjournal.clojure-mode.commands/nav-select","p__60622","map__60623","obj60625","obj60626","obj60628","nextjournal.clojure_mode.node.balanced_range","map__60629","obj60631","obj60632","G__60633","nextjournal.clojure-mode.commands/balance-ranges","p__60635","map__60636","obj60638","obj60639","obj60640","nextjournal.clojure-mode.commands/log","js/console.log","nextjournal.clojure-mode.commands/slurp","direction","p__60642","map__60643","obj60645","obj60646","obj60647","p1__60641#","cljs.core/not","G__60648","G__60649","nextjournal.clojure-mode.node/with-prefix","nextjournal.clojure-mode.node/right","G__60650","nextjournal.clojure-mode.node/left","nextjournal.clojure-mode.node/start-edge?","target","G__60653","cljs.core.remove","nextjournal.clojure-mode.node/line-comment?","nextjournal.clojure-mode.node/rights","nextjournal.clojure-mode.node/lefts","G__60656","edge","nextjournal.clojure-mode.node/name","obj60657","obj60658","nextjournal.clojure-mode.node/left-edge-with-prefix","start","nextjournal.clojure-mode.commands/barf","p__60661","map__60662","obj60664","obj60665","obj60666","G__60667","G__60668","cljs.core.drop","x__4309__auto__","y__4310__auto__","obj60669","obj60670","next-first-child","G__60673","left-edge","left-start","x__4306__auto__","y__4307__auto__","nextjournal.clojure-mode.commands/builtin-index","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectAll","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.insertNewlineAndIndent","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineBoundaryBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteCharForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharLeft","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectCharRight","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupBackward","js/module$node_modules$$codemirror$commands$dist$index_cjs.deleteGroupForward","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageDown","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectPageUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineEnd","js/module$node_modules$$codemirror$commands$dist$index_cjs.splitLine","js/module$node_modules$$codemirror$commands$dist$index_cjs.transposeChars","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectLineUp","js/module$node_modules$$codemirror$commands$dist$index_cjs.cursorDocStart","js/module$node_modules$$codemirror$commands$dist$index_cjs.selectDocStart","nextjournal.clojure-mode.commands/indent","nextjournal.clojure-mode.extensions.formatting/format","nextjournal.clojure-mode.commands/unwrap","nextjournal.clojure-mode.commands/kill","nextjournal.clojure-mode.commands/nav-right","nextjournal.clojure-mode.commands/nav-left","nextjournal.clojure-mode.commands/nav-select-right","nextjournal.clojure-mode.commands/nav-select-left","nextjournal.clojure-mode.commands/slurp-forward","nextjournal.clojure-mode.commands/slurp-backward","nextjournal.clojure-mode.commands/barf-forward","nextjournal.clojure-mode.commands/barf-backward","nextjournal.clojure-mode.commands/selection-grow","nextjournal.clojure-mode.extensions.selection-history/selection-grow*","nextjournal.clojure-mode.commands/selection-return","nextjournal.clojure-mode.extensions.selection-history/selection-return*","nextjournal.clojure-mode.commands/enter-and-indent","nextjournal.clojure-mode.commands/paredit-index","nextjournal.clojure-mode.commands/index","cljs.core.merge","nextjournal.clojure-mode.commands/reverse-index","p1__60677#","p2__60679#","p3__60678#","cljs.core/reduce-kv","cljs.core.assoc"],"sourcesContent":["(ns nextjournal.clojure-mode.commands\r\n  (:require [\"@codemirror/commands\" :as commands]\r\n            [applied-science.js-interop :as j]\r\n            [nextjournal.clojure-mode.util :as u]\r\n            [nextjournal.clojure-mode.selections :as sel]\r\n            [nextjournal.clojure-mode.node :as n]\r\n            [nextjournal.clojure-mode.extensions.formatting :as format]\r\n            [nextjournal.clojure-mode.extensions.selection-history :as sel-history]))\r\n\r\n\r\n(defn view-command [f]\r\n  (j/fn [^:js {:keys [^js state dispatch]}]\r\n    (some-> (f state) (dispatch))\r\n    true))\r\n\r\n;; some commands won't make sense when clojure is embedded into other languages\r\n;; in which case we want default commands/envent-handling applied\r\n(defn scoped-view-command [f]\r\n  (j/fn [^:js {:keys [^js state dispatch]}]\r\n    (if (n/within-program? state)\r\n      (do (some-> (f state) (dispatch))\r\n          true)\r\n      false)))\r\n\r\n(defn unwrap* [state]\r\n  (u/update-ranges state\r\n    (j/fn [^:js {:as range :keys [from to empty]}]\r\n      (when empty\r\n        (when-let [nearest-balanced-coll\r\n                   (some-> (n/tree state from -1)\r\n                           (n/closest n/coll?)\r\n                           (u/guard n/balanced?))]\r\n          {:cursor (dec from)\r\n           :changes [(n/from-to (n/down nearest-balanced-coll))\r\n                     (n/from-to (n/down-last nearest-balanced-coll))]})))))\r\n\r\n(defn copy-to-clipboard! [text]\r\n  (let [^js focus-el (j/get js/document :activeElement)\r\n        input-el (js/document.createElement \"textarea\")]\r\n    (.setAttribute input-el \"class\" \"clipboard-input\")\r\n    (j/assoc! input-el :innerHTML text)\r\n    (-> js/document .-body (.appendChild input-el))\r\n    (.focus input-el #js {:preventScroll true})\r\n    (.select input-el)\r\n    (js/document.execCommand \"copy\")\r\n    (.focus focus-el #js {:preventScroll true})\r\n    (-> js/document .-body (.removeChild input-el))))\r\n\r\n(defn kill* [^js state]\r\n  (u/update-ranges state\r\n    (j/fn [^:js {:as range :keys [from to empty]}]\r\n      (if empty\r\n        (let [node (n/tree state from)\r\n              parent (n/closest node #(or (n/coll? %)\r\n                                          (n/string? %)\r\n                                          (n/top? %)))\r\n              line-end (.-to (.lineAt (.-doc state) from))\r\n              next-children (when parent (n/children parent from 1))\r\n              last-child-on-line\r\n              (when parent (some->> next-children\r\n                                    (take-while (every-pred\r\n                                                 #(<= (n/start %) line-end)))\r\n                                    last))\r\n              to (cond (n/string? parent) (let [content (str (n/string state parent))\r\n                                                content-from (subs content (- from (n/start parent)))\r\n                                                next-newline (.indexOf content-from \\newline)]\r\n                                            (if (neg? next-newline)\r\n                                              (dec (n/end parent))\r\n                                              (+ from next-newline 1)))\r\n                       last-child-on-line (if (n/end-edge? last-child-on-line)\r\n                                            (n/start last-child-on-line)\r\n                                            (n/end last-child-on-line))\r\n                       (some-> (first next-children)\r\n                               n/start\r\n                               (> line-end)) (-> (first next-children) n/start))]\r\n          (when-not u/node-js?\r\n            (copy-to-clipboard! (n/string state from to)))\r\n          (when to\r\n            {:cursor from\r\n             :changes {:from from\r\n                       :to to}}))\r\n        (do\r\n          (copy-to-clipboard! (n/string state from to))\r\n          {:cursor from\r\n           :changes (u/from-to from to)})))))\r\n\r\n(defn enter-and-indent* [^js state]\r\n  (let [ctx (format/make-indent-context state)]\r\n    (u/update-ranges state\r\n      (j/fn [^:js {:as range :keys [from to empty]}]\r\n        (let [indent-at (some-> (n/closest (n/tree state from) (some-fn n/coll? n/top?))\r\n                          n/inner-span\r\n                          n/start)\r\n              indent (when indent-at (format/get-indentation ctx indent-at))\r\n              insertion (str \\newline (when indent (format/spaces state indent)))]\r\n          {:cursor (+ from (count insertion))\r\n           :changes [{:from from\r\n                      :to to\r\n                      :insert insertion}]})))))\r\n\r\n(defn nav-position [state from dir]\r\n  (or (some-> (n/closest (n/tree state from)\r\n                         #(or (n/coll? %)\r\n                              (n/string? %)\r\n                              (n/top? %)))\r\n              (n/children from dir)\r\n              first\r\n              (j/get (case dir -1 :from 1 :to)))\r\n      (sel/constrain state (+ from dir))))\r\n\r\n(defn nav [dir]\r\n  (fn [state]\r\n    (u/update-ranges state\r\n      (j/fn [^:js {:as range :keys [from to empty]}]\r\n        (if empty\r\n          {:cursor (nav-position state from dir)}\r\n          {:cursor (j/get (u/from-to from to) (case dir -1 :from 1 :to))})))))\r\n\r\n(defn nav-select [dir]\r\n  (fn [^js state]\r\n    (u/update-ranges state\r\n      (j/fn [^:js {:as range :keys [from to empty]}]\r\n        (if empty\r\n          {:range (n/balanced-range state from (nav-position state from dir))}\r\n          {:range (j/let [^:js {:keys [from to]} (u/from-to from to)]\r\n                    (case dir\r\n                      1 (n/balanced-range state from (nav-position state to dir))\r\n                      -1 (n/balanced-range state (nav-position state from dir) to)))})))))\r\n\r\n(defn balance-ranges [^js state]\r\n  (u/update-ranges state\r\n    (j/fn [^:js {:keys [from to empty]}]\r\n      (when-not empty\r\n        {:range (n/balanced-range state from to)}))))\r\n\r\n(def log js/console.log)\r\n\r\n(defn slurp [direction]\r\n  (fn [^js state]\r\n    (u/update-ranges state\r\n      (j/fn [^:js {:as range :keys [from to empty]}]\r\n        (when empty\r\n          (when-let [parent (n/closest (n/tree state from)\r\n                                       (every-pred n/coll?\r\n                                                   #(not\r\n                                                     (case direction\r\n                                                        1 (some-> % n/with-prefix n/right n/end-edge?)\r\n                                                       -1 (some-> % n/with-prefix n/left n/start-edge?)))))]\r\n            (when-let [target (case direction 1 (first (remove n/line-comment? (n/rights (n/with-prefix parent))))\r\n                                              -1 (first (remove n/line-comment? (n/lefts (n/with-prefix parent)))))]\r\n              {:cursor/mapped from\r\n               :changes (case direction\r\n                          1\r\n                          (let [edge (n/down-last parent)]\r\n                            [{:from (-> target n/end)\r\n                              :insert (n/name edge)}\r\n                             (-> edge\r\n                                 n/from-to\r\n                                 (j/assoc! :insert \" \"))])\r\n                          -1\r\n                          (let [^string edge (n/left-edge-with-prefix state parent)\r\n                                start (n/start (n/with-prefix parent))]\r\n                            [{:from start\r\n                              :to (+ start (count edge))\r\n                              :insert \" \"}\r\n                             {:from (n/start target)\r\n                              :insert edge}]))})))))))\r\n\r\n(defn barf [direction]\r\n  (fn [^js state]\r\n    (->> (j/fn [^:js {:as range :keys [from to empty]}]\r\n           (when empty\r\n             (when-let [parent (-> (n/tree state from)\r\n                                   (n/closest n/coll?))]\r\n               (case direction\r\n                 1\r\n                 (when-let [target (some->> (n/down-last parent)\r\n                                            n/lefts\r\n                                            (remove n/line-comment?)\r\n                                            (drop 1)\r\n                                            first)]\r\n\r\n                   {:cursor (min (n/end target) from)\r\n                    :changes [{:from (n/end target)\r\n                               :insert (n/name (n/down-last parent))}\r\n                              (-> (n/down-last parent)\r\n                                  n/from-to\r\n                                  (j/assoc! :insert \" \"))]})\r\n                 -1\r\n                 (when-let [next-first-child (some->> (n/down parent)\r\n                                                      n/rights\r\n                                                      (remove n/line-comment?)\r\n                                                      (drop 1)\r\n                                                      first)]\r\n                   (let [left-edge (n/left-edge-with-prefix state parent)\r\n                         left-start (n/start (n/with-prefix parent))]\r\n                     {:cursor (max from (+ (n/start next-first-child) (inc (count left-edge))))\r\n                      :changes [\r\n                                ;; insert left edge (prefixed by a space) in front of next-first-child\r\n                                {:from (n/start next-first-child)\r\n                                 :insert (str \" \" left-edge)}\r\n                                ;; replace left-edge with spaces\r\n                                {:from left-start\r\n                                 :to (+ left-start (count left-edge))\r\n                                 :insert (format/spaces state (count left-edge))}]}))))))\r\n         (u/update-ranges state))))\r\n\r\n(def builtin-index\r\n  \"Subset of builtin commands that compliment paredit\"\r\n  {:cursorLineStart commands/cursorLineStart\r\n   :selectLineStart commands/selectLineStart\r\n   :cursorLineDown commands/cursorLineDown\r\n   :selectLineDown commands/selectLineDown\r\n   :selectAll commands/selectAll\r\n   :cursorLineBoundaryForward commands/cursorLineBoundaryForward\r\n   :selectLineBoundaryForward commands/selectLineBoundaryForward\r\n   :deleteCharBackward commands/deleteCharBackward\r\n   :insertNewlineAndIndent commands/insertNewlineAndIndent\r\n   :cursorLineBoundaryBackward commands/cursorLineBoundaryBackward\r\n   :selectLineBoundaryBackward commands/selectLineBoundaryBackward\r\n   :deleteCharForward commands/deleteCharForward\r\n   :cursorCharLeft commands/cursorCharLeft\r\n   :selectCharLeft commands/selectCharLeft\r\n   :cursorCharRight commands/cursorCharRight\r\n   :selectCharRight commands/selectCharRight\r\n   :cursorGroupForward commands/cursorGroupForward\r\n   :selectGroupForward commands/selectGroupForward\r\n   :cursorGroupBackward commands/cursorGroupBackward\r\n   :selectGroupBackward commands/selectGroupBackward\r\n   :cursorDocEnd commands/cursorDocEnd\r\n   :selectDocEnd commands/selectDocEnd\r\n   :deleteGroupBackward commands/deleteGroupBackward\r\n   :deleteGroupForward commands/deleteGroupForward\r\n   :cursorPageDown commands/cursorPageDown\r\n   :selectPageDown commands/selectPageDown\r\n   :cursorPageUp commands/cursorPageUp\r\n   :selectPageUp commands/selectPageUp\r\n   :cursorLineEnd commands/cursorLineEnd\r\n   :selectLineEnd commands/selectLineEnd\r\n   :splitLine commands/splitLine\r\n   :transposeChars commands/transposeChars\r\n   :cursorLineUp commands/cursorLineUp\r\n   :selectLineUp commands/selectLineUp\r\n   :cursorDocStart commands/cursorDocStart\r\n   :selectDocStart commands/selectDocStart})\r\n\r\n(def indent (view-command format/format))\r\n(def unwrap (view-command unwrap*))\r\n(def kill (scoped-view-command kill*))\r\n(def nav-right (view-command (nav 1)))\r\n(def nav-left (view-command (nav -1)))\r\n(def nav-select-right (view-command (nav-select 1)))\r\n(def nav-select-left (view-command (nav-select -1)))\r\n(def slurp-forward (view-command (slurp 1)))\r\n(def slurp-backward (view-command (slurp -1)))\r\n(def barf-forward (view-command (barf 1)))\r\n(def barf-backward (view-command (barf -1)))\r\n(def selection-grow (view-command sel-history/selection-grow*))\r\n(def selection-return (view-command sel-history/selection-return*))\r\n(def enter-and-indent (view-command enter-and-indent*))\r\n\r\n(def paredit-index\r\n  {:indent indent\r\n   :unwrap unwrap\r\n   :kill kill\r\n   :nav-right nav-right\r\n   :nav-left nav-left\r\n   :nav-select-right nav-select-right\r\n   :nav-select-left nav-select-left\r\n   :slurp-forward slurp-forward\r\n   :slurp-backward slurp-backward\r\n   :barf-forward barf-forward\r\n   :barf-backward barf-backward\r\n   :selection-grow selection-grow\r\n   :selection-return selection-return\r\n   :enter-and-indent enter-and-indent})\r\n\r\n(def index\r\n  \"Mapping of keyword-id to command functions\"\r\n  (merge builtin-index\r\n         paredit-index))\r\n\r\n(def reverse-index\r\n  \"Lookup keyword-id by function\"\r\n  (reduce-kv #(assoc %1 %3 %2) {} index))\r\n"]}