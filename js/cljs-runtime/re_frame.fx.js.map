{"version":3,"sources":["re_frame/fx.cljc"],"mappings":"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","names":["re-frame.fx/kind","js/Error","re-frame.registry/kinds","p__59537","map__59538","cljs.core/--destructure-map","cljs.core.get","re-frame.fx/register-built-in!","registry","reg-fx","cljs.core.partial","re-frame.registry/register-handler","p__59539","map__59540","value","event-queue","seq__59541","cljs.core/seq","chunk__59542","count__59543","i__59544","map__59550","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__59551","cljs.core/first","cljs.core/next","ms","dispatch","effect","cljs.core.remove","cljs.core/nil?","cljs.core/empty?","re_frame.loggers.console","re-frame.interop/set-timeout!","re-frame.router/dispatch","p__59552","map__59553","cljs.core/vector?","p__59562","map__59567","cljs.core/sequential?","seq__59568","chunk__59569","count__59570","i__59571","event","p__59572","map__59573","clear-event","re-frame.registry/clear-handlers","re-frame.events/kind","seq__59574","chunk__59575","count__59576","i__59577","p__59578","map__59579","app-db","cljs.core/deref","cljs.core/reset!","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__59580","re-frame.trace/*current-trace*","*current-trace*-temp-val__59581","re-frame.trace/start-trace","end__59231__auto__","re-frame.interop/now","duration__59232__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","seq__59582","chunk__59583","count__59584","i__59585","vec__59596","cljs.core.nth","vec__59601","seq__59606","chunk__59607","count__59608","i__59609","vec__59620","vec__59625","effect-key","effect-value","temp__5751__auto__","effect-fn","re-frame.registry/get-handler","G__59599","G__59600","G__59604","G__59605","G__59623","G__59624","G__59628","G__59629","lambdaisland.glogi.log","cljs.core/identity"],"sourcesContent":["(ns re-frame.fx\r\n  (:require [re-frame.router :as router]\r\n            [re-frame.interceptor :refer [->interceptor]]\r\n            [re-frame.interop :refer [set-timeout!]]\r\n            [re-frame.events :as events]\r\n            [re-frame.registry :as reg]\r\n            [re-frame.loggers :refer [console]]\r\n            [re-frame.trace :as trace :include-macros true]\r\n            [lambdaisland.glogi :as log]))\r\n\r\n;; -- Registration ------------------------------------------------------------\r\n\r\n(def kind :fx)\r\n(assert (re-frame.registry/kinds kind))\r\n\r\n;; -- Interceptor -------------------------------------------------------------\r\n\r\n(defn register-built-in!\r\n  [{:keys [registry]}]\r\n  (let [reg-fx (partial reg/register-handler registry kind)]\r\n\r\n    ;; :dispatch-later\r\n    ;;\r\n    ;; `dispatch` one or more events after given delays. Expects a collection\r\n    ;; of maps with two keys:  :`ms` and `:dispatch`\r\n    ;;\r\n    ;; usage:\r\n    ;;\r\n    ;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\r\n    ;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\r\n    ;;\r\n    ;; Note: nil entries in the collection are ignored which means events can be added\r\n    ;; conditionally:\r\n    ;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\r\n    ;;                       {:ms 100 :dispatch [:another-one]}]}\r\n    ;;\r\n    (reg-fx\r\n     :dispatch-later\r\n     (fn [value {:keys [event-queue]}]\r\n       (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\r\n         (if (or (empty? dispatch) (not (number? ms)))\r\n           (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\r\n           (set-timeout! #(router/dispatch event-queue dispatch) ms)))))\r\n\r\n\r\n    ;; :dispatch\r\n    ;;\r\n    ;; `dispatch` one event. Expects a single vector.\r\n    ;;\r\n    ;; usage:\r\n    ;;   {:dispatch [:event-id \"param\"] }\r\n\r\n    (reg-fx\r\n     :dispatch\r\n     (fn [value {:keys [event-queue]}]\r\n       (if-not (vector? value)\r\n         (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\r\n         (router/dispatch event-queue value))))\r\n\r\n\r\n    ;; :dispatch-n\r\n    ;;\r\n    ;; `dispatch` more than one event. Expects a list or vector of events. Something for which\r\n    ;; sequential? returns true.\r\n    ;;\r\n    ;; usage:\r\n    ;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\r\n    ;;\r\n    ;; Note: nil events are ignored which means events can be added\r\n    ;; conditionally:\r\n    ;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\r\n    ;;                       [:another-one])}\r\n    ;;\r\n    (reg-fx\r\n     :dispatch-n\r\n     (fn [value {:keys [event-queue]}]\r\n       (if-not (sequential? value)\r\n         (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\r\n         (doseq [event (remove nil? value)] (router/dispatch event-queue event)))))\r\n\r\n\r\n    ;; :deregister-event-handler\r\n    ;;\r\n    ;; removes a previously registered event handler. Expects either a single id (\r\n    ;; typically a namespaced keyword), or a seq of ids.\r\n    ;;\r\n    ;; usage:\r\n    ;;   {:deregister-event-handler :my-id)}\r\n    ;; or:\r\n    ;;   {:deregister-event-handler [:one-id :another-id]}\r\n    ;;\r\n    (reg-fx\r\n     :deregister-event-handler\r\n     (fn [value {:keys [registry]}]\r\n       (let [clear-event (partial reg/clear-handlers registry events/kind)]\r\n         (if (sequential? value)\r\n           (doseq [event value] (clear-event event))\r\n           (clear-event value)))))\r\n\r\n\r\n    ;; :db\r\n    ;;\r\n    ;; reset! app-db with a new value. `value` is expected to be a map.\r\n    ;;\r\n    ;; usage:\r\n    ;;   {:db  {:key1 value1 key2 value2}}\r\n    ;;\r\n    (reg-fx\r\n     :db\r\n     (fn [value {:keys [app-db]}]\r\n       (when-not (identical? @app-db value)\r\n         (reset! app-db value))))))\r\n\r\n;; -- Builtin Effect Handlers  ------------------------------------------------\r\n\r\n(defn do-fx\r\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result\r\n  this interceptor is Domino 3.\r\n\r\n  This interceptor is silently added (by reg-event-db etc) to the front of\r\n  interceptor chains for all events.\r\n\r\n  For each key in `:effects` (a map), it calls the registered `effects handler`\r\n  (see `reg-fx` for registration of effect handlers).\r\n\r\n  So, if `:effects` was:\r\n      {:dispatch  [:hello 42]\r\n       :db        {...}\r\n       :undo      \\\"set flag\\\"}\r\n\r\n  it will call the registered effect handlers for each of the map's keys:\r\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\r\n  value for that key - so in the example above the effect handler for :dispatch\r\n  will be given one arg `[:hello 42]`.\r\n\r\n  You cannot rely on the ordering in which effects are executed.\"\r\n  [registry]\r\n  (->interceptor\r\n   :id :do-fx\r\n   :after (fn do-fx-after\r\n            [context]\r\n            {:pre [(:frame context)]}\r\n            (trace/with-trace\r\n              {:op-type :event/do-fx}\r\n              (doseq [[effect-key effect-value] (:effects context)]\r\n                (if-let [effect-fn (reg/get-handler registry kind effect-key)]\r\n                  (effect-fn effect-value (:frame context))\r\n                  (log/error :missing-fx-handler {:effect-key effect-key})))))))\r\n"]}