{"version":3,"sources":["nextjournal/clojure_mode/demo/sci.cljs"],"mappings":"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","names":["var_args","G__75535","nextjournal.clojure-mode.demo.sci/eval-string","js/Error","source","cljs.core/deref","nextjournal.clojure_mode.demo.sci.eval_string","nextjournal.clerk.sci-viewer/!sci-ctx","ctx","temp__5757__auto__","code","cljs.core/not-empty","clojure.string/trim","e75536","sci.core/eval-string*","e","p__75537","map__75538","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","obj75540","js/undefined","nextjournal.clojure-mode.demo.sci/eval-at-cursor","on-result","state","G__75542","nextjournal.clojure-mode.extensions.eval-region/cursor-node-string","p__75545","map__75546","obj75550","nextjournal.clojure-mode.demo.sci/eval-top-level","G__75553","nextjournal.clojure-mode.extensions.eval-region/top-level-string","p__75555","map__75557","obj75560","nextjournal.clojure-mode.demo.sci/eval-cell","G__75562","nextjournal.clojure-mode.demo.sci/keymap*","modifier","p__75564","map__75565","cljs.core/--destructure-map","cljs.core.get","nextjournal.clojure-mode.demo.sci/extension","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","cljs.core.partial"],"sourcesContent":["(ns nextjournal.clojure-mode.demo.sci\r\n  (:require [\"@codemirror/view\" :as view]\r\n            [applied-science.js-interop :as j]\r\n            [clojure.string :as str]\r\n            [nextjournal.clerk.sci-viewer :as sv]\r\n            [nextjournal.clojure-mode.extensions.eval-region :as eval-region]\r\n            [sci.core :as sci]))\r\n\r\n(defn eval-string\r\n  ([source] (eval-string @sv/!sci-ctx source))\r\n  ([ctx source]\r\n   (when-some [code (not-empty (str/trim source))]\r\n     (try {:result (sci/eval-string* ctx code)}\r\n          (catch js/Error e\r\n            {:error (str (.-message e))})))))\r\n\r\n(j/defn eval-at-cursor [on-result ^:js {:keys [state]}]\r\n  (some->> (eval-region/cursor-node-string state)\r\n           (eval-string)\r\n           (on-result))\r\n  true)\r\n\r\n(j/defn eval-top-level [on-result ^:js {:keys [state]}]\r\n  (some->> (eval-region/top-level-string state)\r\n           (eval-string)\r\n           (on-result))\r\n  true)\r\n\r\n(j/defn eval-cell [on-result ^:js {:keys [state]}]\r\n  (-> (.-doc state)\r\n      (str)\r\n      (eval-string)\r\n      (on-result))\r\n  true)\r\n\r\n(defn keymap* [modifier]\r\n  {:eval-cell\r\n   [{:key \"Mod-Enter\"\r\n     :doc \"Evaluate cell\"}]\r\n   :eval-at-cursor\r\n   [{:key (str modifier \"-Enter\")\r\n     :doc \"Evaluates form at cursor\"}]\r\n   :eval-top-level\r\n   [{:key (str modifier \"-Shift-Enter\")\r\n     :doc \"Evaluates top-level form at cursor\"}]})\r\n\r\n(defn extension [{:keys [modifier\r\n                         on-result]}]\r\n  (.of view/keymap\r\n       (j/lit\r\n        [{:key \"Mod-Enter\"\r\n          :run (partial eval-cell on-result)}\r\n         {:key (str modifier \"-Enter\")\r\n          :shift (partial eval-top-level on-result)\r\n          :run (partial eval-at-cursor on-result)}])))\r\n"]}